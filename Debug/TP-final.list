
TP-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008348  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008518  08008518  00009518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008994  08008994  0000a204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800899c  0800899c  0000a204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800899c  0800899c  0000999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089a0  080089a0  000099a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  080089a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000204  08008ba8  0000a204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08008ba8  0000a55c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b63  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bea  00000000  00000000  0001ad97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2a  00000000  00000000  0001e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242a2  00000000  00000000  0001f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149dd  00000000  00000000  000435e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0dd0  00000000  00000000  00057fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  00128dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008500 	.word	0x08008500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08008500 	.word	0x08008500

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <readKey>:
static debounceState_t currentState = BUTTON_UP;
static delay_t debounceDelay;
static KeyStatus_t keyPressed = KEY_NO_CHANGES;
static const uint32_t debounceWait = 40;

KeyStatus_t readKey(){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
	if(keyPressed!=KEY_NO_CHANGES){
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <readKey+0x2c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d007      	beq.n	8000f32 <readKey+0x1e>
		KeyStatus_t ret = keyPressed;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <readKey+0x2c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
		keyPressed = KEY_NO_CHANGES;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <readKey+0x2c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	701a      	strb	r2, [r3, #0]
		return ret;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	e000      	b.n	8000f34 <readKey+0x20>
	}
	return KEY_NO_CHANGES;
 8000f32:	2302      	movs	r3, #2
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000000 	.word	0x20000000

08000f44 <isKeyPressed>:

static bool isKeyPressed(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET;
 8000f48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <isKeyPressed+0x20>)
 8000f4e:	f001 fb3b 	bl	80025c8 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020800 	.word	0x40020800

08000f68 <debounceFSM_init>:

void debounceFSM_init(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	currentState = BUTTON_UP;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <debounceFSM_init+0x18>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, debounceWait);
 8000f72:	2328      	movs	r3, #40	@ 0x28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <debounceFSM_init+0x1c>)
 8000f78:	f000 f874 	bl	8001064 <delayInit>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000220 	.word	0x20000220
 8000f84:	20000224 	.word	0x20000224

08000f88 <debounceFSM_update>:

void debounceFSM_update(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	switch(currentState)
 8000f8c:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <debounceFSM_update+0xd0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d855      	bhi.n	8001040 <debounceFSM_update+0xb8>
 8000f94:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <debounceFSM_update+0x14>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fc5 	.word	0x08000fc5
 8000fa4:	08000ff1 	.word	0x08000ff1
 8000fa8:	0800100f 	.word	0x0800100f
	{
	case BUTTON_UP:
		if(isKeyPressed()){
 8000fac:	f7ff ffca 	bl	8000f44 <isKeyPressed>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d046      	beq.n	8001044 <debounceFSM_update+0xbc>
			currentState=BUTTON_FALLING;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <debounceFSM_update+0xd0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
			(void)delayRead(&debounceDelay); // inicio timer, debería devolver falso
 8000fbc:	4827      	ldr	r0, [pc, #156]	@ (800105c <debounceFSM_update+0xd4>)
 8000fbe:	f000 f86c 	bl	800109a <delayRead>
		}
		break;
 8000fc2:	e03f      	b.n	8001044 <debounceFSM_update+0xbc>
	case BUTTON_FALLING:
		if(delayRead(&debounceDelay)){
 8000fc4:	4825      	ldr	r0, [pc, #148]	@ (800105c <debounceFSM_update+0xd4>)
 8000fc6:	f000 f868 	bl	800109a <delayRead>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d03b      	beq.n	8001048 <debounceFSM_update+0xc0>
			//se cumplió el tiempo
			if(isKeyPressed()){
 8000fd0:	f7ff ffb8 	bl	8000f44 <isKeyPressed>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <debounceFSM_update+0x60>
				currentState = BUTTON_DOWN;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <debounceFSM_update+0xd0>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
				keyPressed = KEY_FALLING_EDGE_DETECTED;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <debounceFSM_update+0xd8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
			}else{
				currentState = BUTTON_UP;
			}
		}
		break;
 8000fe6:	e02f      	b.n	8001048 <debounceFSM_update+0xc0>
				currentState = BUTTON_UP;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <debounceFSM_update+0xd0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
		break;
 8000fee:	e02b      	b.n	8001048 <debounceFSM_update+0xc0>
	case BUTTON_DOWN:
		if(!isKeyPressed()){
 8000ff0:	f7ff ffa8 	bl	8000f44 <isKeyPressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f083 0301 	eor.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d025      	beq.n	800104c <debounceFSM_update+0xc4>
			currentState = BUTTON_RAISING;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <debounceFSM_update+0xd0>)
 8001002:	2203      	movs	r2, #3
 8001004:	701a      	strb	r2, [r3, #0]
			(void)delayRead(&debounceDelay); // inicio timer, debería devolver falso
 8001006:	4815      	ldr	r0, [pc, #84]	@ (800105c <debounceFSM_update+0xd4>)
 8001008:	f000 f847 	bl	800109a <delayRead>
		}
		break;
 800100c:	e01e      	b.n	800104c <debounceFSM_update+0xc4>
	case BUTTON_RAISING:
		if(delayRead(&debounceDelay)){
 800100e:	4813      	ldr	r0, [pc, #76]	@ (800105c <debounceFSM_update+0xd4>)
 8001010:	f000 f843 	bl	800109a <delayRead>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01a      	beq.n	8001050 <debounceFSM_update+0xc8>
			//se cumplió el tiempo
			if(!isKeyPressed()){
 800101a:	f7ff ff93 	bl	8000f44 <isKeyPressed>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <debounceFSM_update+0xb0>
				currentState = BUTTON_UP;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <debounceFSM_update+0xd0>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
				keyPressed = KEY_RISING_EDGE_DETECTED;
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <debounceFSM_update+0xd8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
			}else{
				currentState = BUTTON_DOWN;
			}
		}
		break;
 8001036:	e00b      	b.n	8001050 <debounceFSM_update+0xc8>
				currentState = BUTTON_DOWN;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <debounceFSM_update+0xd0>)
 800103a:	2202      	movs	r2, #2
 800103c:	701a      	strb	r2, [r3, #0]
		break;
 800103e:	e007      	b.n	8001050 <debounceFSM_update+0xc8>
	default:
		break;
 8001040:	bf00      	nop
 8001042:	e006      	b.n	8001052 <debounceFSM_update+0xca>
		break;
 8001044:	bf00      	nop
 8001046:	e004      	b.n	8001052 <debounceFSM_update+0xca>
		break;
 8001048:	bf00      	nop
 800104a:	e002      	b.n	8001052 <debounceFSM_update+0xca>
		break;
 800104c:	bf00      	nop
 800104e:	e000      	b.n	8001052 <debounceFSM_update+0xca>
		break;
 8001050:	bf00      	nop
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000220 	.word	0x20000220
 800105c:	20000224 	.word	0x20000224
 8001060:	20000000 	.word	0x20000000

08001064 <delayInit>:
#include "stm32f4xx_hal.h"

#include "API_delay.h"

void delayInit( delay_t * delay, tick_t duration ){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    if(delay == NULL || duration == 0)return;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <delayInit+0x2a>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <delayInit+0x2a>
    delay->duration = duration;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	605a      	str	r2, [r3, #4]
    delay->running = false;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	721a      	strb	r2, [r3, #8]
    delay->startTime = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e000      	b.n	8001090 <delayInit+0x2c>
    if(delay == NULL || duration == 0)return;
 800108e:	bf00      	nop
}
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <delayRead>:

bool_t delayRead( delay_t * delay ){
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
    if(delay == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <delayRead+0x12>
        return false;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e021      	b.n	80010f0 <delayRead+0x56>

    if(!delay->running){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7a1b      	ldrb	r3, [r3, #8]
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d009      	beq.n	80010ce <delayRead+0x34>
        delay->startTime = HAL_GetTick();
 80010ba:	f000 ffdb 	bl	8002074 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
        delay->running = true;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	721a      	strb	r2, [r3, #8]
        return false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e010      	b.n	80010f0 <delayRead+0x56>
    }
    else{
        tick_t currentTime = HAL_GetTick();
 80010ce:	f000 ffd1 	bl	8002074 <HAL_GetTick>
 80010d2:	60f8      	str	r0, [r7, #12]
        if((currentTime - delay->startTime) >= delay->duration){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	1ad2      	subs	r2, r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d304      	bcc.n	80010ee <delayRead+0x54>
            delay->running = false;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	721a      	strb	r2, [r3, #8]
            return true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <delayRead+0x56>
        }
        else{
            return false;
 80010ee:	2300      	movs	r3, #0
        }
    }
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    if(delay == NULL || duration == 0)return;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <delayWrite+0x1e>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <delayWrite+0x1e>
    delay->duration = duration;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	e000      	b.n	8001118 <delayWrite+0x20>
    if(delay == NULL || duration == 0)return;
 8001116:	bf00      	nop
}
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <MapAxis>:
    config->invert_y = false;
}



static uint8_t MapAxis(float a, float a_max, uint8_t min_idx, uint8_t max_idx, bool invert, uint8_t shift) {
 8001124:	b490      	push	{r4, r7}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	ed87 0a03 	vstr	s0, [r7, #12]
 800112e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4623      	mov	r3, r4
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	4603      	mov	r3, r0
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	460b      	mov	r3, r1
 8001144:	717b      	strb	r3, [r7, #5]
 8001146:	4613      	mov	r3, r2
 8001148:	713b      	strb	r3, [r7, #4]
    float tol = (EDGE_TOLERANCE_PERCENT / 100.0f) * a_max;
 800114a:	edd7 7a02 	vldr	s15, [r7, #8]
 800114e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001274 <MapAxis+0x150>
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Inversión si corresponde
    if (invert) a = -a;
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <MapAxis+0x48>
 8001160:	edd7 7a03 	vldr	s15, [r7, #12]
 8001164:	eef1 7a67 	vneg.f32	s15, s15
 8001168:	edc7 7a03 	vstr	s15, [r7, #12]

    uint8_t range = max_idx - min_idx;
 800116c:	79ba      	ldrb	r2, [r7, #6]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (range < 2) return min_idx + shift; // Nada para mapear, por seguridad
 8001176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800117a:	2b01      	cmp	r3, #1
 800117c:	d804      	bhi.n	8001188 <MapAxis+0x64>
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	793b      	ldrb	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e06f      	b.n	8001268 <MapAxis+0x144>

    uint8_t mapped = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (a <= -a_max + tol) {
 800118e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001192:	edd7 7a02 	vldr	s15, [r7, #8]
 8001196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119a:	ed97 7a03 	vldr	s14, [r7, #12]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d803      	bhi.n	80011b0 <MapAxis+0x8c>
        mapped = min_idx;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011ae:	e056      	b.n	800125e <MapAxis+0x13a>
    } else if (a >= a_max - tol) {
 80011b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	db03      	blt.n	80011d2 <MapAxis+0xae>
        mapped = max_idx;
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011d0:	e045      	b.n	800125e <MapAxis+0x13a>
    } else {
        // Mapeo lineal al rango interno (sin extremos)
        float middle_min = -a_max + tol;
 80011d2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	edc7 7a08 	vstr	s15, [r7, #32]
        float middle_max = a_max - tol;
 80011e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ee:	edc7 7a07 	vstr	s15, [r7, #28]
        float normalized = (a - middle_min) / (middle_max - middle_min); // [0,1]
 80011f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001202:	edd7 7a08 	vldr	s15, [r7, #32]
 8001206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120e:	edc7 7a06 	vstr	s15, [r7, #24]

        uint8_t internal_range = range - 2; // porque extremos están reservados
 8001212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001216:	3b02      	subs	r3, #2
 8001218:	75fb      	strb	r3, [r7, #23]
        mapped = min_idx + 1 + (uint8_t)(normalized * internal_range + 0.5f);
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	edd7 7a06 	vldr	s15, [r7, #24]
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001238:	edc7 7a00 	vstr	s15, [r7]
 800123c:	783b      	ldrb	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4413      	add	r3, r2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // Protección extra por saturación numérica
        if (mapped >= max_idx) mapped = max_idx - 1;
 800124c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	429a      	cmp	r2, r3
 8001254:	d303      	bcc.n	800125e <MapAxis+0x13a>
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	3b01      	subs	r3, #1
 800125a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return mapped + shift;
 800125e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001262:	793b      	ldrb	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3730      	adds	r7, #48	@ 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bc90      	pop	{r4, r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	3d4ccccd 	.word	0x3d4ccccd

08001278 <AccelLevel_Map>:

void AccelLevel_Map(const AccelMatrixLevelConfig_t *config, float ax, float ay, uint8_t *px, uint8_t *py) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6178      	str	r0, [r7, #20]
 8001280:	ed87 0a04 	vstr	s0, [r7, #16]
 8001284:	edc7 0a03 	vstr	s1, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    if (!config || !px || !py) return;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d030      	beq.n	80012f4 <AccelLevel_Map+0x7c>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02d      	beq.n	80012f4 <AccelLevel_Map+0x7c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d02a      	beq.n	80012f4 <AccelLevel_Map+0x7c>

    *px = MapAxis(ax, config->acc_max_abs_val, config->matrix_min_x, config->matrix_max_x,
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	7918      	ldrb	r0, [r3, #4]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	7959      	ldrb	r1, [r3, #5]
                  config->invert_x, config->matrix_shift_x);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	7a9a      	ldrb	r2, [r3, #10]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	7a1b      	ldrb	r3, [r3, #8]
    *px = MapAxis(ax, config->acc_max_abs_val, config->matrix_min_x, config->matrix_max_x,
 80012b4:	eef0 0a67 	vmov.f32	s1, s15
 80012b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80012bc:	f7ff ff32 	bl	8001124 <MapAxis>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	701a      	strb	r2, [r3, #0]

    *py = MapAxis(ay, config->acc_max_abs_val, config->matrix_min_y, config->matrix_max_y,
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	7998      	ldrb	r0, [r3, #6]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	79d9      	ldrb	r1, [r3, #7]
                  config->invert_y, config->matrix_shift_y);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	7ada      	ldrb	r2, [r3, #11]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	7a5b      	ldrb	r3, [r3, #9]
    *py = MapAxis(ay, config->acc_max_abs_val, config->matrix_min_y, config->matrix_max_y,
 80012de:	eef0 0a67 	vmov.f32	s1, s15
 80012e2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012e6:	f7ff ff1d 	bl	8001124 <MapAxis>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e000      	b.n	80012f6 <AccelLevel_Map+0x7e>
    if (!config || !px || !py) return;
 80012f4:	bf00      	nop
}
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <uartSendString>:
        huart->Init.HwFlowCtl,
        huart->Init.OverSampling
    );
}

void uartSendString(const char * pstring){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(!pstring)return;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d019      	beq.n	800133e <uartSendString+0x42>
	RETRY_UNTIL_OK(HAL_UART_Transmit(&huart2,(uint8_t*)pstring,strlen(pstring),TIMEOUT),10);
 800130a:	230a      	movs	r3, #10
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e002      	b.n	8001316 <uartSendString+0x1a>
 8001310:	2064      	movs	r0, #100	@ 0x64
 8001312:	f000 febb 	bl	800208c <HAL_Delay>
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7fe ffca 	bl	80002b0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4808      	ldr	r0, [pc, #32]	@ (8001348 <uartSendString+0x4c>)
 8001328:	f003 fa86 	bl	8004838 <HAL_UART_Transmit>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <uartSendString+0x44>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	60fa      	str	r2, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	dce9      	bgt.n	8001310 <uartSendString+0x14>
 800133c:	e000      	b.n	8001340 <uartSendString+0x44>
	if(!pstring)return;
 800133e:	bf00      	nop
}
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000230 	.word	0x20000230

0800134c <uartInit>:
void uartReceiveStringSize(uint8_t * pstring, uint16_t size){
	if(!pstring || size == 0)return;
	RETRY_UNTIL_OK(HAL_UART_Receive(&huart2, pstring, size, TIMEOUT),10);
}

bool uartInit(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  huart2.Instance          = USART2;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <uartInit+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <uartInit+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <uartInit+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <uartInit+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <uartInit+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <uartInit+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <uartInit+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <uartInit+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <uartInit+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <uartInit+0x4c>)
 8001384:	f003 fa08 	bl	8004798 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <uartInit+0x46>
	return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <uartInit+0x48>
  }
//  char print[500];
//  uint16_t size = sizeof(print);
//  uartPrintConfigHex(&huart2,print,size);
//  uartSendString(print);
  return true;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000230 	.word	0x20000230
 800139c:	40004400 	.word	0x40004400

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fe00 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f80c 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f000 f8de 	bl	800156c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b0:	f000 f876 	bl	80014a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80013b4:	f000 f8a2 	bl	80014fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  app_setup();
 80013b8:	f000 fb96 	bl	8001ae8 <app_setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_run();
 80013bc:	f000 fbb2 	bl	8001b24 <app_run>
 80013c0:	e7fc      	b.n	80013bc <main+0x1c>
	...

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2234      	movs	r2, #52	@ 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 ffc7 	bl	8006366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <SystemClock_Config+0xd4>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <SystemClock_Config+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <SystemClock_Config+0xd8>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800142c:	2310      	movs	r3, #16
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001438:	2310      	movs	r3, #16
 800143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800143c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001440:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001442:	2304      	movs	r3, #4
 8001444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fc58 	bl	8003d08 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145e:	f000 f90b 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f002 f8f8 	bl	8003674 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800148a:	f000 f8f5 	bl	8001678 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <MX_I2C1_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_I2C1_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_I2C1_Init+0x50>)
 80014de:	f001 f8a5 	bl	800262c <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 f8c6 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000278 	.word	0x20000278
 80014f4:	40005400 	.word	0x40005400
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001502:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <MX_SPI2_Init+0x6c>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001508:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800151a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_SPI2_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_SPI2_Init+0x68>)
 800152a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800152e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001532:	2210      	movs	r2, #16
 8001534:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_SPI2_Init+0x68>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_SPI2_Init+0x68>)
 800154a:	220a      	movs	r2, #10
 800154c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_SPI2_Init+0x68>)
 8001550:	f002 fe78 	bl	8004244 <HAL_SPI_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800155a:	f000 f88d 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002cc 	.word	0x200002cc
 8001568:	40003800 	.word	0x40003800

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <MX_GPIO_Init+0xfc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <MX_GPIO_Init+0xfc>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <MX_GPIO_Init+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a30      	ldr	r2, [pc, #192]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a29      	ldr	r2, [pc, #164]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <MX_GPIO_Init+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2120      	movs	r1, #32
 80015f6:	481d      	ldr	r0, [pc, #116]	@ (800166c <MX_GPIO_Init+0x100>)
 80015f8:	f000 fffe 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001602:	481b      	ldr	r0, [pc, #108]	@ (8001670 <MX_GPIO_Init+0x104>)
 8001604:	f000 fff8 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <MX_GPIO_Init+0x108>)
 8001620:	f000 fe3e 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001624:	2320      	movs	r3, #32
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	480c      	ldr	r0, [pc, #48]	@ (800166c <MX_GPIO_Init+0x100>)
 800163c:	f000 fe30 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_GPIO_Init+0x104>)
 800165a:	f000 fe21 	bl	80022a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <app_nextSensitivityLevel>:

static AppMode_t app_mode = APP_MODE_LEVEL_CYCLE_1;


static void app_nextSensitivityLevel(bool reset)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b090      	sub	sp, #64	@ 0x40
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	if(reset){
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <app_nextSensitivityLevel+0x18>
		current_level = 0;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <app_nextSensitivityLevel+0x70>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e008      	b.n	80016ae <app_nextSensitivityLevel+0x2a>
	}else{
		current_level = (current_level + 1)
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <app_nextSensitivityLevel+0x70>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2db      	uxtb	r3, r3
				% (sizeof(acc_levels) / sizeof(acc_levels[0]));
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	b2da      	uxtb	r2, r3
		current_level = (current_level + 1)
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <app_nextSensitivityLevel+0x70>)
 80016ac:	701a      	strb	r2, [r3, #0]
	}

    level_config->acc_max_abs_val = acc_levels[current_level];
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <app_nextSensitivityLevel+0x70>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <app_nextSensitivityLevel+0x74>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4910      	ldr	r1, [pc, #64]	@ (80016fc <app_nextSensitivityLevel+0x78>)
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	440a      	add	r2, r1
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	601a      	str	r2, [r3, #0]

    // Mostrar por consola
    char buf[50];
    sprintf(buf, "Sensibilidad: ±%.2f g\r\n", acc_levels[current_level]);
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <app_nextSensitivityLevel+0x70>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <app_nextSensitivityLevel+0x78>)
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff5a 	bl	8000588 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	f107 000c 	add.w	r0, r7, #12
 80016dc:	4908      	ldr	r1, [pc, #32]	@ (8001700 <app_nextSensitivityLevel+0x7c>)
 80016de:	f004 fddd 	bl	800629c <siprintf>
    LOG(buf);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fe08 	bl	80012fc <uartSendString>
}
 80016ec:	bf00      	nop
 80016ee:	3740      	adds	r7, #64	@ 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200003c4 	.word	0x200003c4
 80016f8:	200003c0 	.word	0x200003c0
 80016fc:	080085f4 	.word	0x080085f4
 8001700:	08008518 	.word	0x08008518

08001704 <app_initLedMatrix>:

static void app_initLedMatrix() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	LOG("INIT LEDMATRIX...");
 8001708:	4810      	ldr	r0, [pc, #64]	@ (800174c <app_initLedMatrix+0x48>)
 800170a:	f7ff fdf7 	bl	80012fc <uartSendString>
	matrix_config.hspi = &hspi2;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <app_initLedMatrix+0x4c>)
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <app_initLedMatrix+0x50>)
 8001712:	601a      	str	r2, [r3, #0]
	matrix_config.CS_GPIO_PORT = CS_PIN_GPIO_Port;
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <app_initLedMatrix+0x4c>)
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <app_initLedMatrix+0x54>)
 8001718:	605a      	str	r2, [r3, #4]
	matrix_config.CS_GPIO_PIN = CS_PIN_Pin;
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <app_initLedMatrix+0x4c>)
 800171c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001720:	811a      	strh	r2, [r3, #8]
	LedMatrix_setup(&matrix_config);
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <app_initLedMatrix+0x4c>)
 8001724:	f003 fcc8 	bl	80050b8 <LedMatrix_setup>
	if (LedMatrix_Init() != LEDMATRIX_OK) {
 8001728:	f003 fcdc 	bl	80050e4 <LedMatrix_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <app_initLedMatrix+0x38>
		LOG("ERROR\r\n");
 8001732:	480a      	ldr	r0, [pc, #40]	@ (800175c <app_initLedMatrix+0x58>)
 8001734:	f7ff fde2 	bl	80012fc <uartSendString>
		Error_Handler();
 8001738:	f7ff ff9e 	bl	8001678 <Error_Handler>
	}
	LOG("OK\r\n");
 800173c:	4808      	ldr	r0, [pc, #32]	@ (8001760 <app_initLedMatrix+0x5c>)
 800173e:	f7ff fddd 	bl	80012fc <uartSendString>
	app_nextSensitivityLevel(true);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff ff9e 	bl	8001684 <app_nextSensitivityLevel>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08008534 	.word	0x08008534
 8001750:	200003b4 	.word	0x200003b4
 8001754:	200002cc 	.word	0x200002cc
 8001758:	40020400 	.word	0x40020400
 800175c:	08008548 	.word	0x08008548
 8001760:	08008550 	.word	0x08008550

08001764 <app_initAcc>:

static void app_initAcc(){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  LOG("INIT ACC...");
 8001768:	4815      	ldr	r0, [pc, #84]	@ (80017c0 <app_initAcc+0x5c>)
 800176a:	f7ff fdc7 	bl	80012fc <uartSendString>

	acc_config.port.hi2c = &hi2c1;
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <app_initAcc+0x60>)
 8001770:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <app_initAcc+0x64>)
 8001772:	601a      	str	r2, [r3, #0]
	acc_config.port.ad0_state = false;
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <app_initAcc+0x60>)
 8001776:	2200      	movs	r2, #0
 8001778:	711a      	strb	r2, [r3, #4]
	acc_config.clk_source = MPU6050_CLK_PLL_XGYRO;    // Fuente de reloj estable
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <app_initAcc+0x60>)
 800177c:	2201      	movs	r2, #1
 800177e:	721a      	strb	r2, [r3, #8]
	acc_config.sample_rate_div = 0x07;                // 1kHz / (1 + 7) = 125Hz
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <app_initAcc+0x60>)
 8001782:	2207      	movs	r2, #7
 8001784:	725a      	strb	r2, [r3, #9]
	acc_config.dlpf_cfg = MPU6050_DLPF_10HZ;          // Filtro suave
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <app_initAcc+0x60>)
 8001788:	2205      	movs	r2, #5
 800178a:	729a      	strb	r2, [r3, #10]
	acc_config.gyro_range = MPU6050_GYRO_250DPS;
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <app_initAcc+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	72da      	strb	r2, [r3, #11]
	acc_config.accel_range = MPU6050_ACCEL_2G; 		  // Mejor resolución para ±1g (inclinación)
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <app_initAcc+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	731a      	strb	r2, [r3, #12]

	if (!mpu6050_Init(&acc_config)) {
 8001798:	480a      	ldr	r0, [pc, #40]	@ (80017c4 <app_initAcc+0x60>)
 800179a:	f003 fe41 	bl	8005420 <mpu6050_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <app_initAcc+0x50>
		LOG("ERROR\r\n");
 80017aa:	4808      	ldr	r0, [pc, #32]	@ (80017cc <app_initAcc+0x68>)
 80017ac:	f7ff fda6 	bl	80012fc <uartSendString>
		Error_Handler();
 80017b0:	f7ff ff62 	bl	8001678 <Error_Handler>
	}
	LOG("OK\r\n");
 80017b4:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <app_initAcc+0x6c>)
 80017b6:	f7ff fda1 	bl	80012fc <uartSendString>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08008558 	.word	0x08008558
 80017c4:	2000039c 	.word	0x2000039c
 80017c8:	20000278 	.word	0x20000278
 80017cc:	08008548 	.word	0x08008548
 80017d0:	08008550 	.word	0x08008550

080017d4 <app_do_level>:

static void app_do_level(){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	// mapear ac a la matriz
	AccelLevel_Map(level_config, x, y, &px, &py);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <app_do_level+0x44>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <app_do_level+0x48>)
 80017de:	edd2 7a00 	vldr	s15, [r2]
 80017e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <app_do_level+0x4c>)
 80017e4:	ed92 7a00 	vldr	s14, [r2]
 80017e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <app_do_level+0x50>)
 80017ea:	490f      	ldr	r1, [pc, #60]	@ (8001828 <app_do_level+0x54>)
 80017ec:	eef0 0a47 	vmov.f32	s1, s14
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fd3f 	bl	8001278 <AccelLevel_Map>

	//imprimir en matriz
	LedMatrix_Clear();
 80017fa:	f003 fcf0 	bl	80051de <LedMatrix_Clear>
	LedMatrix_SetBlock(px, py, 1);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <app_do_level+0x54>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <app_do_level+0x50>)
 8001804:	7811      	ldrb	r1, [r2, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fd35 	bl	8005278 <LedMatrix_SetBlock>
	LedMatrix_Refresh();
 800180e:	f003 fbfd 	bl	800500c <LedMatrix_Refresh>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003c0 	.word	0x200003c0
 800181c:	2000000c 	.word	0x2000000c
 8001820:	20000010 	.word	0x20000010
 8001824:	2000038d 	.word	0x2000038d
 8001828:	2000038c 	.word	0x2000038c

0800182c <app_do_intensity>:

static void app_do_intensity(){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	AccelLevel_Map(level_config, x, y, &px, &py);
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <app_do_intensity+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <app_do_intensity+0x38>)
 8001836:	edd2 7a00 	vldr	s15, [r2]
 800183a:	4a0b      	ldr	r2, [pc, #44]	@ (8001868 <app_do_intensity+0x3c>)
 800183c:	ed92 7a00 	vldr	s14, [r2]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <app_do_intensity+0x40>)
 8001842:	490b      	ldr	r1, [pc, #44]	@ (8001870 <app_do_intensity+0x44>)
 8001844:	eef0 0a47 	vmov.f32	s1, s14
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fd13 	bl	8001278 <AccelLevel_Map>
	LedMatrix_intensity(px);
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <app_do_intensity+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fca8 	bl	80051ac <LedMatrix_intensity>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200003c0 	.word	0x200003c0
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000010 	.word	0x20000010
 800186c:	2000038d 	.word	0x2000038d
 8001870:	2000038c 	.word	0x2000038c

08001874 <app_do_custom_animation>:

static void app_do_custom_animation(){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	LedMatrix_SweepLeft_Circular();
 8001878:	f003 fd54 	bl	8005324 <LedMatrix_SweepLeft_Circular>
	LedMatrix_Refresh();
 800187c:	f003 fbc6 	bl	800500c <LedMatrix_Refresh>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <app_nextMode>:

void app_nextMode(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    app_mode = (app_mode + 1) % APP_MODE_COUNT;
 8001888:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <app_nextMode+0xc4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <app_nextMode+0xc8>)
 8001890:	fb83 3102 	smull	r3, r1, r3, r2
 8001894:	17d3      	asrs	r3, r2, #31
 8001896:	1ac9      	subs	r1, r1, r3
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1ad1      	subs	r1, r2, r3
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <app_nextMode+0xc4>)
 80018a6:	701a      	strb	r2, [r3, #0]
    LOG("Modo cambiado a: ");
 80018a8:	4829      	ldr	r0, [pc, #164]	@ (8001950 <app_nextMode+0xcc>)
 80018aa:	f7ff fd27 	bl	80012fc <uartSendString>
	switch (app_mode) {
 80018ae:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <app_nextMode+0xc4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d841      	bhi.n	800193a <app_nextMode+0xb6>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <app_nextMode+0x38>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018eb 	.word	0x080018eb
 80018c4:	080018f3 	.word	0x080018f3
 80018c8:	080018fb 	.word	0x080018fb
 80018cc:	08001903 	.word	0x08001903
 80018d0:	0800191b 	.word	0x0800191b
	case APP_MODE_LEVEL_CYCLE_1:
		level_config = &block_config;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <app_nextMode+0xd0>)
 80018d6:	4a20      	ldr	r2, [pc, #128]	@ (8001958 <app_nextMode+0xd4>)
 80018d8:	601a      	str	r2, [r3, #0]
		app_nextSensitivityLevel(true);
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fed2 	bl	8001684 <app_nextSensitivityLevel>
		delayWrite(&app_delay, FAST_DELAY);
 80018e0:	2105      	movs	r1, #5
 80018e2:	481e      	ldr	r0, [pc, #120]	@ (800195c <app_nextMode+0xd8>)
 80018e4:	f7ff fc08 	bl	80010f8 <delayWrite>
		break;
 80018e8:	e02b      	b.n	8001942 <app_nextMode+0xbe>
	case APP_MODE_LEVEL_CYCLE_2:
		app_nextSensitivityLevel(false);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff feca 	bl	8001684 <app_nextSensitivityLevel>
		break;
 80018f0:	e027      	b.n	8001942 <app_nextMode+0xbe>
	case APP_MODE_LEVEL_CYCLE_3:
		app_nextSensitivityLevel(false);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fec6 	bl	8001684 <app_nextSensitivityLevel>
		break;
 80018f8:	e023      	b.n	8001942 <app_nextMode+0xbe>
	case APP_MODE_LEVEL_CYCLE_4:
		app_nextSensitivityLevel(false);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fec2 	bl	8001684 <app_nextSensitivityLevel>
		break;
 8001900:	e01f      	b.n	8001942 <app_nextMode+0xbe>
	case APP_MODE_INTENSITY_BY_TILT:
		LOG("Brillo por inclinación\r\n");
 8001902:	4817      	ldr	r0, [pc, #92]	@ (8001960 <app_nextMode+0xdc>)
 8001904:	f7ff fcfa 	bl	80012fc <uartSendString>
		LedMatrix_LoadBitmap(BIT_MAP_FULL);
 8001908:	4816      	ldr	r0, [pc, #88]	@ (8001964 <app_nextMode+0xe0>)
 800190a:	f003 fcef 	bl	80052ec <LedMatrix_LoadBitmap>
		level_config = &map_intensity;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <app_nextMode+0xd0>)
 8001910:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <app_nextMode+0xe4>)
 8001912:	601a      	str	r2, [r3, #0]
		LedMatrix_Refresh();
 8001914:	f003 fb7a 	bl	800500c <LedMatrix_Refresh>
		break;
 8001918:	e013      	b.n	8001942 <app_nextMode+0xbe>
	case APP_MODE_CUSTOM_ANIMATION:
		LedMatrix_intensity(LED_MATRIX_MAX_INTENISITY_VALUE);
 800191a:	200f      	movs	r0, #15
 800191c:	f003 fc46 	bl	80051ac <LedMatrix_intensity>
		LedMatrix_LoadBitmap(BIT_MAP_SMILE);
 8001920:	4812      	ldr	r0, [pc, #72]	@ (800196c <app_nextMode+0xe8>)
 8001922:	f003 fce3 	bl	80052ec <LedMatrix_LoadBitmap>
		LedMatrix_Refresh();
 8001926:	f003 fb71 	bl	800500c <LedMatrix_Refresh>
		delayWrite(&app_delay, SLOW_DELAY);
 800192a:	21c8      	movs	r1, #200	@ 0xc8
 800192c:	480b      	ldr	r0, [pc, #44]	@ (800195c <app_nextMode+0xd8>)
 800192e:	f7ff fbe3 	bl	80010f8 <delayWrite>
		LOG("Animación custom\r\n")		;
 8001932:	480f      	ldr	r0, [pc, #60]	@ (8001970 <app_nextMode+0xec>)
 8001934:	f7ff fce2 	bl	80012fc <uartSendString>
		break;
 8001938:	e003      	b.n	8001942 <app_nextMode+0xbe>
	default:
		LOG("Desconocido\r\n");
 800193a:	480e      	ldr	r0, [pc, #56]	@ (8001974 <app_nextMode+0xf0>)
 800193c:	f7ff fcde 	bl	80012fc <uartSendString>
		break;
 8001940:	bf00      	nop
	}
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003c5 	.word	0x200003c5
 800194c:	2aaaaaab 	.word	0x2aaaaaab
 8001950:	08008564 	.word	0x08008564
 8001954:	200003c0 	.word	0x200003c0
 8001958:	20000018 	.word	0x20000018
 800195c:	20000390 	.word	0x20000390
 8001960:	08008578 	.word	0x08008578
 8001964:	20000004 	.word	0x20000004
 8001968:	20000024 	.word	0x20000024
 800196c:	080085ec 	.word	0x080085ec
 8001970:	08008594 	.word	0x08008594
 8001974:	080085a8 	.word	0x080085a8

08001978 <app_do>:



static void app_do() {
 8001978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800197c:	b089      	sub	sp, #36	@ 0x24
 800197e:	af08      	add	r7, sp, #32
	if (delayRead(&app_delay)) {
 8001980:	484c      	ldr	r0, [pc, #304]	@ (8001ab4 <app_do+0x13c>)
 8001982:	f7ff fb8a 	bl	800109a <delayRead>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 808e 	beq.w	8001aaa <app_do+0x132>
		if (MPU6050_ReadAccel()) {
 800198e:	f003 fe53 	bl	8005638 <MPU6050_ReadAccel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8085 	beq.w	8001aa4 <app_do+0x12c>

			// leer ac.
			if (app_mode != APP_MODE_CUSTOM_ANIMATION) {
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <app_do+0x140>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d004      	beq.n	80019ac <app_do+0x34>
				MPU6050_GetAccelG(&x, &y, &z);
 80019a2:	4a46      	ldr	r2, [pc, #280]	@ (8001abc <app_do+0x144>)
 80019a4:	4946      	ldr	r1, [pc, #280]	@ (8001ac0 <app_do+0x148>)
 80019a6:	4847      	ldr	r0, [pc, #284]	@ (8001ac4 <app_do+0x14c>)
 80019a8:	f003 fe7c 	bl	80056a4 <MPU6050_GetAccelG>
			}

			switch (app_mode) {
 80019ac:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <app_do+0x140>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d00f      	beq.n	80019d4 <app_do+0x5c>
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	dc10      	bgt.n	80019da <app_do+0x62>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	dc02      	bgt.n	80019c2 <app_do+0x4a>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da03      	bge.n	80019c8 <app_do+0x50>
 80019c0:	e00b      	b.n	80019da <app_do+0x62>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <app_do+0x56>
 80019c6:	e008      	b.n	80019da <app_do+0x62>
				case APP_MODE_LEVEL_CYCLE_1:
				case APP_MODE_LEVEL_CYCLE_2:
				case APP_MODE_LEVEL_CYCLE_3:
				case APP_MODE_LEVEL_CYCLE_4:
					app_do_level();
 80019c8:	f7ff ff04 	bl	80017d4 <app_do_level>
					break;
 80019cc:	e008      	b.n	80019e0 <app_do+0x68>

				case APP_MODE_INTENSITY_BY_TILT: {
					app_do_intensity();
 80019ce:	f7ff ff2d 	bl	800182c <app_do_intensity>
					break;
 80019d2:	e005      	b.n	80019e0 <app_do+0x68>
				}

				case APP_MODE_CUSTOM_ANIMATION: {
					app_do_custom_animation();
 80019d4:	f7ff ff4e 	bl	8001874 <app_do_custom_animation>
					break;
 80019d8:	e002      	b.n	80019e0 <app_do+0x68>
				}
				default: {
					app_nextMode();
 80019da:	f7ff ff53 	bl	8001884 <app_nextMode>
					break;
 80019de:	bf00      	nop
				}
			}

			memset(bufstr, 0, size_bufstr);
 80019e0:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <app_do+0x150>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	4838      	ldr	r0, [pc, #224]	@ (8001acc <app_do+0x154>)
 80019ea:	f004 fcbc 	bl	8006366 <memset>
			snprintf(bufstr, size_bufstr, "x: %f\ty: %f\tz: %f \t(%d,%d)\r",
 80019ee:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <app_do+0x150>)
 80019f0:	681e      	ldr	r6, [r3, #0]
					((int) (x * 100)) / 100.0, ((int) (y * 100)) / 100.0,
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <app_do+0x14c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001ad0 <app_do+0x158>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			snprintf(bufstr, size_bufstr, "x: %f\ty: %f\tz: %f \t(%d,%d)\r",
 8001a04:	ee17 0a90 	vmov	r0, s15
 8001a08:	f7fe fdac 	bl	8000564 <__aeabi_i2d>
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <app_do+0x15c>)
 8001a12:	f7fe ff3b 	bl	800088c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	461d      	mov	r5, r3
					((int) (x * 100)) / 100.0, ((int) (y * 100)) / 100.0,
 8001a1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ac0 <app_do+0x148>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001ad0 <app_do+0x158>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			snprintf(bufstr, size_bufstr, "x: %f\ty: %f\tz: %f \t(%d,%d)\r",
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fd96 	bl	8000564 <__aeabi_i2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <app_do+0x15c>)
 8001a3e:	f7fe ff25 	bl	800088c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
					((int) (z * 100)) / 100.0, px, py);
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <app_do+0x144>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001ad0 <app_do+0x158>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			snprintf(bufstr, size_bufstr, "x: %f\ty: %f\tz: %f \t(%d,%d)\r",
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd80 	bl	8000564 <__aeabi_i2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <app_do+0x15c>)
 8001a6a:	f7fe ff0f 	bl	800088c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4919      	ldr	r1, [pc, #100]	@ (8001ad8 <app_do+0x160>)
 8001a74:	7809      	ldrb	r1, [r1, #0]
 8001a76:	4608      	mov	r0, r1
 8001a78:	4918      	ldr	r1, [pc, #96]	@ (8001adc <app_do+0x164>)
 8001a7a:	7809      	ldrb	r1, [r1, #0]
 8001a7c:	9107      	str	r1, [sp, #28]
 8001a7e:	9006      	str	r0, [sp, #24]
 8001a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a84:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a88:	e9cd 4500 	strd	r4, r5, [sp]
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <app_do+0x168>)
 8001a8e:	4631      	mov	r1, r6
 8001a90:	480e      	ldr	r0, [pc, #56]	@ (8001acc <app_do+0x154>)
 8001a92:	f004 fbcd 	bl	8006230 <sniprintf>

			LOG(bufstr);
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <app_do+0x154>)
 8001a98:	f7ff fc30 	bl	80012fc <uartSendString>

			//volver a empezar delay
			delayRead(&app_delay);
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <app_do+0x13c>)
 8001a9e:	f7ff fafc 	bl	800109a <delayRead>

		}else {
			LOG("ERROR - resetting acc \r");
		}
	}
}
 8001aa2:	e002      	b.n	8001aaa <app_do+0x132>
			LOG("ERROR - resetting acc \r");
 8001aa4:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <app_do+0x16c>)
 8001aa6:	f7ff fc29 	bl	80012fc <uartSendString>
}
 8001aaa:	bf00      	nop
 8001aac:	3704      	adds	r7, #4
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ab4:	20000390 	.word	0x20000390
 8001ab8:	200003c5 	.word	0x200003c5
 8001abc:	20000014 	.word	0x20000014
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	2000000c 	.word	0x2000000c
 8001ac8:	20000388 	.word	0x20000388
 8001acc:	20000324 	.word	0x20000324
 8001ad0:	42c80000 	.word	0x42c80000
 8001ad4:	40590000 	.word	0x40590000
 8001ad8:	2000038c 	.word	0x2000038c
 8001adc:	2000038d 	.word	0x2000038d
 8001ae0:	080085b8 	.word	0x080085b8
 8001ae4:	080085d4 	.word	0x080085d4

08001ae8 <app_setup>:


void app_setup(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    size_bufstr = sizeof(bufstr);
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <app_setup+0x2c>)
 8001aee:	2264      	movs	r2, #100	@ 0x64
 8001af0:	601a      	str	r2, [r3, #0]
	level_config = &block_config;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <app_setup+0x30>)
 8001af4:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <app_setup+0x34>)
 8001af6:	601a      	str	r2, [r3, #0]
	uartInit();
 8001af8:	f7ff fc28 	bl	800134c <uartInit>
	app_initLedMatrix();
 8001afc:	f7ff fe02 	bl	8001704 <app_initLedMatrix>
	app_initAcc();
 8001b00:	f7ff fe30 	bl	8001764 <app_initAcc>
	debounceFSM_init();
 8001b04:	f7ff fa30 	bl	8000f68 <debounceFSM_init>
	delayInit(&app_delay, FAST_DELAY);
 8001b08:	2105      	movs	r1, #5
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <app_setup+0x38>)
 8001b0c:	f7ff faaa 	bl	8001064 <delayInit>

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000388 	.word	0x20000388
 8001b18:	200003c0 	.word	0x200003c0
 8001b1c:	20000018 	.word	0x20000018
 8001b20:	20000390 	.word	0x20000390

08001b24 <app_run>:

void app_run(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	app_do();
 8001b28:	f7ff ff26 	bl	8001978 <app_do>
	debounceFSM_update();
 8001b2c:	f7ff fa2c 	bl	8000f88 <debounceFSM_update>
	if (readKey() == KEY_FALLING_EDGE_DETECTED) {
 8001b30:	f7ff f9f0 	bl	8000f14 <readKey>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <app_run+0x1a>
		app_nextMode();
 8001b3a:	f7ff fea3 	bl	8001884 <app_nextMode>
	}

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f000 fb58 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12c      	bne.n	8001c10 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bf0:	f000 fb56 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_SPI_MspInit+0x84>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12c      	bne.n	8001ca0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <HAL_SPI_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001c7e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c90:	2305      	movs	r3, #5
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <HAL_SPI_MspInit+0x8c>)
 8001c9c:	f000 fb00 	bl	80022a0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40003800 	.word	0x40003800
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <HAL_UART_MspInit+0x84>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12b      	bne.n	8001d2e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_UART_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d0e:	230c      	movs	r3, #12
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <HAL_UART_MspInit+0x8c>)
 8001d2a:	f000 fab9 	bl	80022a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	@ 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40004400 	.word	0x40004400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f957 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_kill>:

int _kill(int pid, int sig)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dbc:	f004 fb26 	bl	800640c <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2216      	movs	r2, #22
 8001dc4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_exit>:

void _exit (int status)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dda:	f04f 31ff 	mov.w	r1, #4294967295
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffe7 	bl	8001db2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <_exit+0x12>

08001de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
  }

  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
  }
  return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f004 fa8a 	bl	800640c <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200003c8 	.word	0x200003c8
 8001f2c:	20000560 	.word	0x20000560

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f58:	f7ff ffea 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f004 fa49 	bl	8006418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7ff fa0b 	bl	80013a0 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001f98:	080089a4 	.word	0x080089a4
  ldr r2, =_sbss
 8001f9c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001fa0:	2000055c 	.word	0x2000055c

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	@ (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f931 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fdb2 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f93b 	bl	8002286 <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f911 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000030 	.word	0x20000030
 8002044:	20000038 	.word	0x20000038
 8002048:	20000034 	.word	0x20000034

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000038 	.word	0x20000038
 8002070:	200003cc 	.word	0x200003cc

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200003cc 	.word	0x200003cc

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000038 	.word	0x20000038

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff47 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff5c 	bl	800211c <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffb0 	bl	80021f4 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e165      	b.n	8002588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8154 	bne.w	8002582 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ae 	beq.w	8002582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b5d      	ldr	r3, [pc, #372]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a5c      	ldr	r2, [pc, #368]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b5a      	ldr	r3, [pc, #360]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a58      	ldr	r2, [pc, #352]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4f      	ldr	r2, [pc, #316]	@ (80025a8 <HAL_GPIO_Init+0x308>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d025      	beq.n	80024ba <HAL_GPIO_Init+0x21a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4e      	ldr	r2, [pc, #312]	@ (80025ac <HAL_GPIO_Init+0x30c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01f      	beq.n	80024b6 <HAL_GPIO_Init+0x216>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4d      	ldr	r2, [pc, #308]	@ (80025b0 <HAL_GPIO_Init+0x310>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_Init+0x212>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4c      	ldr	r2, [pc, #304]	@ (80025b4 <HAL_GPIO_Init+0x314>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4b      	ldr	r2, [pc, #300]	@ (80025b8 <HAL_GPIO_Init+0x318>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x20a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4a      	ldr	r2, [pc, #296]	@ (80025bc <HAL_GPIO_Init+0x31c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x206>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a49      	ldr	r2, [pc, #292]	@ (80025c0 <HAL_GPIO_Init+0x320>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x202>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00c      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e00a      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x21c>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a31      	ldr	r2, [pc, #196]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002558:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257c:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f ae96 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	@ 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	40020800 	.word	0x40020800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40021400 	.word	0x40021400
 80025c0:	40021800 	.word	0x40021800
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e12b      	b.n	8002896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fa9e 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	@ 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800267e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800268e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002690:	f001 f8e2 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a81      	ldr	r2, [pc, #516]	@ (80028a0 <HAL_I2C_Init+0x274>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d807      	bhi.n	80026b0 <HAL_I2C_Init+0x84>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a80      	ldr	r2, [pc, #512]	@ (80028a4 <HAL_I2C_Init+0x278>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e006      	b.n	80026be <HAL_I2C_Init+0x92>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a7d      	ldr	r2, [pc, #500]	@ (80028a8 <HAL_I2C_Init+0x27c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e7      	b.n	8002896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a78      	ldr	r2, [pc, #480]	@ (80028ac <HAL_I2C_Init+0x280>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a6a      	ldr	r2, [pc, #424]	@ (80028a0 <HAL_I2C_Init+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d802      	bhi.n	8002700 <HAL_I2C_Init+0xd4>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e009      	b.n	8002714 <HAL_I2C_Init+0xe8>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a69      	ldr	r2, [pc, #420]	@ (80028b0 <HAL_I2C_Init+0x284>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002726:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	495c      	ldr	r1, [pc, #368]	@ (80028a0 <HAL_I2C_Init+0x274>)
 8002730:	428b      	cmp	r3, r1
 8002732:	d819      	bhi.n	8002768 <HAL_I2C_Init+0x13c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e59      	subs	r1, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002742:	1c59      	adds	r1, r3, #1
 8002744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002748:	400b      	ands	r3, r1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_I2C_Init+0x138>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e59      	subs	r1, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb1 f3f3 	udiv	r3, r1, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	e051      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002764:	2304      	movs	r3, #4
 8002766:	e04f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <HAL_I2C_Init+0x168>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e012      	b.n	80027ba <HAL_I2C_Init+0x18e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	0099      	lsls	r1, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x196>
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_I2C_Init+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e58      	subs	r0, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Init+0x1dc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6809      	ldr	r1, [r1, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ce:	f7ff fbd1 	bl	8002074 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b20      	cmp	r3, #32
 80028de:	f040 80d9 	bne.w	8002a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2319      	movs	r3, #25
 80028e8:	2201      	movs	r2, #1
 80028ea:	496d      	ldr	r1, [pc, #436]	@ (8002aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fc8b 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0cc      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_I2C_Mem_Write+0x56>
 8002906:	2302      	movs	r3, #2
 8002908:	e0c5      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d007      	beq.n	8002930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2221      	movs	r2, #33	@ 0x21
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002972:	88f8      	ldrh	r0, [r7, #6]
 8002974:	893a      	ldrh	r2, [r7, #8]
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4603      	mov	r3, r0
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fac2 	bl	8002f0c <I2C_RequestMemoryWrite>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d052      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e081      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fd50 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11b      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x180>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d017      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1aa      	bne.n	8002992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fd43 	bl	80034cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d107      	bne.n	8002a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e016      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00100002 	.word	0x00100002
 8002aa4:	ffff0000 	.word	0xffff0000

08002aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	@ 0x30
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	460b      	mov	r3, r1
 8002abc:	813b      	strh	r3, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac2:	f7ff fad7 	bl	8002074 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	f040 8214 	bne.w	8002efe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2319      	movs	r3, #25
 8002adc:	2201      	movs	r2, #1
 8002ade:	497b      	ldr	r1, [pc, #492]	@ (8002ccc <HAL_I2C_Mem_Read+0x224>)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fb91 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	e207      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Mem_Read+0x56>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e200      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d007      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2222      	movs	r2, #34	@ 0x22
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2240      	movs	r2, #64	@ 0x40
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd0 <HAL_I2C_Mem_Read+0x228>)
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b66:	88f8      	ldrh	r0, [r7, #6]
 8002b68:	893a      	ldrh	r2, [r7, #8]
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4603      	mov	r3, r0
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa5e 	bl	8003038 <I2C_RequestMemoryRead>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1bc      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e190      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d11b      	bne.n	8002bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e170      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d11b      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	e150      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c4c:	e144      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	f200 80f1 	bhi.w	8002e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d123      	bne.n	8002ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fc79 	bl	800355c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e145      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ca6:	e117      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d14e      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4906      	ldr	r1, [pc, #24]	@ (8002cd4 <HAL_I2C_Mem_Read+0x22c>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 faa4 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e11a      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
 8002cca:	bf00      	nop
 8002ccc:	00100002 	.word	0x00100002
 8002cd0:	ffff0000 	.word	0xffff0000
 8002cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d4c:	e0c4      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d54:	2200      	movs	r2, #0
 8002d56:	496c      	ldr	r1, [pc, #432]	@ (8002f08 <HAL_I2C_Mem_Read+0x460>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa55 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0cb      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	2200      	movs	r2, #0
 8002db2:	4955      	ldr	r1, [pc, #340]	@ (8002f08 <HAL_I2C_Mem_Read+0x460>)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fa27 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e09d      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e38:	e04e      	b.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fb8c 	bl	800355c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e058      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d124      	bne.n	8002ed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d107      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f aeb6 	bne.w	8002c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	@ 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00010004 	.word	0x00010004

08002f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f960 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f5c:	d103      	bne.n	8002f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e05f      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	492d      	ldr	r1, [pc, #180]	@ (8003034 <I2C_RequestMemoryWrite+0x128>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f9bb 	bl	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04c      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa46 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02b      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e021      	b.n	8003028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe4:	893b      	ldrh	r3, [r7, #8]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa20 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b04      	cmp	r3, #4
 8003008:	d107      	bne.n	800301a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e005      	b.n	800302a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800301e:	893b      	ldrh	r3, [r7, #8]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00010002 	.word	0x00010002

08003038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	817b      	strh	r3, [r7, #10]
 800304a:	460b      	mov	r3, r1
 800304c:	813b      	strh	r3, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2200      	movs	r2, #0
 800307a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8c2 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003098:	d103      	bne.n	80030a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0aa      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	4952      	ldr	r1, [pc, #328]	@ (8003204 <I2C_RequestMemoryRead+0x1cc>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f91d 	bl	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e097      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f9a8 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e076      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e021      	b.n	8003164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003120:	893b      	ldrh	r3, [r7, #8]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	b29b      	uxth	r3, r3
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f982 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e050      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315a:	893b      	ldrh	r3, [r7, #8]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003166:	6a39      	ldr	r1, [r7, #32]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f967 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2b04      	cmp	r3, #4
 800317a:	d107      	bne.n	800318c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e035      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f82b 	bl	8003208 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c6:	d103      	bne.n	80031d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e013      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031d4:	897b      	ldrh	r3, [r7, #10]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	4906      	ldr	r1, [pc, #24]	@ (8003204 <I2C_RequestMemoryRead+0x1cc>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f886 	bl	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010002 	.word	0x00010002

08003208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003218:	e048      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d044      	beq.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe ff27 	bl	8002074 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d139      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10d      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	e00c      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x70>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	429a      	cmp	r2, r3
 800327c:	d116      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e023      	b.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10d      	bne.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	e00c      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	43da      	mvns	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d093      	beq.n	800321a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330a:	e071      	b.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d123      	bne.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e067      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d041      	beq.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fe82 	bl	8002074 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d136      	bne.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10c      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e00b      	b.n	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e021      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10c      	bne.n	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e00b      	b.n	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f af6d 	bne.w	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8e3 	bl	8003616 <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d028      	beq.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fe07 	bl	8002074 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d016      	beq.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034be:	2b80      	cmp	r3, #128	@ 0x80
 80034c0:	d1c3      	bne.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d8:	e034      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f89b 	bl	8003616 <I2C_IsAcknowledgeFailed>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e034      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d028      	beq.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fe fdbf 	bl	8002074 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11d      	bne.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d016      	beq.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d1c3      	bne.n	80034da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003568:	e049      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d119      	bne.n	80035ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e030      	b.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7fe fd62 	bl	8002074 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11d      	bne.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d016      	beq.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e007      	b.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b40      	cmp	r3, #64	@ 0x40
 800360a:	d1ae      	bne.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362c:	d11b      	bne.n	8003666 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003636:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0cc      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b68      	ldr	r3, [pc, #416]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d90c      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b65      	ldr	r3, [pc, #404]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b8      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c8:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a58      	ldr	r2, [pc, #352]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a52      	ldr	r2, [pc, #328]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b50      	ldr	r3, [pc, #320]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	494d      	ldr	r1, [pc, #308]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d044      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d119      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d003      	beq.n	8003732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	2b03      	cmp	r3, #3
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b3f      	ldr	r3, [pc, #252]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e067      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b37      	ldr	r3, [pc, #220]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4934      	ldr	r1, [pc, #208]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fe fc86 	bl	8002074 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fe fc82 	bl	8002074 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e04f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d20c      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b22      	ldr	r3, [pc, #136]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4916      	ldr	r1, [pc, #88]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e6:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	490e      	ldr	r1, [pc, #56]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fa:	f000 f855 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	490a      	ldr	r1, [pc, #40]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fbe6 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023c00 	.word	0x40023c00
 8003830:	40023800 	.word	0x40023800
 8003834:	08008604 	.word	0x08008604
 8003838:	20000030 	.word	0x20000030
 800383c:	20000034 	.word	0x20000034

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000030 	.word	0x20000030

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	@ (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08008614 	.word	0x08008614

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	@ (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08008614 	.word	0x08008614

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b0ae      	sub	sp, #184	@ 0xb8
 80038ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ce:	4bcb      	ldr	r3, [pc, #812]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	f200 8206 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003ce9 	.word	0x08003ce9
 80038ec:	08003ce9 	.word	0x08003ce9
 80038f0:	08003ce9 	.word	0x08003ce9
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003ce9 	.word	0x08003ce9
 80038fc:	08003ce9 	.word	0x08003ce9
 8003900:	08003ce9 	.word	0x08003ce9
 8003904:	08003929 	.word	0x08003929
 8003908:	08003ce9 	.word	0x08003ce9
 800390c:	08003ce9 	.word	0x08003ce9
 8003910:	08003ce9 	.word	0x08003ce9
 8003914:	08003b19 	.word	0x08003b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4bb9      	ldr	r3, [pc, #740]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800391a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800391e:	e1e7      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003920:	4bb8      	ldr	r3, [pc, #736]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003926:	e1e3      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4bb4      	ldr	r3, [pc, #720]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003934:	4bb1      	ldr	r3, [pc, #708]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d071      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003940:	4bae      	ldr	r3, [pc, #696]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	f04f 0000 	mov.w	r0, #0
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003978:	0150      	lsls	r0, r2, #5
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4621      	mov	r1, r4
 8003980:	1a51      	subs	r1, r2, r1
 8003982:	6439      	str	r1, [r7, #64]	@ 0x40
 8003984:	4629      	mov	r1, r5
 8003986:	eb63 0301 	sbc.w	r3, r3, r1
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003998:	4649      	mov	r1, r9
 800399a:	018b      	lsls	r3, r1, #6
 800399c:	4641      	mov	r1, r8
 800399e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a2:	4641      	mov	r1, r8
 80039a4:	018a      	lsls	r2, r1, #6
 80039a6:	4641      	mov	r1, r8
 80039a8:	1a51      	subs	r1, r2, r1
 80039aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039ac:	4649      	mov	r1, r9
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039c0:	4649      	mov	r1, r9
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4641      	mov	r1, r8
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4622      	mov	r2, r4
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039da:	462b      	mov	r3, r5
 80039dc:	460a      	mov	r2, r1
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039f0:	4629      	mov	r1, r5
 80039f2:	024b      	lsls	r3, r1, #9
 80039f4:	4621      	mov	r1, r4
 80039f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fa:	4621      	mov	r1, r4
 80039fc:	024a      	lsls	r2, r1, #9
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a14:	f7fd f8e8 	bl	8000be8 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a22:	e067      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3e:	2300      	movs	r3, #0
 8003a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	0159      	lsls	r1, r3, #5
 8003a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a58:	0150      	lsls	r0, r2, #5
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4621      	mov	r1, r4
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a78:	4649      	mov	r1, r9
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a82:	4641      	mov	r1, r8
 8003a84:	018a      	lsls	r2, r1, #6
 8003a86:	4641      	mov	r1, r8
 8003a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	4692      	mov	sl, r2
 8003aa8:	469b      	mov	fp, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003adc:	2200      	movs	r2, #0
 8003ade:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ae6:	f7fd f87f 	bl	8000be8 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003af4:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b16:	e0eb      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b38      	ldr	r3, [pc, #224]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d06b      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b44:	2300      	movs	r3, #0
 8003b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	462b      	mov	r3, r5
 8003b50:	f04f 0000 	mov.w	r0, #0
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	0159      	lsls	r1, r3, #5
 8003b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5e:	0150      	lsls	r0, r2, #5
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4621      	mov	r1, r4
 8003b66:	1a51      	subs	r1, r2, r1
 8003b68:	61b9      	str	r1, [r7, #24]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b7e:	4659      	mov	r1, fp
 8003b80:	018b      	lsls	r3, r1, #6
 8003b82:	4651      	mov	r1, sl
 8003b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b88:	4651      	mov	r1, sl
 8003b8a:	018a      	lsls	r2, r1, #6
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b92:	4659      	mov	r1, fp
 8003b94:	eb63 0901 	sbc.w	r9, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bac:	4690      	mov	r8, r2
 8003bae:	4699      	mov	r9, r3
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	eb18 0303 	adds.w	r3, r8, r3
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	462b      	mov	r3, r5
 8003bba:	eb49 0303 	adc.w	r3, r9, r3
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bcc:	4629      	mov	r1, r5
 8003bce:	024b      	lsls	r3, r1, #9
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	024a      	lsls	r2, r1, #9
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003be2:	2200      	movs	r2, #0
 8003be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bec:	f7fc fffc 	bl	8000be8 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bfa:	e065      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4b3d      	ldr	r3, [pc, #244]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	4611      	mov	r1, r2
 8003c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c22:	4642      	mov	r2, r8
 8003c24:	464b      	mov	r3, r9
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	4649      	mov	r1, r9
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	1a54      	subs	r4, r2, r1
 8003c66:	4659      	mov	r1, fp
 8003c68:	eb63 0501 	sbc.w	r5, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cba:	f7fc ff95 	bl	8000be8 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0f1b      	lsrs	r3, r3, #28
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	37b8      	adds	r7, #184	@ 0xb8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400

08003d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e28d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8083 	beq.w	8003e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d28:	4b94      	ldr	r3, [pc, #592]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d019      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d34:	4b91      	ldr	r3, [pc, #580]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d40:	4b8e      	ldr	r3, [pc, #568]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b84      	ldr	r3, [pc, #528]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x124>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e25a      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x90>
 8003d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xb4>
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a72      	ldr	r2, [pc, #456]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xcc>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f94a 	bl	8002074 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe f946 	bl	8002074 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e21f      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xdc>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f936 	bl	8002074 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe f932 	bl	8002074 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e20b      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b57      	ldr	r3, [pc, #348]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x104>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d06f      	beq.n	8003f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e3a:	4b50      	ldr	r3, [pc, #320]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e46:	4b4d      	ldr	r3, [pc, #308]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d105      	bne.n	8003e5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b41      	ldr	r3, [pc, #260]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1d3      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4937      	ldr	r1, [pc, #220]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f8df 	bl	8002074 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fe f8db 	bl	8002074 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1b4      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4925      	ldr	r1, [pc, #148]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f8be 	bl	8002074 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fe f8ba 	bl	8002074 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e193      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe f89e 	bl	8002074 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fe f89a 	bl	8002074 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e173      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <HAL_RCC_OscConfig+0x274>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x234>
 8003f5a:	e01b      	b.n	8003f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe f887 	bl	8002074 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fe f883 	bl	8002074 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d907      	bls.n	8003f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e15c      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470000 	.word	0x42470000
 8003f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b8a      	ldr	r3, [pc, #552]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8097 	beq.w	80040d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b83      	ldr	r3, [pc, #524]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fe f843 	bl	8002074 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fe f83f 	bl	8002074 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e118      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b6c      	ldr	r3, [pc, #432]	@ (80041b8 <HAL_RCC_OscConfig+0x4b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x31e>
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a65      	ldr	r2, [pc, #404]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x340>
 800402e:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a60      	ldr	r2, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70
 800403a:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	@ 0x70
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0x358>
 8004048:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a59      	ldr	r2, [pc, #356]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
 8004054:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe f804 	bl	8002074 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fe f800 	bl	8002074 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0d7      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x368>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd ffee 	bl	8002074 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd ffea 	bl	8002074 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0c1      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	4b40      	ldr	r3, [pc, #256]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80ad 	beq.w	8004234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040da:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d060      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d145      	bne.n	800417a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd ffbe 	bl	8002074 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd ffba 	bl	8002074 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e093      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	491b      	ldr	r1, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd ff8f 	bl	8002074 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fd ff8b 	bl	8002074 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e064      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x452>
 8004178:	e05c      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x4b4>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd ff78 	bl	8002074 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd ff74 	bl	8002074 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04d      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x480>
 80041a6:	e045      	b.n	8004234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e040      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <HAL_RCC_OscConfig+0x538>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d129      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d122      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d119      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d10f      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07b      	b.n	800434e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004266:	d009      	beq.n	800427c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
 800426e:	e005      	b.n	800427c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fcc4 	bl	8001c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	ea42 0103 	orr.w	r1, r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0104 	and.w	r1, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	f003 0210 	and.w	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800433c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004366:	f7fd fe85 	bl	8002074 <HAL_GetTick>
 800436a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
 800437e:	e12a      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_SPI_Transmit+0x36>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e122      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_SPI_Transmit+0x48>
 800439a:	2302      	movs	r3, #2
 800439c:	e11b      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ec:	d10f      	bne.n	800440e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800440c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	d007      	beq.n	800442c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004434:	d152      	bne.n	80044dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_SPI_Transmit+0xee>
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d145      	bne.n	80044d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004468:	e032      	b.n	80044d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d112      	bne.n	800449e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800449c:	e018      	b.n	80044d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449e:	f7fd fde9 	bl	8002074 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d803      	bhi.n	80044b6 <HAL_SPI_Transmit+0x160>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d102      	bne.n	80044bc <HAL_SPI_Transmit+0x166>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e082      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1c7      	bne.n	800446a <HAL_SPI_Transmit+0x114>
 80044da:	e053      	b.n	8004584 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_Transmit+0x194>
 80044e4:	8b7b      	ldrh	r3, [r7, #26]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d147      	bne.n	800457a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	7812      	ldrb	r2, [r2, #0]
 80044f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004510:	e033      	b.n	800457a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d113      	bne.n	8004548 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004546:	e018      	b.n	800457a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004548:	f7fd fd94 	bl	8002074 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d803      	bhi.n	8004560 <HAL_SPI_Transmit+0x20a>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <HAL_SPI_Transmit+0x210>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e02d      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1c6      	bne.n	8004512 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	6839      	ldr	r1, [r7, #0]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f8b1 	bl	80046f0 <SPI_EndRxTxTransaction>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fd fd40 	bl	8002074 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fd fd38 	bl	8002074 <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fd fd28 	bl	8002074 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000030 	.word	0x20000030

080046f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2201      	movs	r2, #1
 8004704:	2102      	movs	r1, #2
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff6a 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e032      	b.n	8004788 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <SPI_EndRxTxTransaction+0xa0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <SPI_EndRxTxTransaction+0xa4>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0d5b      	lsrs	r3, r3, #21
 800472e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004740:	d112      	bne.n	8004768 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	2180      	movs	r1, #128	@ 0x80
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff47 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d016      	beq.n	8004786 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e00f      	b.n	8004788 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	3b01      	subs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b80      	cmp	r3, #128	@ 0x80
 8004780:	d0f2      	beq.n	8004768 <SPI_EndRxTxTransaction+0x78>
 8004782:	e000      	b.n	8004786 <SPI_EndRxTxTransaction+0x96>
        break;
 8004784:	bf00      	nop
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000030 	.word	0x20000030
 8004794:	165e9f81 	.word	0x165e9f81

08004798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e042      	b.n	8004830 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd fa78 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	@ 0x24
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f973 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	@ 0x28
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b20      	cmp	r3, #32
 8004856:	d175      	bne.n	8004944 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_UART_Transmit+0x2c>
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e06e      	b.n	8004946 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2221      	movs	r2, #33	@ 0x21
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004876:	f7fd fbfd 	bl	8002074 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004890:	d108      	bne.n	80048a4 <HAL_UART_Transmit+0x6c>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e003      	b.n	80048ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048ac:	e02e      	b.n	800490c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2180      	movs	r1, #128	@ 0x80
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f848 	bl	800494e <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e03a      	b.n	8004946 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3302      	adds	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e007      	b.n	80048fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1cb      	bne.n	80048ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2140      	movs	r1, #64	@ 0x40
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f814 	bl	800494e <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e006      	b.n	8004946 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495e:	e03b      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d037      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fd fb84 	bl	8002074 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <UART_WaitOnFlagUntilTimeout+0x30>
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e03a      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d023      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b80      	cmp	r3, #128	@ 0x80
 8004994:	d020      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d01d      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d116      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f81d 	bl	8004a00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e00f      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d0b4      	beq.n	8004960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b095      	sub	sp, #84	@ 0x54
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a28:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d119      	bne.n	8004aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a98:	61ba      	str	r2, [r7, #24]
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	@ 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b0c0      	sub	sp, #256	@ 0x100
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	ea40 0301 	orr.w	r3, r0, r1
 8004af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b20:	f021 010c 	bic.w	r1, r1, #12
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	6999      	ldr	r1, [r3, #24]
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	ea40 0301 	orr.w	r3, r0, r1
 8004b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8f      	ldr	r3, [pc, #572]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <UART_SetConfig+0xa0>
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8d      	ldr	r3, [pc, #564]	@ (8004d98 <UART_SetConfig+0x2d0>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d104      	bne.n	8004b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fe fe8a 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b70:	e003      	b.n	8004b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7fe fe71 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004b76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b84:	f040 810c 	bne.w	8004da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	1891      	adds	r1, r2, r2
 8004ba0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ba2:	415b      	adcs	r3, r3
 8004ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004baa:	4621      	mov	r1, r4
 8004bac:	eb12 0801 	adds.w	r8, r2, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0901 	adc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb49 0303 	adc.w	r3, r9, r3
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	18db      	adds	r3, r3, r3
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c0c:	f7fb ffec 	bl	8000be8 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c40:	4641      	mov	r1, r8
 8004c42:	eb12 0a01 	adds.w	sl, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	4692      	mov	sl, r2
 8004c62:	469b      	mov	fp, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ca2:	f7fb ffa1 	bl	8000be8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cd0:	441c      	add	r4, r3
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cec:	415b      	adcs	r3, r3
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d5e:	f7fb ff43 	bl	8000be8 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	@ 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3332      	adds	r3, #50	@ 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d90:	e106      	b.n	8004fa0 <UART_SetConfig+0x4d8>
 8004d92:	bf00      	nop
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004daa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	6239      	str	r1, [r7, #32]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0501 	adc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004de8:	464b      	mov	r3, r9
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e0e:	4629      	mov	r1, r5
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4621      	mov	r1, r4
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e20:	f7fb fee2 	bl	8000be8 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b60      	ldr	r3, [pc, #384]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6139      	str	r1, [r7, #16]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004eac:	4649      	mov	r1, r9
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	008a      	lsls	r2, r1, #2
 8004eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ebe:	f7fb fe93 	bl	8000be8 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4b38      	ldr	r3, [pc, #224]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2301 	umull	r2, r3, r3, r1
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2264      	movs	r2, #100	@ 0x64
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	1acb      	subs	r3, r1, r3
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	@ 0x32
 8004edc:	4a33      	ldr	r2, [pc, #204]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee8:	441c      	add	r4, r3
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	eb42 0303 	adc.w	r3, r2, r3
 8004f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	008b      	lsls	r3, r1, #2
 8004f60:	4641      	mov	r1, r8
 8004f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f66:	4641      	mov	r1, r8
 8004f68:	008a      	lsls	r2, r1, #2
 8004f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f6e:	f7fb fe3b 	bl	8000be8 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	@ 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	@ 0x32
 8004f8a:	4a08      	ldr	r2, [pc, #32]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 020f 	and.w	r2, r3, #15
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4422      	add	r2, r4
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <LedMatrix_WriteRow>:

static uint8_t max7219_buffer[8] = {0};  // Cada byte representa una fila (DIG1–DIG8)
static uint8_t update_flags = 0;         // Bit i = 1 → fila i necesita actualización

static void LedMatrix_WriteRow(uint8_t row, uint8_t value)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460a      	mov	r2, r1
 8004fba:	71fb      	strb	r3, [r7, #7]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	71bb      	strb	r3, [r7, #6]
    if (row >= 8) return;
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d817      	bhi.n	8004ff6 <LedMatrix_WriteRow+0x46>
    if (max7219_buffer[row] != value) {
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005004 <LedMatrix_WriteRow+0x54>)
 8004fca:	5cd3      	ldrb	r3, [r2, r3]
 8004fcc:	79ba      	ldrb	r2, [r7, #6]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d012      	beq.n	8004ff8 <LedMatrix_WriteRow+0x48>
        max7219_buffer[row] = value;
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	490b      	ldr	r1, [pc, #44]	@ (8005004 <LedMatrix_WriteRow+0x54>)
 8004fd6:	79ba      	ldrb	r2, [r7, #6]
 8004fd8:	54ca      	strb	r2, [r1, r3]
        update_flags |= (1 << row);
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <LedMatrix_WriteRow+0x58>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	4313      	orrs	r3, r2
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <LedMatrix_WriteRow+0x58>)
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e000      	b.n	8004ff8 <LedMatrix_WriteRow+0x48>
    if (row >= 8) return;
 8004ff6:	bf00      	nop
    }
}
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	200003d0 	.word	0x200003d0
 8005008:	200003d8 	.word	0x200003d8

0800500c <LedMatrix_Refresh>:

LedMatrix_err_t LedMatrix_Refresh(void){
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
    bool ret = true;
 8005012:	2301      	movs	r3, #1
 8005014:	71fb      	strb	r3, [r7, #7]
    for (uint8_t row = 0; update_flags; row++){
 8005016:	2300      	movs	r3, #0
 8005018:	71bb      	strb	r3, [r7, #6]
 800501a:	e02e      	b.n	800507a <LedMatrix_Refresh+0x6e>
        if (update_flags & (1 << row)){
 800501c:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <LedMatrix_Refresh+0x8c>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	79bb      	ldrb	r3, [r7, #6]
 8005024:	fa42 f303 	asr.w	r3, r2, r3
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d021      	beq.n	8005074 <LedMatrix_Refresh+0x68>
            ret &= MAX7219_Write(row + 1, max7219_buffer[row]);
 8005030:	79bb      	ldrb	r3, [r7, #6]
 8005032:	3301      	adds	r3, #1
 8005034:	b2da      	uxtb	r2, r3
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	4918      	ldr	r1, [pc, #96]	@ (800509c <LedMatrix_Refresh+0x90>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 f9b2 	bl	80053a8 <MAX7219_Write>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	71fb      	strb	r3, [r7, #7]
            update_flags &= ~(1 << row);
 8005056:	79bb      	ldrb	r3, [r7, #6]
 8005058:	2201      	movs	r2, #1
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	b25b      	sxtb	r3, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	b25a      	sxtb	r2, r3
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <LedMatrix_Refresh+0x8c>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b25b      	sxtb	r3, r3
 800506a:	4013      	ands	r3, r2
 800506c:	b25b      	sxtb	r3, r3
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <LedMatrix_Refresh+0x8c>)
 8005072:	701a      	strb	r2, [r3, #0]
    for (uint8_t row = 0; update_flags; row++){
 8005074:	79bb      	ldrb	r3, [r7, #6]
 8005076:	3301      	adds	r3, #1
 8005078:	71bb      	strb	r3, [r7, #6]
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <LedMatrix_Refresh+0x8c>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1cc      	bne.n	800501c <LedMatrix_Refresh+0x10>
        }
    }
    return ret ? LEDMATRIX_OK : LEDMATRIX_ERROR;
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <LedMatrix_Refresh+0x80>
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <LedMatrix_Refresh+0x82>
 800508c:	2302      	movs	r3, #2
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200003d8 	.word	0x200003d8
 800509c:	200003d0 	.word	0x200003d0

080050a0 <LedMatrix_ForceRefresh>:

LedMatrix_err_t LedMatrix_ForceRefresh(void){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
    update_flags = 0xFF;  // Marcar todas las filas a cambiar
 80050a4:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <LedMatrix_ForceRefresh+0x14>)
 80050a6:	22ff      	movs	r2, #255	@ 0xff
 80050a8:	701a      	strb	r2, [r3, #0]
    return LedMatrix_Refresh();
 80050aa:	f7ff ffaf 	bl	800500c <LedMatrix_Refresh>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200003d8 	.word	0x200003d8

080050b8 <LedMatrix_setup>:

LedMatrix_err_t LedMatrix_setup(max7219_config_t* config){
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    if (!config) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <LedMatrix_setup+0x12>
        return LEDMATRIX_INVALID_ARG;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e008      	b.n	80050dc <LedMatrix_setup+0x24>
    }
    return MAX7219_setup(config) ? LEDMATRIX_OK : LEDMATRIX_ERROR;
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f956 	bl	800537c <MAX7219_setup>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <LedMatrix_setup+0x22>
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <LedMatrix_setup+0x24>
 80050da:	2302      	movs	r3, #2
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <LedMatrix_Init>:

LedMatrix_err_t LedMatrix_Init(void) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80050ea:	2301      	movs	r3, #1
 80050ec:	71fb      	strb	r3, [r7, #7]
	ret &= MAX7219_Write(0x0F, 0x00); // Display test: off
 80050ee:	2100      	movs	r1, #0
 80050f0:	200f      	movs	r0, #15
 80050f2:	f000 f959 	bl	80053a8 <MAX7219_Write>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf14      	ite	ne
 8005102:	2301      	movne	r3, #1
 8005104:	2300      	moveq	r3, #0
 8005106:	71fb      	strb	r3, [r7, #7]
	ret &= MAX7219_Write(0x0C, 0x01); // Shutdown: normal operation
 8005108:	2101      	movs	r1, #1
 800510a:	200c      	movs	r0, #12
 800510c:	f000 f94c 	bl	80053a8 <MAX7219_Write>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	71fb      	strb	r3, [r7, #7]
	ret &= MAX7219_Write(0x0B, 0x07); // Scan limit: digits 0–7
 8005122:	2107      	movs	r1, #7
 8005124:	200b      	movs	r0, #11
 8005126:	f000 f93f 	bl	80053a8 <MAX7219_Write>
 800512a:	4603      	mov	r3, r0
 800512c:	461a      	mov	r2, r3
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	71fb      	strb	r3, [r7, #7]
	ret &= LedMatrix_intensity(LED_MATRIX_MAX_INTENISITY_VALUE) == LEDMATRIX_OK;
 800513c:	200f      	movs	r0, #15
 800513e:	f000 f835 	bl	80051ac <LedMatrix_intensity>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	71fb      	strb	r3, [r7, #7]
	ret &= MAX7219_Write(0x09, 0x00); // No decode
 800515e:	2100      	movs	r1, #0
 8005160:	2009      	movs	r0, #9
 8005162:	f000 f921 	bl	80053a8 <MAX7219_Write>
 8005166:	4603      	mov	r3, r0
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	71fb      	strb	r3, [r7, #7]
	ret &= LedMatrix_ForceRefresh() == LEDMATRIX_OK;
 8005178:	f7ff ff92 	bl	80050a0 <LedMatrix_ForceRefresh>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	71fb      	strb	r3, [r7, #7]
	return ret ? LEDMATRIX_OK : LEDMATRIX_ERROR;
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <LedMatrix_Init+0xbe>
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <LedMatrix_Init+0xc0>
 80051a2:	2302      	movs	r3, #2
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <LedMatrix_intensity>:

LedMatrix_err_t LedMatrix_intensity(uint8_t intensity) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
	if (intensity > LED_MATRIX_MAX_INTENISITY_VALUE)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d901      	bls.n	80051c0 <LedMatrix_intensity+0x14>
		intensity = LED_MATRIX_MAX_INTENISITY_VALUE;
 80051bc:	230f      	movs	r3, #15
 80051be:	71fb      	strb	r3, [r7, #7]
	return MAX7219_Write(0x0A, intensity) ? LEDMATRIX_OK : LEDMATRIX_ERROR;
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	4619      	mov	r1, r3
 80051c4:	200a      	movs	r0, #10
 80051c6:	f000 f8ef 	bl	80053a8 <MAX7219_Write>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <LedMatrix_intensity+0x28>
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <LedMatrix_intensity+0x2a>
 80051d4:	2302      	movs	r3, #2
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <LedMatrix_Clear>:

void LedMatrix_Clear(void){
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) LedMatrix_WriteRow(i, 0);
 80051e4:	2300      	movs	r3, #0
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	e008      	b.n	80051fc <LedMatrix_Clear+0x1e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fedd 	bl	8004fb0 <LedMatrix_WriteRow>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3301      	adds	r3, #1
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b07      	cmp	r3, #7
 8005200:	ddf3      	ble.n	80051ea <LedMatrix_Clear+0xc>
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <LedMatrix_SetPixel>:

void LedMatrix_SetPixel(uint8_t x, uint8_t y, uint8_t state){
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
 8005216:	460b      	mov	r3, r1
 8005218:	71bb      	strb	r3, [r7, #6]
 800521a:	4613      	mov	r3, r2
 800521c:	717b      	strb	r3, [r7, #5]
    if (x > 7 || y > 7) return;
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b07      	cmp	r3, #7
 8005222:	d823      	bhi.n	800526c <LedMatrix_SetPixel+0x60>
 8005224:	79bb      	ldrb	r3, [r7, #6]
 8005226:	2b07      	cmp	r3, #7
 8005228:	d820      	bhi.n	800526c <LedMatrix_SetPixel+0x60>

    uint8_t mask = 1 << x;
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	2201      	movs	r2, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	73bb      	strb	r3, [r7, #14]
    uint8_t value = max7219_buffer[y];
 8005234:	79bb      	ldrb	r3, [r7, #6]
 8005236:	4a0f      	ldr	r2, [pc, #60]	@ (8005274 <LedMatrix_SetPixel+0x68>)
 8005238:	5cd3      	ldrb	r3, [r2, r3]
 800523a:	73fb      	strb	r3, [r7, #15]

    if (state) value |= mask;
 800523c:	797b      	ldrb	r3, [r7, #5]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <LedMatrix_SetPixel+0x40>
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	4313      	orrs	r3, r2
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e008      	b.n	800525e <LedMatrix_SetPixel+0x52>
    else value &= ~mask;
 800524c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005250:	43db      	mvns	r3, r3
 8005252:	b25a      	sxtb	r2, r3
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005258:	4013      	ands	r3, r2
 800525a:	b25b      	sxtb	r3, r3
 800525c:	73fb      	strb	r3, [r7, #15]

    LedMatrix_WriteRow(y, value);
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	79bb      	ldrb	r3, [r7, #6]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fea3 	bl	8004fb0 <LedMatrix_WriteRow>
 800526a:	e000      	b.n	800526e <LedMatrix_SetPixel+0x62>
    if (x > 7 || y > 7) return;
 800526c:	bf00      	nop
}
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200003d0 	.word	0x200003d0

08005278 <LedMatrix_SetBlock>:
    last_x = x;
    last_y = y;
}

void LedMatrix_SetBlock(uint8_t virtual_x, uint8_t virtual_y, uint8_t state)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	71fb      	strb	r3, [r7, #7]
 8005282:	460b      	mov	r3, r1
 8005284:	71bb      	strb	r3, [r7, #6]
 8005286:	4613      	mov	r3, r2
 8005288:	717b      	strb	r3, [r7, #5]
	uint8_t p[4];
	p[0]=virtual_x;
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	733b      	strb	r3, [r7, #12]
	p[1]=virtual_x-1;
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	3b01      	subs	r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	737b      	strb	r3, [r7, #13]
	p[2]=virtual_y;
 8005296:	79bb      	ldrb	r3, [r7, #6]
 8005298:	73bb      	strb	r3, [r7, #14]
	p[3]=virtual_y-1;
 800529a:	79bb      	ldrb	r3, [r7, #6]
 800529c:	3b01      	subs	r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<2;i++){
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e019      	b.n	80052dc <LedMatrix_SetBlock+0x64>
		for(int ii=2;ii<4;ii++){
 80052a8:	2302      	movs	r3, #2
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e010      	b.n	80052d0 <LedMatrix_SetBlock+0x58>
		  LedMatrix_SetPixel(p[i], p[ii], state);
 80052ae:	f107 020c 	add.w	r2, r7, #12
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	7818      	ldrb	r0, [r3, #0]
 80052b8:	f107 020c 	add.w	r2, r7, #12
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	797a      	ldrb	r2, [r7, #5]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f7ff ffa1 	bl	800520c <LedMatrix_SetPixel>
		for(int ii=2;ii<4;ii++){
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	ddeb      	ble.n	80052ae <LedMatrix_SetBlock+0x36>
	for(int i=0;i<2;i++){
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	3301      	adds	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	dde2      	ble.n	80052a8 <LedMatrix_SetBlock+0x30>
		}
	}
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <LedMatrix_LoadBitmap>:

void LedMatrix_LoadBitmap(const uint8_t bitmap[8]){
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e00b      	b.n	8005312 <LedMatrix_LoadBitmap+0x26>
        LedMatrix_WriteRow(i, bitmap[i]);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	b2d8      	uxtb	r0, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	4619      	mov	r1, r3
 8005308:	f7ff fe52 	bl	8004fb0 <LedMatrix_WriteRow>
    for (int i = 0; i < 8; i++) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b07      	cmp	r3, #7
 8005316:	ddf0      	ble.n	80052fa <LedMatrix_LoadBitmap+0xe>
    }
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <LedMatrix_SweepLeft_Circular>:

void LedMatrix_SweepLeft_Circular(void){
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++) {
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	e01b      	b.n	8005368 <LedMatrix_SweepLeft_Circular+0x44>
        uint8_t msb = (max7219_buffer[i] & 0x80) >> 7;
 8005330:	4a11      	ldr	r2, [pc, #68]	@ (8005378 <LedMatrix_SweepLeft_Circular+0x54>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4413      	add	r3, r2
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	09db      	lsrs	r3, r3, #7
 800533a:	70fb      	strb	r3, [r7, #3]
        uint8_t value = (max7219_buffer[i] << 1) | msb;
 800533c:	4a0e      	ldr	r2, [pc, #56]	@ (8005378 <LedMatrix_SweepLeft_Circular+0x54>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b25b      	sxtb	r3, r3
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	b25a      	sxtb	r2, r3
 800534a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800534e:	4313      	orrs	r3, r2
 8005350:	b25b      	sxtb	r3, r3
 8005352:	70bb      	strb	r3, [r7, #2]
        LedMatrix_WriteRow(i, value);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	78ba      	ldrb	r2, [r7, #2]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fe27 	bl	8004fb0 <LedMatrix_WriteRow>
    for (int i = 0; i < 8; i++) {
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3301      	adds	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b07      	cmp	r3, #7
 800536c:	dde0      	ble.n	8005330 <LedMatrix_SweepLeft_Circular+0xc>
    }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200003d0 	.word	0x200003d0

0800537c <MAX7219_setup>:
 */
#include "ledMatrix_port.h"

static max7219_config_t* port;

bool MAX7219_setup(max7219_config_t* config){
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	if(!config)return false;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <MAX7219_setup+0x12>
 800538a:	2300      	movs	r3, #0
 800538c:	e003      	b.n	8005396 <MAX7219_setup+0x1a>
	port = config;
 800538e:	4a05      	ldr	r2, [pc, #20]	@ (80053a4 <MAX7219_setup+0x28>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6013      	str	r3, [r2, #0]
	return true;
 8005394:	2301      	movs	r3, #1
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	200003dc 	.word	0x200003dc

080053a8 <MAX7219_Write>:

bool MAX7219_Write(uint8_t reg, uint8_t data)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	460a      	mov	r2, r1
 80053b2:	71fb      	strb	r3, [r7, #7]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71bb      	strb	r3, [r7, #6]
    uint16_t frame = (reg << 8) | data;
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b21a      	sxth	r2, r3
 80053c0:	79bb      	ldrb	r3, [r7, #6]
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b21b      	sxth	r3, r3
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	81bb      	strh	r3, [r7, #12]

    HAL_GPIO_WritePin(port->CS_GPIO_PORT, port->CS_GPIO_PIN, GPIO_PIN_RESET);
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <MAX7219_Write+0x74>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6858      	ldr	r0, [r3, #4]
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <MAX7219_Write+0x74>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	891b      	ldrh	r3, [r3, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	4619      	mov	r1, r3
 80053dc:	f7fd f90c 	bl	80025f8 <HAL_GPIO_WritePin>

    bool ret = HAL_SPI_Transmit(port->hspi, (uint8_t*)&frame, 1, 100) == HAL_OK;
 80053e0:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <MAX7219_Write+0x74>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f107 010c 	add.w	r1, r7, #12
 80053ea:	2364      	movs	r3, #100	@ 0x64
 80053ec:	2201      	movs	r2, #1
 80053ee:	f7fe ffb2 	bl	8004356 <HAL_SPI_Transmit>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(port->CS_GPIO_PORT, port->CS_GPIO_PIN, GPIO_PIN_SET);
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <MAX7219_Write+0x74>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6858      	ldr	r0, [r3, #4]
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <MAX7219_Write+0x74>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	891b      	ldrh	r3, [r3, #8]
 800540a:	2201      	movs	r2, #1
 800540c:	4619      	mov	r1, r3
 800540e:	f7fd f8f3 	bl	80025f8 <HAL_GPIO_WritePin>

    return ret;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	200003dc 	.word	0x200003dc

08005420 <mpu6050_Init>:

static mpu6050_data_t mpu_data;
static mpu6050_settings_t mpu_settings;

bool mpu6050_Init(mpu6050_settings_t *settings)
{
 8005420:	b5b0      	push	{r4, r5, r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    if (!settings) return false;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <mpu6050_Init+0x12>
 800542e:	2300      	movs	r3, #0
 8005430:	e0f3      	b.n	800561a <mpu6050_Init+0x1fa>

    mpu_settings = *settings; // Copiar la configuración
 8005432:	4a7c      	ldr	r2, [pc, #496]	@ (8005624 <mpu6050_Init+0x204>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4614      	mov	r4, r2
 8005438:	461d      	mov	r5, r3
 800543a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800543c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800543e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005442:	e884 0003 	stmia.w	r4, {r0, r1}

    switch (mpu_settings.accel_range) {
 8005446:	4b77      	ldr	r3, [pc, #476]	@ (8005624 <mpu6050_Init+0x204>)
 8005448:	7b1b      	ldrb	r3, [r3, #12]
 800544a:	2b18      	cmp	r3, #24
 800544c:	d848      	bhi.n	80054e0 <mpu6050_Init+0xc0>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <mpu6050_Init+0x34>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054e1 	.word	0x080054e1
 800545c:	080054e1 	.word	0x080054e1
 8005460:	080054e1 	.word	0x080054e1
 8005464:	080054e1 	.word	0x080054e1
 8005468:	080054e1 	.word	0x080054e1
 800546c:	080054e1 	.word	0x080054e1
 8005470:	080054e1 	.word	0x080054e1
 8005474:	080054c3 	.word	0x080054c3
 8005478:	080054e1 	.word	0x080054e1
 800547c:	080054e1 	.word	0x080054e1
 8005480:	080054e1 	.word	0x080054e1
 8005484:	080054e1 	.word	0x080054e1
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054e1 	.word	0x080054e1
 8005490:	080054e1 	.word	0x080054e1
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054e1 	.word	0x080054e1
 800549c:	080054e1 	.word	0x080054e1
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	080054e1 	.word	0x080054e1
 80054a8:	080054e1 	.word	0x080054e1
 80054ac:	080054e1 	.word	0x080054e1
 80054b0:	080054e1 	.word	0x080054e1
 80054b4:	080054d7 	.word	0x080054d7
        case MPU6050_ACCEL_2G:  mpu_settings.accel_factor = 1.0f / COUNTS_PER_G_2G; break;
 80054b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005624 <mpu6050_Init+0x204>)
 80054ba:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 80054be:	611a      	str	r2, [r3, #16]
 80054c0:	e00e      	b.n	80054e0 <mpu6050_Init+0xc0>
        case MPU6050_ACCEL_4G:  mpu_settings.accel_factor = 1.0f / COUNTS_PER_G_4G;  break;
 80054c2:	4b58      	ldr	r3, [pc, #352]	@ (8005624 <mpu6050_Init+0x204>)
 80054c4:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 80054c8:	611a      	str	r2, [r3, #16]
 80054ca:	e009      	b.n	80054e0 <mpu6050_Init+0xc0>
        case MPU6050_ACCEL_8G:  mpu_settings.accel_factor = 1.0f / COUNTS_PER_G_8G;  break;
 80054cc:	4b55      	ldr	r3, [pc, #340]	@ (8005624 <mpu6050_Init+0x204>)
 80054ce:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 80054d2:	611a      	str	r2, [r3, #16]
 80054d4:	e004      	b.n	80054e0 <mpu6050_Init+0xc0>
        case MPU6050_ACCEL_16G: mpu_settings.accel_factor = 1.0f / COUNTS_PER_G_16G;  break;
 80054d6:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <mpu6050_Init+0x204>)
 80054d8:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 80054dc:	611a      	str	r2, [r3, #16]
 80054de:	bf00      	nop
    }

    switch (mpu_settings.gyro_range) {
 80054e0:	4b50      	ldr	r3, [pc, #320]	@ (8005624 <mpu6050_Init+0x204>)
 80054e2:	7adb      	ldrb	r3, [r3, #11]
 80054e4:	2b18      	cmp	r3, #24
 80054e6:	d845      	bhi.n	8005574 <mpu6050_Init+0x154>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <mpu6050_Init+0xd0>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005575 	.word	0x08005575
 80054f8:	08005575 	.word	0x08005575
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005575 	.word	0x08005575
 8005504:	08005575 	.word	0x08005575
 8005508:	08005575 	.word	0x08005575
 800550c:	08005575 	.word	0x08005575
 8005510:	0800555d 	.word	0x0800555d
 8005514:	08005575 	.word	0x08005575
 8005518:	08005575 	.word	0x08005575
 800551c:	08005575 	.word	0x08005575
 8005520:	08005575 	.word	0x08005575
 8005524:	08005575 	.word	0x08005575
 8005528:	08005575 	.word	0x08005575
 800552c:	08005575 	.word	0x08005575
 8005530:	08005565 	.word	0x08005565
 8005534:	08005575 	.word	0x08005575
 8005538:	08005575 	.word	0x08005575
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	08005575 	.word	0x08005575
 8005548:	08005575 	.word	0x08005575
 800554c:	08005575 	.word	0x08005575
 8005550:	0800556d 	.word	0x0800556d
        case MPU6050_GYRO_250DPS:  mpu_settings.gyro_factor = 1.0f / 131.0f;  break;
 8005554:	4b33      	ldr	r3, [pc, #204]	@ (8005624 <mpu6050_Init+0x204>)
 8005556:	4a34      	ldr	r2, [pc, #208]	@ (8005628 <mpu6050_Init+0x208>)
 8005558:	615a      	str	r2, [r3, #20]
 800555a:	e00b      	b.n	8005574 <mpu6050_Init+0x154>
        case MPU6050_GYRO_500DPS:  mpu_settings.gyro_factor = 1.0f / 65.5f;   break;
 800555c:	4b31      	ldr	r3, [pc, #196]	@ (8005624 <mpu6050_Init+0x204>)
 800555e:	4a33      	ldr	r2, [pc, #204]	@ (800562c <mpu6050_Init+0x20c>)
 8005560:	615a      	str	r2, [r3, #20]
 8005562:	e007      	b.n	8005574 <mpu6050_Init+0x154>
        case MPU6050_GYRO_1000DPS: mpu_settings.gyro_factor = 1.0f / 32.8f;   break;
 8005564:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <mpu6050_Init+0x204>)
 8005566:	4a32      	ldr	r2, [pc, #200]	@ (8005630 <mpu6050_Init+0x210>)
 8005568:	615a      	str	r2, [r3, #20]
 800556a:	e003      	b.n	8005574 <mpu6050_Init+0x154>
        case MPU6050_GYRO_2000DPS: mpu_settings.gyro_factor = 1.0f / 16.4f;   break;
 800556c:	4b2d      	ldr	r3, [pc, #180]	@ (8005624 <mpu6050_Init+0x204>)
 800556e:	4a31      	ldr	r2, [pc, #196]	@ (8005634 <mpu6050_Init+0x214>)
 8005570:	615a      	str	r2, [r3, #20]
 8005572:	bf00      	nop
    }

    // Configurar port
    if(!MPU6050_setup(&settings->port))return false;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f8d2 	bl	8005720 <MPU6050_setup>
 800557c:	4603      	mov	r3, r0
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <mpu6050_Init+0x16c>
 8005588:	2300      	movs	r3, #0
 800558a:	e046      	b.n	800561a <mpu6050_Init+0x1fa>

    // Salir de sleep y seleccionar fuente de clock
    if (!MPU6050_WriteReg(MPU6050_REG_PWR_MGMT_1, mpu_settings.clk_source)) return false;
 800558c:	4b25      	ldr	r3, [pc, #148]	@ (8005624 <mpu6050_Init+0x204>)
 800558e:	7a1b      	ldrb	r3, [r3, #8]
 8005590:	4619      	mov	r1, r3
 8005592:	206b      	movs	r0, #107	@ 0x6b
 8005594:	f000 f8e4 	bl	8005760 <MPU6050_WriteReg>
 8005598:	4603      	mov	r3, r0
 800559a:	f083 0301 	eor.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <mpu6050_Init+0x188>
 80055a4:	2300      	movs	r3, #0
 80055a6:	e038      	b.n	800561a <mpu6050_Init+0x1fa>

    // Sample Rate Divider
    if (!MPU6050_WriteReg(MPU6050_REG_SMPLRT_DIV, mpu_settings.sample_rate_div)) return false;
 80055a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005624 <mpu6050_Init+0x204>)
 80055aa:	7a5b      	ldrb	r3, [r3, #9]
 80055ac:	4619      	mov	r1, r3
 80055ae:	2019      	movs	r0, #25
 80055b0:	f000 f8d6 	bl	8005760 <MPU6050_WriteReg>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f083 0301 	eor.w	r3, r3, #1
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <mpu6050_Init+0x1a4>
 80055c0:	2300      	movs	r3, #0
 80055c2:	e02a      	b.n	800561a <mpu6050_Init+0x1fa>

    // Configurar DLPF
    if (!MPU6050_WriteReg(MPU6050_REG_CONFIG, mpu_settings.dlpf_cfg)) return false;
 80055c4:	4b17      	ldr	r3, [pc, #92]	@ (8005624 <mpu6050_Init+0x204>)
 80055c6:	7a9b      	ldrb	r3, [r3, #10]
 80055c8:	4619      	mov	r1, r3
 80055ca:	201a      	movs	r0, #26
 80055cc:	f000 f8c8 	bl	8005760 <MPU6050_WriteReg>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f083 0301 	eor.w	r3, r3, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <mpu6050_Init+0x1c0>
 80055dc:	2300      	movs	r3, #0
 80055de:	e01c      	b.n	800561a <mpu6050_Init+0x1fa>

    // Configurar rango del giroscopio
    if (!MPU6050_WriteReg(MPU6050_REG_GYRO_CONFIG, mpu_settings.gyro_range)) return false;
 80055e0:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <mpu6050_Init+0x204>)
 80055e2:	7adb      	ldrb	r3, [r3, #11]
 80055e4:	4619      	mov	r1, r3
 80055e6:	201b      	movs	r0, #27
 80055e8:	f000 f8ba 	bl	8005760 <MPU6050_WriteReg>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f083 0301 	eor.w	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <mpu6050_Init+0x1dc>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e00e      	b.n	800561a <mpu6050_Init+0x1fa>

    // Configurar rango del acelerómetro
    if (!MPU6050_WriteReg(MPU6050_REG_ACCEL_CONFIG, mpu_settings.accel_range)) return false;
 80055fc:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <mpu6050_Init+0x204>)
 80055fe:	7b1b      	ldrb	r3, [r3, #12]
 8005600:	4619      	mov	r1, r3
 8005602:	201c      	movs	r0, #28
 8005604:	f000 f8ac 	bl	8005760 <MPU6050_WriteReg>
 8005608:	4603      	mov	r3, r0
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <mpu6050_Init+0x1f8>
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <mpu6050_Init+0x1fa>

    return true;
 8005618:	2301      	movs	r3, #1
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bdb0      	pop	{r4, r5, r7, pc}
 8005622:	bf00      	nop
 8005624:	200003f0 	.word	0x200003f0
 8005628:	3bfa232d 	.word	0x3bfa232d
 800562c:	3c7a232d 	.word	0x3c7a232d
 8005630:	3cf9c190 	.word	0x3cf9c190
 8005634:	3d79c190 	.word	0x3d79c190

08005638 <MPU6050_ReadAccel>:

bool MPU6050_ReadAccel(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
    uint8_t buffer[6];
    if (!MPU6050_ReadBytes(MPU6050_REG_ACCEL_XOUT_H, buffer, 6))
 800563e:	463b      	mov	r3, r7
 8005640:	2206      	movs	r2, #6
 8005642:	4619      	mov	r1, r3
 8005644:	203b      	movs	r0, #59	@ 0x3b
 8005646:	f000 f8b3 	bl	80057b0 <MPU6050_ReadBytes>
 800564a:	4603      	mov	r3, r0
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MPU6050_ReadAccel+0x22>
        return false;
 8005656:	2300      	movs	r3, #0
 8005658:	e01e      	b.n	8005698 <MPU6050_ReadAccel+0x60>

    mpu_data.accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 800565a:	783b      	ldrb	r3, [r7, #0]
 800565c:	b21b      	sxth	r3, r3
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	b21a      	sxth	r2, r3
 8005662:	787b      	ldrb	r3, [r7, #1]
 8005664:	b21b      	sxth	r3, r3
 8005666:	4313      	orrs	r3, r2
 8005668:	b21a      	sxth	r2, r3
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <MPU6050_ReadAccel+0x68>)
 800566c:	801a      	strh	r2, [r3, #0]
    mpu_data.accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 800566e:	78bb      	ldrb	r3, [r7, #2]
 8005670:	b21b      	sxth	r3, r3
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	b21a      	sxth	r2, r3
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	b21b      	sxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b21a      	sxth	r2, r3
 800567e:	4b08      	ldr	r3, [pc, #32]	@ (80056a0 <MPU6050_ReadAccel+0x68>)
 8005680:	805a      	strh	r2, [r3, #2]
    mpu_data.accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8005682:	793b      	ldrb	r3, [r7, #4]
 8005684:	b21b      	sxth	r3, r3
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	b21a      	sxth	r2, r3
 800568a:	797b      	ldrb	r3, [r7, #5]
 800568c:	b21b      	sxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b21a      	sxth	r2, r3
 8005692:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <MPU6050_ReadAccel+0x68>)
 8005694:	809a      	strh	r2, [r3, #4]
    return true;
 8005696:	2301      	movs	r3, #1
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	200003e0 	.word	0x200003e0

080056a4 <MPU6050_GetAccelG>:
    return raw / 340.0f + 36.53f;
}


void MPU6050_GetAccelG(float *x, float *y, float *z)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
    *x = mpu_data.accel_x * mpu_settings.accel_factor;
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <MPU6050_GetAccelG+0x74>)
 80056b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056be:	4b17      	ldr	r3, [pc, #92]	@ (800571c <MPU6050_GetAccelG+0x78>)
 80056c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80056c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	edc3 7a00 	vstr	s15, [r3]
    *y = mpu_data.accel_y * mpu_settings.accel_factor;
 80056ce:	4b12      	ldr	r3, [pc, #72]	@ (8005718 <MPU6050_GetAccelG+0x74>)
 80056d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056dc:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <MPU6050_GetAccelG+0x78>)
 80056de:	edd3 7a04 	vldr	s15, [r3, #16]
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	edc3 7a00 	vstr	s15, [r3]
    *z = mpu_data.accel_z * mpu_settings.accel_factor;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <MPU6050_GetAccelG+0x74>)
 80056ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fa:	4b08      	ldr	r3, [pc, #32]	@ (800571c <MPU6050_GetAccelG+0x78>)
 80056fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	edc3 7a00 	vstr	s15, [r3]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	200003e0 	.word	0x200003e0
 800571c:	200003f0 	.word	0x200003f0

08005720 <MPU6050_setup>:
static uint8_t mpu_addr = 0;

#define MPU6050_BASE_ADDR 0x68

bool MPU6050_setup(mpu6050_port_config_t *config)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    if (!config) return false;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <MPU6050_setup+0x12>
 800572e:	2300      	movs	r3, #0
 8005730:	e00c      	b.n	800574c <MPU6050_setup+0x2c>
    port = config;
 8005732:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <MPU6050_setup+0x38>)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6013      	str	r3, [r2, #0]
    mpu_addr = MPU6050_BASE_ADDR << 1 | (config->ad0_state ? 0x01 : 0x00); // I2C address shift incluido
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <MPU6050_setup+0x24>
 8005740:	22d1      	movs	r2, #209	@ 0xd1
 8005742:	e000      	b.n	8005746 <MPU6050_setup+0x26>
 8005744:	22d0      	movs	r2, #208	@ 0xd0
 8005746:	4b05      	ldr	r3, [pc, #20]	@ (800575c <MPU6050_setup+0x3c>)
 8005748:	701a      	strb	r2, [r3, #0]
    return true;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000408 	.word	0x20000408
 800575c:	2000040c 	.word	0x2000040c

08005760 <MPU6050_WriteReg>:

bool MPU6050_WriteReg(uint8_t reg, uint8_t data)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af04      	add	r7, sp, #16
 8005766:	4603      	mov	r3, r0
 8005768:	460a      	mov	r2, r1
 800576a:	71fb      	strb	r3, [r7, #7]
 800576c:	4613      	mov	r3, r2
 800576e:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(port->hi2c, mpu_addr, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) == HAL_OK;
 8005770:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <MPU6050_WriteReg+0x48>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <MPU6050_WriteReg+0x4c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	b29a      	uxth	r2, r3
 8005780:	2364      	movs	r3, #100	@ 0x64
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	2301      	movs	r3, #1
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	1dbb      	adds	r3, r7, #6
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2301      	movs	r3, #1
 800578e:	f7fd f891 	bl	80028b4 <HAL_I2C_Mem_Write>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000408 	.word	0x20000408
 80057ac:	2000040c 	.word	0x2000040c

080057b0 <MPU6050_ReadBytes>:

bool MPU6050_ReadBytes(uint8_t reg, uint8_t *buffer, uint16_t len)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
 80057bc:	4613      	mov	r3, r2
 80057be:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(port->hi2c, mpu_addr, reg, I2C_MEMADD_SIZE_8BIT, buffer, len, 100) == HAL_OK;
 80057c0:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <MPU6050_ReadBytes+0x48>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <MPU6050_ReadBytes+0x4c>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	2364      	movs	r3, #100	@ 0x64
 80057d2:	9302      	str	r3, [sp, #8]
 80057d4:	88bb      	ldrh	r3, [r7, #4]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2301      	movs	r3, #1
 80057de:	f7fd f963 	bl	8002aa8 <HAL_I2C_Mem_Read>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bf0c      	ite	eq
 80057e8:	2301      	moveq	r3, #1
 80057ea:	2300      	movne	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000408 	.word	0x20000408
 80057fc:	2000040c 	.word	0x2000040c

08005800 <__cvt>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	ec57 6b10 	vmov	r6, r7, d0
 8005808:	2f00      	cmp	r7, #0
 800580a:	460c      	mov	r4, r1
 800580c:	4619      	mov	r1, r3
 800580e:	463b      	mov	r3, r7
 8005810:	bfbb      	ittet	lt
 8005812:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005816:	461f      	movlt	r7, r3
 8005818:	2300      	movge	r3, #0
 800581a:	232d      	movlt	r3, #45	@ 0x2d
 800581c:	700b      	strb	r3, [r1, #0]
 800581e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005820:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005824:	4691      	mov	r9, r2
 8005826:	f023 0820 	bic.w	r8, r3, #32
 800582a:	bfbc      	itt	lt
 800582c:	4632      	movlt	r2, r6
 800582e:	4616      	movlt	r6, r2
 8005830:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005834:	d005      	beq.n	8005842 <__cvt+0x42>
 8005836:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800583a:	d100      	bne.n	800583e <__cvt+0x3e>
 800583c:	3401      	adds	r4, #1
 800583e:	2102      	movs	r1, #2
 8005840:	e000      	b.n	8005844 <__cvt+0x44>
 8005842:	2103      	movs	r1, #3
 8005844:	ab03      	add	r3, sp, #12
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	ab02      	add	r3, sp, #8
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	ec47 6b10 	vmov	d0, r6, r7
 8005850:	4653      	mov	r3, sl
 8005852:	4622      	mov	r2, r4
 8005854:	f000 fe90 	bl	8006578 <_dtoa_r>
 8005858:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800585c:	4605      	mov	r5, r0
 800585e:	d119      	bne.n	8005894 <__cvt+0x94>
 8005860:	f019 0f01 	tst.w	r9, #1
 8005864:	d00e      	beq.n	8005884 <__cvt+0x84>
 8005866:	eb00 0904 	add.w	r9, r0, r4
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fb f949 	bl	8000b08 <__aeabi_dcmpeq>
 8005876:	b108      	cbz	r0, 800587c <__cvt+0x7c>
 8005878:	f8cd 900c 	str.w	r9, [sp, #12]
 800587c:	2230      	movs	r2, #48	@ 0x30
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	454b      	cmp	r3, r9
 8005882:	d31e      	bcc.n	80058c2 <__cvt+0xc2>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005888:	1b5b      	subs	r3, r3, r5
 800588a:	4628      	mov	r0, r5
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	b004      	add	sp, #16
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005898:	eb00 0904 	add.w	r9, r0, r4
 800589c:	d1e5      	bne.n	800586a <__cvt+0x6a>
 800589e:	7803      	ldrb	r3, [r0, #0]
 80058a0:	2b30      	cmp	r3, #48	@ 0x30
 80058a2:	d10a      	bne.n	80058ba <__cvt+0xba>
 80058a4:	2200      	movs	r2, #0
 80058a6:	2300      	movs	r3, #0
 80058a8:	4630      	mov	r0, r6
 80058aa:	4639      	mov	r1, r7
 80058ac:	f7fb f92c 	bl	8000b08 <__aeabi_dcmpeq>
 80058b0:	b918      	cbnz	r0, 80058ba <__cvt+0xba>
 80058b2:	f1c4 0401 	rsb	r4, r4, #1
 80058b6:	f8ca 4000 	str.w	r4, [sl]
 80058ba:	f8da 3000 	ldr.w	r3, [sl]
 80058be:	4499      	add	r9, r3
 80058c0:	e7d3      	b.n	800586a <__cvt+0x6a>
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	9103      	str	r1, [sp, #12]
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e7d9      	b.n	800587e <__cvt+0x7e>

080058ca <__exponent>:
 80058ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058cc:	2900      	cmp	r1, #0
 80058ce:	bfba      	itte	lt
 80058d0:	4249      	neglt	r1, r1
 80058d2:	232d      	movlt	r3, #45	@ 0x2d
 80058d4:	232b      	movge	r3, #43	@ 0x2b
 80058d6:	2909      	cmp	r1, #9
 80058d8:	7002      	strb	r2, [r0, #0]
 80058da:	7043      	strb	r3, [r0, #1]
 80058dc:	dd29      	ble.n	8005932 <__exponent+0x68>
 80058de:	f10d 0307 	add.w	r3, sp, #7
 80058e2:	461d      	mov	r5, r3
 80058e4:	270a      	movs	r7, #10
 80058e6:	461a      	mov	r2, r3
 80058e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80058ec:	fb07 1416 	mls	r4, r7, r6, r1
 80058f0:	3430      	adds	r4, #48	@ 0x30
 80058f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058f6:	460c      	mov	r4, r1
 80058f8:	2c63      	cmp	r4, #99	@ 0x63
 80058fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80058fe:	4631      	mov	r1, r6
 8005900:	dcf1      	bgt.n	80058e6 <__exponent+0x1c>
 8005902:	3130      	adds	r1, #48	@ 0x30
 8005904:	1e94      	subs	r4, r2, #2
 8005906:	f803 1c01 	strb.w	r1, [r3, #-1]
 800590a:	1c41      	adds	r1, r0, #1
 800590c:	4623      	mov	r3, r4
 800590e:	42ab      	cmp	r3, r5
 8005910:	d30a      	bcc.n	8005928 <__exponent+0x5e>
 8005912:	f10d 0309 	add.w	r3, sp, #9
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	42ac      	cmp	r4, r5
 800591a:	bf88      	it	hi
 800591c:	2300      	movhi	r3, #0
 800591e:	3302      	adds	r3, #2
 8005920:	4403      	add	r3, r0
 8005922:	1a18      	subs	r0, r3, r0
 8005924:	b003      	add	sp, #12
 8005926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005928:	f813 6b01 	ldrb.w	r6, [r3], #1
 800592c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005930:	e7ed      	b.n	800590e <__exponent+0x44>
 8005932:	2330      	movs	r3, #48	@ 0x30
 8005934:	3130      	adds	r1, #48	@ 0x30
 8005936:	7083      	strb	r3, [r0, #2]
 8005938:	70c1      	strb	r1, [r0, #3]
 800593a:	1d03      	adds	r3, r0, #4
 800593c:	e7f1      	b.n	8005922 <__exponent+0x58>
	...

08005940 <_printf_float>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b08d      	sub	sp, #52	@ 0x34
 8005946:	460c      	mov	r4, r1
 8005948:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800594c:	4616      	mov	r6, r2
 800594e:	461f      	mov	r7, r3
 8005950:	4605      	mov	r5, r0
 8005952:	f000 fd11 	bl	8006378 <_localeconv_r>
 8005956:	6803      	ldr	r3, [r0, #0]
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fa fca8 	bl	80002b0 <strlen>
 8005960:	2300      	movs	r3, #0
 8005962:	930a      	str	r3, [sp, #40]	@ 0x28
 8005964:	f8d8 3000 	ldr.w	r3, [r8]
 8005968:	9005      	str	r0, [sp, #20]
 800596a:	3307      	adds	r3, #7
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	f103 0208 	add.w	r2, r3, #8
 8005974:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005978:	f8d4 b000 	ldr.w	fp, [r4]
 800597c:	f8c8 2000 	str.w	r2, [r8]
 8005980:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005984:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005988:	9307      	str	r3, [sp, #28]
 800598a:	f8cd 8018 	str.w	r8, [sp, #24]
 800598e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005996:	4b9c      	ldr	r3, [pc, #624]	@ (8005c08 <_printf_float+0x2c8>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	f7fb f8e6 	bl	8000b6c <__aeabi_dcmpun>
 80059a0:	bb70      	cbnz	r0, 8005a00 <_printf_float+0xc0>
 80059a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a6:	4b98      	ldr	r3, [pc, #608]	@ (8005c08 <_printf_float+0x2c8>)
 80059a8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ac:	f7fb f8c0 	bl	8000b30 <__aeabi_dcmple>
 80059b0:	bb30      	cbnz	r0, 8005a00 <_printf_float+0xc0>
 80059b2:	2200      	movs	r2, #0
 80059b4:	2300      	movs	r3, #0
 80059b6:	4640      	mov	r0, r8
 80059b8:	4649      	mov	r1, r9
 80059ba:	f7fb f8af 	bl	8000b1c <__aeabi_dcmplt>
 80059be:	b110      	cbz	r0, 80059c6 <_printf_float+0x86>
 80059c0:	232d      	movs	r3, #45	@ 0x2d
 80059c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059c6:	4a91      	ldr	r2, [pc, #580]	@ (8005c0c <_printf_float+0x2cc>)
 80059c8:	4b91      	ldr	r3, [pc, #580]	@ (8005c10 <_printf_float+0x2d0>)
 80059ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059ce:	bf8c      	ite	hi
 80059d0:	4690      	movhi	r8, r2
 80059d2:	4698      	movls	r8, r3
 80059d4:	2303      	movs	r3, #3
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	f02b 0304 	bic.w	r3, fp, #4
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	f04f 0900 	mov.w	r9, #0
 80059e2:	9700      	str	r7, [sp, #0]
 80059e4:	4633      	mov	r3, r6
 80059e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f9d2 	bl	8005d94 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f040 808d 	bne.w	8005b10 <_printf_float+0x1d0>
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	b00d      	add	sp, #52	@ 0x34
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	4649      	mov	r1, r9
 8005a08:	f7fb f8b0 	bl	8000b6c <__aeabi_dcmpun>
 8005a0c:	b140      	cbz	r0, 8005a20 <_printf_float+0xe0>
 8005a0e:	464b      	mov	r3, r9
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfbc      	itt	lt
 8005a14:	232d      	movlt	r3, #45	@ 0x2d
 8005a16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c14 <_printf_float+0x2d4>)
 8005a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c18 <_printf_float+0x2d8>)
 8005a1e:	e7d4      	b.n	80059ca <_printf_float+0x8a>
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a26:	9206      	str	r2, [sp, #24]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	d13b      	bne.n	8005aa4 <_printf_float+0x164>
 8005a2c:	2306      	movs	r3, #6
 8005a2e:	6063      	str	r3, [r4, #4]
 8005a30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a34:	2300      	movs	r3, #0
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	9303      	str	r3, [sp, #12]
 8005a3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a40:	ab09      	add	r3, sp, #36	@ 0x24
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	ec49 8b10 	vmov	d0, r8, r9
 8005a4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f7ff fed6 	bl	8005800 <__cvt>
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a58:	2b47      	cmp	r3, #71	@ 0x47
 8005a5a:	4680      	mov	r8, r0
 8005a5c:	d129      	bne.n	8005ab2 <_printf_float+0x172>
 8005a5e:	1cc8      	adds	r0, r1, #3
 8005a60:	db02      	blt.n	8005a68 <_printf_float+0x128>
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	4299      	cmp	r1, r3
 8005a66:	dd41      	ble.n	8005aec <_printf_float+0x1ac>
 8005a68:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8005a70:	3901      	subs	r1, #1
 8005a72:	4652      	mov	r2, sl
 8005a74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a78:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a7a:	f7ff ff26 	bl	80058ca <__exponent>
 8005a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a80:	1813      	adds	r3, r2, r0
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	4681      	mov	r9, r0
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	dc02      	bgt.n	8005a90 <_printf_float+0x150>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	07d2      	lsls	r2, r2, #31
 8005a8e:	d501      	bpl.n	8005a94 <_printf_float+0x154>
 8005a90:	3301      	adds	r3, #1
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0a2      	beq.n	80059e2 <_printf_float+0xa2>
 8005a9c:	232d      	movs	r3, #45	@ 0x2d
 8005a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aa2:	e79e      	b.n	80059e2 <_printf_float+0xa2>
 8005aa4:	9a06      	ldr	r2, [sp, #24]
 8005aa6:	2a47      	cmp	r2, #71	@ 0x47
 8005aa8:	d1c2      	bne.n	8005a30 <_printf_float+0xf0>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1c0      	bne.n	8005a30 <_printf_float+0xf0>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e7bd      	b.n	8005a2e <_printf_float+0xee>
 8005ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ab6:	d9db      	bls.n	8005a70 <_printf_float+0x130>
 8005ab8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005abc:	d118      	bne.n	8005af0 <_printf_float+0x1b0>
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	dd0b      	ble.n	8005adc <_printf_float+0x19c>
 8005ac4:	6121      	str	r1, [r4, #16]
 8005ac6:	b913      	cbnz	r3, 8005ace <_printf_float+0x18e>
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	07d0      	lsls	r0, r2, #31
 8005acc:	d502      	bpl.n	8005ad4 <_printf_float+0x194>
 8005ace:	3301      	adds	r3, #1
 8005ad0:	440b      	add	r3, r1
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ad6:	f04f 0900 	mov.w	r9, #0
 8005ada:	e7db      	b.n	8005a94 <_printf_float+0x154>
 8005adc:	b913      	cbnz	r3, 8005ae4 <_printf_float+0x1a4>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	07d2      	lsls	r2, r2, #31
 8005ae2:	d501      	bpl.n	8005ae8 <_printf_float+0x1a8>
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	e7f4      	b.n	8005ad2 <_printf_float+0x192>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e7f2      	b.n	8005ad2 <_printf_float+0x192>
 8005aec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005af2:	4299      	cmp	r1, r3
 8005af4:	db05      	blt.n	8005b02 <_printf_float+0x1c2>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	6121      	str	r1, [r4, #16]
 8005afa:	07d8      	lsls	r0, r3, #31
 8005afc:	d5ea      	bpl.n	8005ad4 <_printf_float+0x194>
 8005afe:	1c4b      	adds	r3, r1, #1
 8005b00:	e7e7      	b.n	8005ad2 <_printf_float+0x192>
 8005b02:	2900      	cmp	r1, #0
 8005b04:	bfd4      	ite	le
 8005b06:	f1c1 0202 	rsble	r2, r1, #2
 8005b0a:	2201      	movgt	r2, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	e7e0      	b.n	8005ad2 <_printf_float+0x192>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	055a      	lsls	r2, r3, #21
 8005b14:	d407      	bmi.n	8005b26 <_printf_float+0x1e6>
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	4642      	mov	r2, r8
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b8      	blx	r7
 8005b20:	3001      	adds	r0, #1
 8005b22:	d12b      	bne.n	8005b7c <_printf_float+0x23c>
 8005b24:	e767      	b.n	80059f6 <_printf_float+0xb6>
 8005b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b2a:	f240 80dd 	bls.w	8005ce8 <_printf_float+0x3a8>
 8005b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b32:	2200      	movs	r2, #0
 8005b34:	2300      	movs	r3, #0
 8005b36:	f7fa ffe7 	bl	8000b08 <__aeabi_dcmpeq>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d033      	beq.n	8005ba6 <_printf_float+0x266>
 8005b3e:	4a37      	ldr	r2, [pc, #220]	@ (8005c1c <_printf_float+0x2dc>)
 8005b40:	2301      	movs	r3, #1
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f af54 	beq.w	80059f6 <_printf_float+0xb6>
 8005b4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b52:	4543      	cmp	r3, r8
 8005b54:	db02      	blt.n	8005b5c <_printf_float+0x21c>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	07d8      	lsls	r0, r3, #31
 8005b5a:	d50f      	bpl.n	8005b7c <_printf_float+0x23c>
 8005b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af45 	beq.w	80059f6 <_printf_float+0xb6>
 8005b6c:	f04f 0900 	mov.w	r9, #0
 8005b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b74:	f104 0a1a 	add.w	sl, r4, #26
 8005b78:	45c8      	cmp	r8, r9
 8005b7a:	dc09      	bgt.n	8005b90 <_printf_float+0x250>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	f100 8103 	bmi.w	8005d8a <_printf_float+0x44a>
 8005b84:	68e0      	ldr	r0, [r4, #12]
 8005b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	bfb8      	it	lt
 8005b8c:	4618      	movlt	r0, r3
 8005b8e:	e734      	b.n	80059fa <_printf_float+0xba>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4652      	mov	r2, sl
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af2b 	beq.w	80059f6 <_printf_float+0xb6>
 8005ba0:	f109 0901 	add.w	r9, r9, #1
 8005ba4:	e7e8      	b.n	8005b78 <_printf_float+0x238>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc39      	bgt.n	8005c20 <_printf_float+0x2e0>
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <_printf_float+0x2dc>)
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af1d 	beq.w	80059f6 <_printf_float+0xb6>
 8005bbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bc0:	ea59 0303 	orrs.w	r3, r9, r3
 8005bc4:	d102      	bne.n	8005bcc <_printf_float+0x28c>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	07d9      	lsls	r1, r3, #31
 8005bca:	d5d7      	bpl.n	8005b7c <_printf_float+0x23c>
 8005bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af0d 	beq.w	80059f6 <_printf_float+0xb6>
 8005bdc:	f04f 0a00 	mov.w	sl, #0
 8005be0:	f104 0b1a 	add.w	fp, r4, #26
 8005be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be6:	425b      	negs	r3, r3
 8005be8:	4553      	cmp	r3, sl
 8005bea:	dc01      	bgt.n	8005bf0 <_printf_float+0x2b0>
 8005bec:	464b      	mov	r3, r9
 8005bee:	e793      	b.n	8005b18 <_printf_float+0x1d8>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	465a      	mov	r2, fp
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f aefb 	beq.w	80059f6 <_printf_float+0xb6>
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	e7ee      	b.n	8005be4 <_printf_float+0x2a4>
 8005c06:	bf00      	nop
 8005c08:	7fefffff 	.word	0x7fefffff
 8005c0c:	08008620 	.word	0x08008620
 8005c10:	0800861c 	.word	0x0800861c
 8005c14:	08008628 	.word	0x08008628
 8005c18:	08008624 	.word	0x08008624
 8005c1c:	0800862c 	.word	0x0800862c
 8005c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c26:	4553      	cmp	r3, sl
 8005c28:	bfa8      	it	ge
 8005c2a:	4653      	movge	r3, sl
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	4699      	mov	r9, r3
 8005c30:	dc36      	bgt.n	8005ca0 <_printf_float+0x360>
 8005c32:	f04f 0b00 	mov.w	fp, #0
 8005c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c3a:	f104 021a 	add.w	r2, r4, #26
 8005c3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c40:	9306      	str	r3, [sp, #24]
 8005c42:	eba3 0309 	sub.w	r3, r3, r9
 8005c46:	455b      	cmp	r3, fp
 8005c48:	dc31      	bgt.n	8005cae <_printf_float+0x36e>
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	459a      	cmp	sl, r3
 8005c4e:	dc3a      	bgt.n	8005cc6 <_printf_float+0x386>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d437      	bmi.n	8005cc6 <_printf_float+0x386>
 8005c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c58:	ebaa 0903 	sub.w	r9, sl, r3
 8005c5c:	9b06      	ldr	r3, [sp, #24]
 8005c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c62:	4599      	cmp	r9, r3
 8005c64:	bfa8      	it	ge
 8005c66:	4699      	movge	r9, r3
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	dc33      	bgt.n	8005cd6 <_printf_float+0x396>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c76:	f104 0b1a 	add.w	fp, r4, #26
 8005c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c80:	eba3 0309 	sub.w	r3, r3, r9
 8005c84:	4543      	cmp	r3, r8
 8005c86:	f77f af79 	ble.w	8005b7c <_printf_float+0x23c>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	465a      	mov	r2, fp
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f aeae 	beq.w	80059f6 <_printf_float+0xb6>
 8005c9a:	f108 0801 	add.w	r8, r8, #1
 8005c9e:	e7ec      	b.n	8005c7a <_printf_float+0x33a>
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d1c2      	bne.n	8005c32 <_printf_float+0x2f2>
 8005cac:	e6a3      	b.n	80059f6 <_printf_float+0xb6>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	9206      	str	r2, [sp, #24]
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae9c 	beq.w	80059f6 <_printf_float+0xb6>
 8005cbe:	9a06      	ldr	r2, [sp, #24]
 8005cc0:	f10b 0b01 	add.w	fp, fp, #1
 8005cc4:	e7bb      	b.n	8005c3e <_printf_float+0x2fe>
 8005cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d1c0      	bne.n	8005c56 <_printf_float+0x316>
 8005cd4:	e68f      	b.n	80059f6 <_printf_float+0xb6>
 8005cd6:	9a06      	ldr	r2, [sp, #24]
 8005cd8:	464b      	mov	r3, r9
 8005cda:	4442      	add	r2, r8
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d1c3      	bne.n	8005c6e <_printf_float+0x32e>
 8005ce6:	e686      	b.n	80059f6 <_printf_float+0xb6>
 8005ce8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cec:	f1ba 0f01 	cmp.w	sl, #1
 8005cf0:	dc01      	bgt.n	8005cf6 <_printf_float+0x3b6>
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d536      	bpl.n	8005d64 <_printf_float+0x424>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	f43f ae78 	beq.w	80059f6 <_printf_float+0xb6>
 8005d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f ae70 	beq.w	80059f6 <_printf_float+0xb6>
 8005d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d22:	f7fa fef1 	bl	8000b08 <__aeabi_dcmpeq>
 8005d26:	b9c0      	cbnz	r0, 8005d5a <_printf_float+0x41a>
 8005d28:	4653      	mov	r3, sl
 8005d2a:	f108 0201 	add.w	r2, r8, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	d10c      	bne.n	8005d52 <_printf_float+0x412>
 8005d38:	e65d      	b.n	80059f6 <_printf_float+0xb6>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	465a      	mov	r2, fp
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae56 	beq.w	80059f6 <_printf_float+0xb6>
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	45d0      	cmp	r8, sl
 8005d50:	dbf3      	blt.n	8005d3a <_printf_float+0x3fa>
 8005d52:	464b      	mov	r3, r9
 8005d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d58:	e6df      	b.n	8005b1a <_printf_float+0x1da>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 0b1a 	add.w	fp, r4, #26
 8005d62:	e7f4      	b.n	8005d4e <_printf_float+0x40e>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4642      	mov	r2, r8
 8005d68:	e7e1      	b.n	8005d2e <_printf_float+0x3ee>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae3e 	beq.w	80059f6 <_printf_float+0xb6>
 8005d7a:	f108 0801 	add.w	r8, r8, #1
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d82:	1a5b      	subs	r3, r3, r1
 8005d84:	4543      	cmp	r3, r8
 8005d86:	dcf0      	bgt.n	8005d6a <_printf_float+0x42a>
 8005d88:	e6fc      	b.n	8005b84 <_printf_float+0x244>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	f104 0919 	add.w	r9, r4, #25
 8005d92:	e7f4      	b.n	8005d7e <_printf_float+0x43e>

08005d94 <_printf_common>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	4616      	mov	r6, r2
 8005d9a:	4698      	mov	r8, r3
 8005d9c:	688a      	ldr	r2, [r1, #8]
 8005d9e:	690b      	ldr	r3, [r1, #16]
 8005da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bfb8      	it	lt
 8005da8:	4613      	movlt	r3, r2
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005db0:	4607      	mov	r7, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b10a      	cbz	r2, 8005dba <_printf_common+0x26>
 8005db6:	3301      	adds	r3, #1
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	0699      	lsls	r1, r3, #26
 8005dbe:	bf42      	ittt	mi
 8005dc0:	6833      	ldrmi	r3, [r6, #0]
 8005dc2:	3302      	addmi	r3, #2
 8005dc4:	6033      	strmi	r3, [r6, #0]
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	f015 0506 	ands.w	r5, r5, #6
 8005dcc:	d106      	bne.n	8005ddc <_printf_common+0x48>
 8005dce:	f104 0a19 	add.w	sl, r4, #25
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	6832      	ldr	r2, [r6, #0]
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	dc26      	bgt.n	8005e2a <_printf_common+0x96>
 8005ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	3b00      	subs	r3, #0
 8005de4:	bf18      	it	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	0692      	lsls	r2, r2, #26
 8005dea:	d42b      	bmi.n	8005e44 <_printf_common+0xb0>
 8005dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005df0:	4641      	mov	r1, r8
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c8      	blx	r9
 8005df6:	3001      	adds	r0, #1
 8005df8:	d01e      	beq.n	8005e38 <_printf_common+0xa4>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	f003 0306 	and.w	r3, r3, #6
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf02      	ittt	eq
 8005e06:	68e5      	ldreq	r5, [r4, #12]
 8005e08:	6833      	ldreq	r3, [r6, #0]
 8005e0a:	1aed      	subeq	r5, r5, r3
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	2600      	movs	r6, #0
 8005e20:	341a      	adds	r4, #26
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	d11a      	bne.n	8005e5c <_printf_common+0xc8>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e008      	b.n	8005e3c <_printf_common+0xa8>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4641      	mov	r1, r8
 8005e30:	4638      	mov	r0, r7
 8005e32:	47c8      	blx	r9
 8005e34:	3001      	adds	r0, #1
 8005e36:	d103      	bne.n	8005e40 <_printf_common+0xac>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e40:	3501      	adds	r5, #1
 8005e42:	e7c6      	b.n	8005dd2 <_printf_common+0x3e>
 8005e44:	18e1      	adds	r1, r4, r3
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	2030      	movs	r0, #48	@ 0x30
 8005e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e4e:	4422      	add	r2, r4
 8005e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e58:	3302      	adds	r3, #2
 8005e5a:	e7c7      	b.n	8005dec <_printf_common+0x58>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4641      	mov	r1, r8
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c8      	blx	r9
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0e6      	beq.n	8005e38 <_printf_common+0xa4>
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7d9      	b.n	8005e22 <_printf_common+0x8e>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	7e0f      	ldrb	r7, [r1, #24]
 8005e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e78:	2f78      	cmp	r7, #120	@ 0x78
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	469a      	mov	sl, r3
 8005e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e86:	d807      	bhi.n	8005e98 <_printf_i+0x28>
 8005e88:	2f62      	cmp	r7, #98	@ 0x62
 8005e8a:	d80a      	bhi.n	8005ea2 <_printf_i+0x32>
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	f000 80d1 	beq.w	8006034 <_printf_i+0x1c4>
 8005e92:	2f58      	cmp	r7, #88	@ 0x58
 8005e94:	f000 80b8 	beq.w	8006008 <_printf_i+0x198>
 8005e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ea0:	e03a      	b.n	8005f18 <_printf_i+0xa8>
 8005ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ea6:	2b15      	cmp	r3, #21
 8005ea8:	d8f6      	bhi.n	8005e98 <_printf_i+0x28>
 8005eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8005eb0 <_printf_i+0x40>)
 8005eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005e99 	.word	0x08005e99
 8005ebc:	08005e99 	.word	0x08005e99
 8005ec0:	08005e99 	.word	0x08005e99
 8005ec4:	08005e99 	.word	0x08005e99
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005e99 	.word	0x08005e99
 8005ed0:	08005e99 	.word	0x08005e99
 8005ed4:	08005e99 	.word	0x08005e99
 8005ed8:	08005e99 	.word	0x08005e99
 8005edc:	0800601b 	.word	0x0800601b
 8005ee0:	08005f47 	.word	0x08005f47
 8005ee4:	08005fd5 	.word	0x08005fd5
 8005ee8:	08005e99 	.word	0x08005e99
 8005eec:	08005e99 	.word	0x08005e99
 8005ef0:	0800603d 	.word	0x0800603d
 8005ef4:	08005e99 	.word	0x08005e99
 8005ef8:	08005f47 	.word	0x08005f47
 8005efc:	08005e99 	.word	0x08005e99
 8005f00:	08005e99 	.word	0x08005e99
 8005f04:	08005fdd 	.word	0x08005fdd
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6032      	str	r2, [r6, #0]
 8005f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e09c      	b.n	8006056 <_printf_i+0x1e6>
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	6031      	str	r1, [r6, #0]
 8005f24:	0606      	lsls	r6, r0, #24
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0xbc>
 8005f28:	681d      	ldr	r5, [r3, #0]
 8005f2a:	e003      	b.n	8005f34 <_printf_i+0xc4>
 8005f2c:	0645      	lsls	r5, r0, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0xb8>
 8005f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	da03      	bge.n	8005f40 <_printf_i+0xd0>
 8005f38:	232d      	movs	r3, #45	@ 0x2d
 8005f3a:	426d      	negs	r5, r5
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f40:	4858      	ldr	r0, [pc, #352]	@ (80060a4 <_printf_i+0x234>)
 8005f42:	230a      	movs	r3, #10
 8005f44:	e011      	b.n	8005f6a <_printf_i+0xfa>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	0608      	lsls	r0, r1, #24
 8005f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f50:	d402      	bmi.n	8005f58 <_printf_i+0xe8>
 8005f52:	0649      	lsls	r1, r1, #25
 8005f54:	bf48      	it	mi
 8005f56:	b2ad      	uxthmi	r5, r5
 8005f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f5a:	4852      	ldr	r0, [pc, #328]	@ (80060a4 <_printf_i+0x234>)
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	bf14      	ite	ne
 8005f60:	230a      	movne	r3, #10
 8005f62:	2308      	moveq	r3, #8
 8005f64:	2100      	movs	r1, #0
 8005f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f6a:	6866      	ldr	r6, [r4, #4]
 8005f6c:	60a6      	str	r6, [r4, #8]
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	db05      	blt.n	8005f7e <_printf_i+0x10e>
 8005f72:	6821      	ldr	r1, [r4, #0]
 8005f74:	432e      	orrs	r6, r5
 8005f76:	f021 0104 	bic.w	r1, r1, #4
 8005f7a:	6021      	str	r1, [r4, #0]
 8005f7c:	d04b      	beq.n	8006016 <_printf_i+0x1a6>
 8005f7e:	4616      	mov	r6, r2
 8005f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f84:	fb03 5711 	mls	r7, r3, r1, r5
 8005f88:	5dc7      	ldrb	r7, [r0, r7]
 8005f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f8e:	462f      	mov	r7, r5
 8005f90:	42bb      	cmp	r3, r7
 8005f92:	460d      	mov	r5, r1
 8005f94:	d9f4      	bls.n	8005f80 <_printf_i+0x110>
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d10b      	bne.n	8005fb2 <_printf_i+0x142>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	07df      	lsls	r7, r3, #31
 8005f9e:	d508      	bpl.n	8005fb2 <_printf_i+0x142>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	6861      	ldr	r1, [r4, #4]
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	bfde      	ittt	le
 8005fa8:	2330      	movle	r3, #48	@ 0x30
 8005faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fb2:	1b92      	subs	r2, r2, r6
 8005fb4:	6122      	str	r2, [r4, #16]
 8005fb6:	f8cd a000 	str.w	sl, [sp]
 8005fba:	464b      	mov	r3, r9
 8005fbc:	aa03      	add	r2, sp, #12
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	f7ff fee7 	bl	8005d94 <_printf_common>
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d14a      	bne.n	8006060 <_printf_i+0x1f0>
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	f043 0320 	orr.w	r3, r3, #32
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	4832      	ldr	r0, [pc, #200]	@ (80060a8 <_printf_i+0x238>)
 8005fde:	2778      	movs	r7, #120	@ 0x78
 8005fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	061f      	lsls	r7, r3, #24
 8005fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fee:	d402      	bmi.n	8005ff6 <_printf_i+0x186>
 8005ff0:	065f      	lsls	r7, r3, #25
 8005ff2:	bf48      	it	mi
 8005ff4:	b2ad      	uxthmi	r5, r5
 8005ff6:	6031      	str	r1, [r6, #0]
 8005ff8:	07d9      	lsls	r1, r3, #31
 8005ffa:	bf44      	itt	mi
 8005ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8006000:	6023      	strmi	r3, [r4, #0]
 8006002:	b11d      	cbz	r5, 800600c <_printf_i+0x19c>
 8006004:	2310      	movs	r3, #16
 8006006:	e7ad      	b.n	8005f64 <_printf_i+0xf4>
 8006008:	4826      	ldr	r0, [pc, #152]	@ (80060a4 <_printf_i+0x234>)
 800600a:	e7e9      	b.n	8005fe0 <_printf_i+0x170>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	f023 0320 	bic.w	r3, r3, #32
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e7f6      	b.n	8006004 <_printf_i+0x194>
 8006016:	4616      	mov	r6, r2
 8006018:	e7bd      	b.n	8005f96 <_printf_i+0x126>
 800601a:	6833      	ldr	r3, [r6, #0]
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	6961      	ldr	r1, [r4, #20]
 8006020:	1d18      	adds	r0, r3, #4
 8006022:	6030      	str	r0, [r6, #0]
 8006024:	062e      	lsls	r6, r5, #24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	d501      	bpl.n	800602e <_printf_i+0x1be>
 800602a:	6019      	str	r1, [r3, #0]
 800602c:	e002      	b.n	8006034 <_printf_i+0x1c4>
 800602e:	0668      	lsls	r0, r5, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0x1ba>
 8006032:	8019      	strh	r1, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	4616      	mov	r6, r2
 800603a:	e7bc      	b.n	8005fb6 <_printf_i+0x146>
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	6032      	str	r2, [r6, #0]
 8006042:	681e      	ldr	r6, [r3, #0]
 8006044:	6862      	ldr	r2, [r4, #4]
 8006046:	2100      	movs	r1, #0
 8006048:	4630      	mov	r0, r6
 800604a:	f7fa f8e1 	bl	8000210 <memchr>
 800604e:	b108      	cbz	r0, 8006054 <_printf_i+0x1e4>
 8006050:	1b80      	subs	r0, r0, r6
 8006052:	6060      	str	r0, [r4, #4]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2300      	movs	r3, #0
 800605a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800605e:	e7aa      	b.n	8005fb6 <_printf_i+0x146>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	4632      	mov	r2, r6
 8006064:	4649      	mov	r1, r9
 8006066:	4640      	mov	r0, r8
 8006068:	47d0      	blx	sl
 800606a:	3001      	adds	r0, #1
 800606c:	d0ad      	beq.n	8005fca <_printf_i+0x15a>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	079b      	lsls	r3, r3, #30
 8006072:	d413      	bmi.n	800609c <_printf_i+0x22c>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e7a6      	b.n	8005fce <_printf_i+0x15e>
 8006080:	2301      	movs	r3, #1
 8006082:	4632      	mov	r2, r6
 8006084:	4649      	mov	r1, r9
 8006086:	4640      	mov	r0, r8
 8006088:	47d0      	blx	sl
 800608a:	3001      	adds	r0, #1
 800608c:	d09d      	beq.n	8005fca <_printf_i+0x15a>
 800608e:	3501      	adds	r5, #1
 8006090:	68e3      	ldr	r3, [r4, #12]
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	1a5b      	subs	r3, r3, r1
 8006096:	42ab      	cmp	r3, r5
 8006098:	dcf2      	bgt.n	8006080 <_printf_i+0x210>
 800609a:	e7eb      	b.n	8006074 <_printf_i+0x204>
 800609c:	2500      	movs	r5, #0
 800609e:	f104 0619 	add.w	r6, r4, #25
 80060a2:	e7f5      	b.n	8006090 <_printf_i+0x220>
 80060a4:	0800862e 	.word	0x0800862e
 80060a8:	0800863f 	.word	0x0800863f

080060ac <std>:
 80060ac:	2300      	movs	r3, #0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	e9c0 3300 	strd	r3, r3, [r0]
 80060b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ba:	6083      	str	r3, [r0, #8]
 80060bc:	8181      	strh	r1, [r0, #12]
 80060be:	6643      	str	r3, [r0, #100]	@ 0x64
 80060c0:	81c2      	strh	r2, [r0, #14]
 80060c2:	6183      	str	r3, [r0, #24]
 80060c4:	4619      	mov	r1, r3
 80060c6:	2208      	movs	r2, #8
 80060c8:	305c      	adds	r0, #92	@ 0x5c
 80060ca:	f000 f94c 	bl	8006366 <memset>
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <std+0x58>)
 80060d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x5c>)
 80060d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x60>)
 80060d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x64>)
 80060dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80060de:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <std+0x68>)
 80060e0:	6224      	str	r4, [r4, #32]
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d006      	beq.n	80060f4 <std+0x48>
 80060e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ea:	4294      	cmp	r4, r2
 80060ec:	d002      	beq.n	80060f4 <std+0x48>
 80060ee:	33d0      	adds	r3, #208	@ 0xd0
 80060f0:	429c      	cmp	r4, r3
 80060f2:	d105      	bne.n	8006100 <std+0x54>
 80060f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	f000 b9b0 	b.w	8006460 <__retarget_lock_init_recursive>
 8006100:	bd10      	pop	{r4, pc}
 8006102:	bf00      	nop
 8006104:	080062e1 	.word	0x080062e1
 8006108:	08006303 	.word	0x08006303
 800610c:	0800633b 	.word	0x0800633b
 8006110:	0800635f 	.word	0x0800635f
 8006114:	20000410 	.word	0x20000410

08006118 <stdio_exit_handler>:
 8006118:	4a02      	ldr	r2, [pc, #8]	@ (8006124 <stdio_exit_handler+0xc>)
 800611a:	4903      	ldr	r1, [pc, #12]	@ (8006128 <stdio_exit_handler+0x10>)
 800611c:	4803      	ldr	r0, [pc, #12]	@ (800612c <stdio_exit_handler+0x14>)
 800611e:	f000 b869 	b.w	80061f4 <_fwalk_sglue>
 8006122:	bf00      	nop
 8006124:	2000003c 	.word	0x2000003c
 8006128:	08007dc5 	.word	0x08007dc5
 800612c:	2000004c 	.word	0x2000004c

08006130 <cleanup_stdio>:
 8006130:	6841      	ldr	r1, [r0, #4]
 8006132:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <cleanup_stdio+0x34>)
 8006134:	4299      	cmp	r1, r3
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	d001      	beq.n	8006140 <cleanup_stdio+0x10>
 800613c:	f001 fe42 	bl	8007dc4 <_fflush_r>
 8006140:	68a1      	ldr	r1, [r4, #8]
 8006142:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <cleanup_stdio+0x38>)
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <cleanup_stdio+0x1e>
 8006148:	4620      	mov	r0, r4
 800614a:	f001 fe3b 	bl	8007dc4 <_fflush_r>
 800614e:	68e1      	ldr	r1, [r4, #12]
 8006150:	4b06      	ldr	r3, [pc, #24]	@ (800616c <cleanup_stdio+0x3c>)
 8006152:	4299      	cmp	r1, r3
 8006154:	d004      	beq.n	8006160 <cleanup_stdio+0x30>
 8006156:	4620      	mov	r0, r4
 8006158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615c:	f001 be32 	b.w	8007dc4 <_fflush_r>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop
 8006164:	20000410 	.word	0x20000410
 8006168:	20000478 	.word	0x20000478
 800616c:	200004e0 	.word	0x200004e0

08006170 <global_stdio_init.part.0>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <global_stdio_init.part.0+0x30>)
 8006174:	4c0b      	ldr	r4, [pc, #44]	@ (80061a4 <global_stdio_init.part.0+0x34>)
 8006176:	4a0c      	ldr	r2, [pc, #48]	@ (80061a8 <global_stdio_init.part.0+0x38>)
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	4620      	mov	r0, r4
 800617c:	2200      	movs	r2, #0
 800617e:	2104      	movs	r1, #4
 8006180:	f7ff ff94 	bl	80060ac <std>
 8006184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006188:	2201      	movs	r2, #1
 800618a:	2109      	movs	r1, #9
 800618c:	f7ff ff8e 	bl	80060ac <std>
 8006190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006194:	2202      	movs	r2, #2
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	2112      	movs	r1, #18
 800619c:	f7ff bf86 	b.w	80060ac <std>
 80061a0:	20000548 	.word	0x20000548
 80061a4:	20000410 	.word	0x20000410
 80061a8:	08006119 	.word	0x08006119

080061ac <__sfp_lock_acquire>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__sfp_lock_acquire+0x8>)
 80061ae:	f000 b958 	b.w	8006462 <__retarget_lock_acquire_recursive>
 80061b2:	bf00      	nop
 80061b4:	20000551 	.word	0x20000551

080061b8 <__sfp_lock_release>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__sfp_lock_release+0x8>)
 80061ba:	f000 b953 	b.w	8006464 <__retarget_lock_release_recursive>
 80061be:	bf00      	nop
 80061c0:	20000551 	.word	0x20000551

080061c4 <__sinit>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	f7ff fff0 	bl	80061ac <__sfp_lock_acquire>
 80061cc:	6a23      	ldr	r3, [r4, #32]
 80061ce:	b11b      	cbz	r3, 80061d8 <__sinit+0x14>
 80061d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d4:	f7ff bff0 	b.w	80061b8 <__sfp_lock_release>
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <__sinit+0x28>)
 80061da:	6223      	str	r3, [r4, #32]
 80061dc:	4b04      	ldr	r3, [pc, #16]	@ (80061f0 <__sinit+0x2c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f5      	bne.n	80061d0 <__sinit+0xc>
 80061e4:	f7ff ffc4 	bl	8006170 <global_stdio_init.part.0>
 80061e8:	e7f2      	b.n	80061d0 <__sinit+0xc>
 80061ea:	bf00      	nop
 80061ec:	08006131 	.word	0x08006131
 80061f0:	20000548 	.word	0x20000548

080061f4 <_fwalk_sglue>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	4607      	mov	r7, r0
 80061fa:	4688      	mov	r8, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	2600      	movs	r6, #0
 8006200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006204:	f1b9 0901 	subs.w	r9, r9, #1
 8006208:	d505      	bpl.n	8006216 <_fwalk_sglue+0x22>
 800620a:	6824      	ldr	r4, [r4, #0]
 800620c:	2c00      	cmp	r4, #0
 800620e:	d1f7      	bne.n	8006200 <_fwalk_sglue+0xc>
 8006210:	4630      	mov	r0, r6
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d907      	bls.n	800622c <_fwalk_sglue+0x38>
 800621c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006220:	3301      	adds	r3, #1
 8006222:	d003      	beq.n	800622c <_fwalk_sglue+0x38>
 8006224:	4629      	mov	r1, r5
 8006226:	4638      	mov	r0, r7
 8006228:	47c0      	blx	r8
 800622a:	4306      	orrs	r6, r0
 800622c:	3568      	adds	r5, #104	@ 0x68
 800622e:	e7e9      	b.n	8006204 <_fwalk_sglue+0x10>

08006230 <sniprintf>:
 8006230:	b40c      	push	{r2, r3}
 8006232:	b530      	push	{r4, r5, lr}
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <sniprintf+0x68>)
 8006236:	1e0c      	subs	r4, r1, #0
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	b09d      	sub	sp, #116	@ 0x74
 800623c:	da08      	bge.n	8006250 <sniprintf+0x20>
 800623e:	238b      	movs	r3, #139	@ 0x8b
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f04f 30ff 	mov.w	r0, #4294967295
 8006246:	b01d      	add	sp, #116	@ 0x74
 8006248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800624c:	b002      	add	sp, #8
 800624e:	4770      	bx	lr
 8006250:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006254:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800625e:	bf14      	ite	ne
 8006260:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006264:	4623      	moveq	r3, r4
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	9307      	str	r3, [sp, #28]
 800626a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800626e:	9002      	str	r0, [sp, #8]
 8006270:	9006      	str	r0, [sp, #24]
 8006272:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006276:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006278:	ab21      	add	r3, sp, #132	@ 0x84
 800627a:	a902      	add	r1, sp, #8
 800627c:	4628      	mov	r0, r5
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	f001 fc20 	bl	8007ac4 <_svfiprintf_r>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	bfbc      	itt	lt
 8006288:	238b      	movlt	r3, #139	@ 0x8b
 800628a:	602b      	strlt	r3, [r5, #0]
 800628c:	2c00      	cmp	r4, #0
 800628e:	d0da      	beq.n	8006246 <sniprintf+0x16>
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e7d6      	b.n	8006246 <sniprintf+0x16>
 8006298:	20000048 	.word	0x20000048

0800629c <siprintf>:
 800629c:	b40e      	push	{r1, r2, r3}
 800629e:	b510      	push	{r4, lr}
 80062a0:	b09d      	sub	sp, #116	@ 0x74
 80062a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	9006      	str	r0, [sp, #24]
 80062a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062ac:	480a      	ldr	r0, [pc, #40]	@ (80062d8 <siprintf+0x3c>)
 80062ae:	9107      	str	r1, [sp, #28]
 80062b0:	9104      	str	r1, [sp, #16]
 80062b2:	490a      	ldr	r1, [pc, #40]	@ (80062dc <siprintf+0x40>)
 80062b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b8:	9105      	str	r1, [sp, #20]
 80062ba:	2400      	movs	r4, #0
 80062bc:	a902      	add	r1, sp, #8
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80062c4:	f001 fbfe 	bl	8007ac4 <_svfiprintf_r>
 80062c8:	9b02      	ldr	r3, [sp, #8]
 80062ca:	701c      	strb	r4, [r3, #0]
 80062cc:	b01d      	add	sp, #116	@ 0x74
 80062ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d2:	b003      	add	sp, #12
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000048 	.word	0x20000048
 80062dc:	ffff0208 	.word	0xffff0208

080062e0 <__sread>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e8:	f000 f86c 	bl	80063c4 <_read_r>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	bfab      	itete	ge
 80062f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062f2:	89a3      	ldrhlt	r3, [r4, #12]
 80062f4:	181b      	addge	r3, r3, r0
 80062f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062fa:	bfac      	ite	ge
 80062fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062fe:	81a3      	strhlt	r3, [r4, #12]
 8006300:	bd10      	pop	{r4, pc}

08006302 <__swrite>:
 8006302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006306:	461f      	mov	r7, r3
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	05db      	lsls	r3, r3, #23
 800630c:	4605      	mov	r5, r0
 800630e:	460c      	mov	r4, r1
 8006310:	4616      	mov	r6, r2
 8006312:	d505      	bpl.n	8006320 <__swrite+0x1e>
 8006314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006318:	2302      	movs	r3, #2
 800631a:	2200      	movs	r2, #0
 800631c:	f000 f840 	bl	80063a0 <_lseek_r>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	4632      	mov	r2, r6
 800632e:	463b      	mov	r3, r7
 8006330:	4628      	mov	r0, r5
 8006332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006336:	f000 b857 	b.w	80063e8 <_write_r>

0800633a <__sseek>:
 800633a:	b510      	push	{r4, lr}
 800633c:	460c      	mov	r4, r1
 800633e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006342:	f000 f82d 	bl	80063a0 <_lseek_r>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	bf15      	itete	ne
 800634c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800634e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006356:	81a3      	strheq	r3, [r4, #12]
 8006358:	bf18      	it	ne
 800635a:	81a3      	strhne	r3, [r4, #12]
 800635c:	bd10      	pop	{r4, pc}

0800635e <__sclose>:
 800635e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006362:	f000 b80d 	b.w	8006380 <_close_r>

08006366 <memset>:
 8006366:	4402      	add	r2, r0
 8006368:	4603      	mov	r3, r0
 800636a:	4293      	cmp	r3, r2
 800636c:	d100      	bne.n	8006370 <memset+0xa>
 800636e:	4770      	bx	lr
 8006370:	f803 1b01 	strb.w	r1, [r3], #1
 8006374:	e7f9      	b.n	800636a <memset+0x4>
	...

08006378 <_localeconv_r>:
 8006378:	4800      	ldr	r0, [pc, #0]	@ (800637c <_localeconv_r+0x4>)
 800637a:	4770      	bx	lr
 800637c:	20000188 	.word	0x20000188

08006380 <_close_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d06      	ldr	r5, [pc, #24]	@ (800639c <_close_r+0x1c>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fb fd65 	bl	8001e5a <_close>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_close_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_close_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	2000054c 	.word	0x2000054c

080063a0 <_lseek_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	@ (80063c0 <_lseek_r+0x20>)
 80063a4:	4604      	mov	r4, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fb fd7a 	bl	8001ea8 <_lseek>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_lseek_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_lseek_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	2000054c 	.word	0x2000054c

080063c4 <_read_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d07      	ldr	r5, [pc, #28]	@ (80063e4 <_read_r+0x20>)
 80063c8:	4604      	mov	r4, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fb fd08 	bl	8001de8 <_read>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_read_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_read_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	2000054c 	.word	0x2000054c

080063e8 <_write_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	@ (8006408 <_write_r+0x20>)
 80063ec:	4604      	mov	r4, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fb fd13 	bl	8001e22 <_write>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_write_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_write_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	2000054c 	.word	0x2000054c

0800640c <__errno>:
 800640c:	4b01      	ldr	r3, [pc, #4]	@ (8006414 <__errno+0x8>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000048 	.word	0x20000048

08006418 <__libc_init_array>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4d0d      	ldr	r5, [pc, #52]	@ (8006450 <__libc_init_array+0x38>)
 800641c:	4c0d      	ldr	r4, [pc, #52]	@ (8006454 <__libc_init_array+0x3c>)
 800641e:	1b64      	subs	r4, r4, r5
 8006420:	10a4      	asrs	r4, r4, #2
 8006422:	2600      	movs	r6, #0
 8006424:	42a6      	cmp	r6, r4
 8006426:	d109      	bne.n	800643c <__libc_init_array+0x24>
 8006428:	4d0b      	ldr	r5, [pc, #44]	@ (8006458 <__libc_init_array+0x40>)
 800642a:	4c0c      	ldr	r4, [pc, #48]	@ (800645c <__libc_init_array+0x44>)
 800642c:	f002 f868 	bl	8008500 <_init>
 8006430:	1b64      	subs	r4, r4, r5
 8006432:	10a4      	asrs	r4, r4, #2
 8006434:	2600      	movs	r6, #0
 8006436:	42a6      	cmp	r6, r4
 8006438:	d105      	bne.n	8006446 <__libc_init_array+0x2e>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006440:	4798      	blx	r3
 8006442:	3601      	adds	r6, #1
 8006444:	e7ee      	b.n	8006424 <__libc_init_array+0xc>
 8006446:	f855 3b04 	ldr.w	r3, [r5], #4
 800644a:	4798      	blx	r3
 800644c:	3601      	adds	r6, #1
 800644e:	e7f2      	b.n	8006436 <__libc_init_array+0x1e>
 8006450:	0800899c 	.word	0x0800899c
 8006454:	0800899c 	.word	0x0800899c
 8006458:	0800899c 	.word	0x0800899c
 800645c:	080089a0 	.word	0x080089a0

08006460 <__retarget_lock_init_recursive>:
 8006460:	4770      	bx	lr

08006462 <__retarget_lock_acquire_recursive>:
 8006462:	4770      	bx	lr

08006464 <__retarget_lock_release_recursive>:
 8006464:	4770      	bx	lr

08006466 <quorem>:
 8006466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6903      	ldr	r3, [r0, #16]
 800646c:	690c      	ldr	r4, [r1, #16]
 800646e:	42a3      	cmp	r3, r4
 8006470:	4607      	mov	r7, r0
 8006472:	db7e      	blt.n	8006572 <quorem+0x10c>
 8006474:	3c01      	subs	r4, #1
 8006476:	f101 0814 	add.w	r8, r1, #20
 800647a:	00a3      	lsls	r3, r4, #2
 800647c:	f100 0514 	add.w	r5, r0, #20
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800648c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006490:	3301      	adds	r3, #1
 8006492:	429a      	cmp	r2, r3
 8006494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006498:	fbb2 f6f3 	udiv	r6, r2, r3
 800649c:	d32e      	bcc.n	80064fc <quorem+0x96>
 800649e:	f04f 0a00 	mov.w	sl, #0
 80064a2:	46c4      	mov	ip, r8
 80064a4:	46ae      	mov	lr, r5
 80064a6:	46d3      	mov	fp, sl
 80064a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ac:	b298      	uxth	r0, r3
 80064ae:	fb06 a000 	mla	r0, r6, r0, sl
 80064b2:	0c02      	lsrs	r2, r0, #16
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	fb06 2303 	mla	r3, r6, r3, r2
 80064ba:	f8de 2000 	ldr.w	r2, [lr]
 80064be:	b280      	uxth	r0, r0
 80064c0:	b292      	uxth	r2, r2
 80064c2:	1a12      	subs	r2, r2, r0
 80064c4:	445a      	add	r2, fp
 80064c6:	f8de 0000 	ldr.w	r0, [lr]
 80064ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064d8:	b292      	uxth	r2, r2
 80064da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064de:	45e1      	cmp	r9, ip
 80064e0:	f84e 2b04 	str.w	r2, [lr], #4
 80064e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064e8:	d2de      	bcs.n	80064a8 <quorem+0x42>
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	58eb      	ldr	r3, [r5, r3]
 80064ee:	b92b      	cbnz	r3, 80064fc <quorem+0x96>
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	3b04      	subs	r3, #4
 80064f4:	429d      	cmp	r5, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	d32f      	bcc.n	800655a <quorem+0xf4>
 80064fa:	613c      	str	r4, [r7, #16]
 80064fc:	4638      	mov	r0, r7
 80064fe:	f001 f97d 	bl	80077fc <__mcmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	db25      	blt.n	8006552 <quorem+0xec>
 8006506:	4629      	mov	r1, r5
 8006508:	2000      	movs	r0, #0
 800650a:	f858 2b04 	ldr.w	r2, [r8], #4
 800650e:	f8d1 c000 	ldr.w	ip, [r1]
 8006512:	fa1f fe82 	uxth.w	lr, r2
 8006516:	fa1f f38c 	uxth.w	r3, ip
 800651a:	eba3 030e 	sub.w	r3, r3, lr
 800651e:	4403      	add	r3, r0
 8006520:	0c12      	lsrs	r2, r2, #16
 8006522:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006526:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800652a:	b29b      	uxth	r3, r3
 800652c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006530:	45c1      	cmp	r9, r8
 8006532:	f841 3b04 	str.w	r3, [r1], #4
 8006536:	ea4f 4022 	mov.w	r0, r2, asr #16
 800653a:	d2e6      	bcs.n	800650a <quorem+0xa4>
 800653c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006544:	b922      	cbnz	r2, 8006550 <quorem+0xea>
 8006546:	3b04      	subs	r3, #4
 8006548:	429d      	cmp	r5, r3
 800654a:	461a      	mov	r2, r3
 800654c:	d30b      	bcc.n	8006566 <quorem+0x100>
 800654e:	613c      	str	r4, [r7, #16]
 8006550:	3601      	adds	r6, #1
 8006552:	4630      	mov	r0, r6
 8006554:	b003      	add	sp, #12
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	3b04      	subs	r3, #4
 800655e:	2a00      	cmp	r2, #0
 8006560:	d1cb      	bne.n	80064fa <quorem+0x94>
 8006562:	3c01      	subs	r4, #1
 8006564:	e7c6      	b.n	80064f4 <quorem+0x8e>
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	3b04      	subs	r3, #4
 800656a:	2a00      	cmp	r2, #0
 800656c:	d1ef      	bne.n	800654e <quorem+0xe8>
 800656e:	3c01      	subs	r4, #1
 8006570:	e7ea      	b.n	8006548 <quorem+0xe2>
 8006572:	2000      	movs	r0, #0
 8006574:	e7ee      	b.n	8006554 <quorem+0xee>
	...

08006578 <_dtoa_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	69c7      	ldr	r7, [r0, #28]
 800657e:	b097      	sub	sp, #92	@ 0x5c
 8006580:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006584:	ec55 4b10 	vmov	r4, r5, d0
 8006588:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800658a:	9107      	str	r1, [sp, #28]
 800658c:	4681      	mov	r9, r0
 800658e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006590:	9311      	str	r3, [sp, #68]	@ 0x44
 8006592:	b97f      	cbnz	r7, 80065b4 <_dtoa_r+0x3c>
 8006594:	2010      	movs	r0, #16
 8006596:	f000 fe09 	bl	80071ac <malloc>
 800659a:	4602      	mov	r2, r0
 800659c:	f8c9 001c 	str.w	r0, [r9, #28]
 80065a0:	b920      	cbnz	r0, 80065ac <_dtoa_r+0x34>
 80065a2:	4ba9      	ldr	r3, [pc, #676]	@ (8006848 <_dtoa_r+0x2d0>)
 80065a4:	21ef      	movs	r1, #239	@ 0xef
 80065a6:	48a9      	ldr	r0, [pc, #676]	@ (800684c <_dtoa_r+0x2d4>)
 80065a8:	f001 fc6c 	bl	8007e84 <__assert_func>
 80065ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065b0:	6007      	str	r7, [r0, #0]
 80065b2:	60c7      	str	r7, [r0, #12]
 80065b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	b159      	cbz	r1, 80065d4 <_dtoa_r+0x5c>
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	604a      	str	r2, [r1, #4]
 80065c0:	2301      	movs	r3, #1
 80065c2:	4093      	lsls	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
 80065c6:	4648      	mov	r0, r9
 80065c8:	f000 fee6 	bl	8007398 <_Bfree>
 80065cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	1e2b      	subs	r3, r5, #0
 80065d6:	bfb9      	ittee	lt
 80065d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065dc:	9305      	strlt	r3, [sp, #20]
 80065de:	2300      	movge	r3, #0
 80065e0:	6033      	strge	r3, [r6, #0]
 80065e2:	9f05      	ldr	r7, [sp, #20]
 80065e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006850 <_dtoa_r+0x2d8>)
 80065e6:	bfbc      	itt	lt
 80065e8:	2201      	movlt	r2, #1
 80065ea:	6032      	strlt	r2, [r6, #0]
 80065ec:	43bb      	bics	r3, r7
 80065ee:	d112      	bne.n	8006616 <_dtoa_r+0x9e>
 80065f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065fc:	4323      	orrs	r3, r4
 80065fe:	f000 855a 	beq.w	80070b6 <_dtoa_r+0xb3e>
 8006602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006604:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006864 <_dtoa_r+0x2ec>
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 855c 	beq.w	80070c6 <_dtoa_r+0xb4e>
 800660e:	f10a 0303 	add.w	r3, sl, #3
 8006612:	f000 bd56 	b.w	80070c2 <_dtoa_r+0xb4a>
 8006616:	ed9d 7b04 	vldr	d7, [sp, #16]
 800661a:	2200      	movs	r2, #0
 800661c:	ec51 0b17 	vmov	r0, r1, d7
 8006620:	2300      	movs	r3, #0
 8006622:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006626:	f7fa fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800662a:	4680      	mov	r8, r0
 800662c:	b158      	cbz	r0, 8006646 <_dtoa_r+0xce>
 800662e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006630:	2301      	movs	r3, #1
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006636:	b113      	cbz	r3, 800663e <_dtoa_r+0xc6>
 8006638:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800663a:	4b86      	ldr	r3, [pc, #536]	@ (8006854 <_dtoa_r+0x2dc>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006868 <_dtoa_r+0x2f0>
 8006642:	f000 bd40 	b.w	80070c6 <_dtoa_r+0xb4e>
 8006646:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800664a:	aa14      	add	r2, sp, #80	@ 0x50
 800664c:	a915      	add	r1, sp, #84	@ 0x54
 800664e:	4648      	mov	r0, r9
 8006650:	f001 f984 	bl	800795c <__d2b>
 8006654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006658:	9002      	str	r0, [sp, #8]
 800665a:	2e00      	cmp	r6, #0
 800665c:	d078      	beq.n	8006750 <_dtoa_r+0x1d8>
 800665e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006660:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800666c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006678:	4619      	mov	r1, r3
 800667a:	2200      	movs	r2, #0
 800667c:	4b76      	ldr	r3, [pc, #472]	@ (8006858 <_dtoa_r+0x2e0>)
 800667e:	f7f9 fe23 	bl	80002c8 <__aeabi_dsub>
 8006682:	a36b      	add	r3, pc, #428	@ (adr r3, 8006830 <_dtoa_r+0x2b8>)
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f7f9 ffd6 	bl	8000638 <__aeabi_dmul>
 800668c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006838 <_dtoa_r+0x2c0>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fe1b 	bl	80002cc <__adddf3>
 8006696:	4604      	mov	r4, r0
 8006698:	4630      	mov	r0, r6
 800669a:	460d      	mov	r5, r1
 800669c:	f7f9 ff62 	bl	8000564 <__aeabi_i2d>
 80066a0:	a367      	add	r3, pc, #412	@ (adr r3, 8006840 <_dtoa_r+0x2c8>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ffc7 	bl	8000638 <__aeabi_dmul>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7f9 fe0b 	bl	80002cc <__adddf3>
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	f7fa fa6d 	bl	8000b98 <__aeabi_d2iz>
 80066be:	2200      	movs	r2, #0
 80066c0:	4607      	mov	r7, r0
 80066c2:	2300      	movs	r3, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7fa fa28 	bl	8000b1c <__aeabi_dcmplt>
 80066cc:	b140      	cbz	r0, 80066e0 <_dtoa_r+0x168>
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7f9 ff48 	bl	8000564 <__aeabi_i2d>
 80066d4:	4622      	mov	r2, r4
 80066d6:	462b      	mov	r3, r5
 80066d8:	f7fa fa16 	bl	8000b08 <__aeabi_dcmpeq>
 80066dc:	b900      	cbnz	r0, 80066e0 <_dtoa_r+0x168>
 80066de:	3f01      	subs	r7, #1
 80066e0:	2f16      	cmp	r7, #22
 80066e2:	d852      	bhi.n	800678a <_dtoa_r+0x212>
 80066e4:	4b5d      	ldr	r3, [pc, #372]	@ (800685c <_dtoa_r+0x2e4>)
 80066e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066f2:	f7fa fa13 	bl	8000b1c <__aeabi_dcmplt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d049      	beq.n	800678e <_dtoa_r+0x216>
 80066fa:	3f01      	subs	r7, #1
 80066fc:	2300      	movs	r3, #0
 80066fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006702:	1b9b      	subs	r3, r3, r6
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	bf45      	ittet	mi
 8006708:	f1c3 0301 	rsbmi	r3, r3, #1
 800670c:	9300      	strmi	r3, [sp, #0]
 800670e:	2300      	movpl	r3, #0
 8006710:	2300      	movmi	r3, #0
 8006712:	9206      	str	r2, [sp, #24]
 8006714:	bf54      	ite	pl
 8006716:	9300      	strpl	r3, [sp, #0]
 8006718:	9306      	strmi	r3, [sp, #24]
 800671a:	2f00      	cmp	r7, #0
 800671c:	db39      	blt.n	8006792 <_dtoa_r+0x21a>
 800671e:	9b06      	ldr	r3, [sp, #24]
 8006720:	970d      	str	r7, [sp, #52]	@ 0x34
 8006722:	443b      	add	r3, r7
 8006724:	9306      	str	r3, [sp, #24]
 8006726:	2300      	movs	r3, #0
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	2b09      	cmp	r3, #9
 800672e:	d863      	bhi.n	80067f8 <_dtoa_r+0x280>
 8006730:	2b05      	cmp	r3, #5
 8006732:	bfc4      	itt	gt
 8006734:	3b04      	subgt	r3, #4
 8006736:	9307      	strgt	r3, [sp, #28]
 8006738:	9b07      	ldr	r3, [sp, #28]
 800673a:	f1a3 0302 	sub.w	r3, r3, #2
 800673e:	bfcc      	ite	gt
 8006740:	2400      	movgt	r4, #0
 8006742:	2401      	movle	r4, #1
 8006744:	2b03      	cmp	r3, #3
 8006746:	d863      	bhi.n	8006810 <_dtoa_r+0x298>
 8006748:	e8df f003 	tbb	[pc, r3]
 800674c:	2b375452 	.word	0x2b375452
 8006750:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006754:	441e      	add	r6, r3
 8006756:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800675a:	2b20      	cmp	r3, #32
 800675c:	bfc1      	itttt	gt
 800675e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006762:	409f      	lslgt	r7, r3
 8006764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006768:	fa24 f303 	lsrgt.w	r3, r4, r3
 800676c:	bfd6      	itet	le
 800676e:	f1c3 0320 	rsble	r3, r3, #32
 8006772:	ea47 0003 	orrgt.w	r0, r7, r3
 8006776:	fa04 f003 	lslle.w	r0, r4, r3
 800677a:	f7f9 fee3 	bl	8000544 <__aeabi_ui2d>
 800677e:	2201      	movs	r2, #1
 8006780:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006784:	3e01      	subs	r6, #1
 8006786:	9212      	str	r2, [sp, #72]	@ 0x48
 8006788:	e776      	b.n	8006678 <_dtoa_r+0x100>
 800678a:	2301      	movs	r3, #1
 800678c:	e7b7      	b.n	80066fe <_dtoa_r+0x186>
 800678e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006790:	e7b6      	b.n	8006700 <_dtoa_r+0x188>
 8006792:	9b00      	ldr	r3, [sp, #0]
 8006794:	1bdb      	subs	r3, r3, r7
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	427b      	negs	r3, r7
 800679a:	9308      	str	r3, [sp, #32]
 800679c:	2300      	movs	r3, #0
 800679e:	930d      	str	r3, [sp, #52]	@ 0x34
 80067a0:	e7c3      	b.n	800672a <_dtoa_r+0x1b2>
 80067a2:	2301      	movs	r3, #1
 80067a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067a8:	eb07 0b03 	add.w	fp, r7, r3
 80067ac:	f10b 0301 	add.w	r3, fp, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	bfb8      	it	lt
 80067b6:	2301      	movlt	r3, #1
 80067b8:	e006      	b.n	80067c8 <_dtoa_r+0x250>
 80067ba:	2301      	movs	r3, #1
 80067bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd28      	ble.n	8006816 <_dtoa_r+0x29e>
 80067c4:	469b      	mov	fp, r3
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80067cc:	2100      	movs	r1, #0
 80067ce:	2204      	movs	r2, #4
 80067d0:	f102 0514 	add.w	r5, r2, #20
 80067d4:	429d      	cmp	r5, r3
 80067d6:	d926      	bls.n	8006826 <_dtoa_r+0x2ae>
 80067d8:	6041      	str	r1, [r0, #4]
 80067da:	4648      	mov	r0, r9
 80067dc:	f000 fd9c 	bl	8007318 <_Balloc>
 80067e0:	4682      	mov	sl, r0
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d142      	bne.n	800686c <_dtoa_r+0x2f4>
 80067e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006860 <_dtoa_r+0x2e8>)
 80067e8:	4602      	mov	r2, r0
 80067ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80067ee:	e6da      	b.n	80065a6 <_dtoa_r+0x2e>
 80067f0:	2300      	movs	r3, #0
 80067f2:	e7e3      	b.n	80067bc <_dtoa_r+0x244>
 80067f4:	2300      	movs	r3, #0
 80067f6:	e7d5      	b.n	80067a4 <_dtoa_r+0x22c>
 80067f8:	2401      	movs	r4, #1
 80067fa:	2300      	movs	r3, #0
 80067fc:	9307      	str	r3, [sp, #28]
 80067fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006800:	f04f 3bff 	mov.w	fp, #4294967295
 8006804:	2200      	movs	r2, #0
 8006806:	f8cd b00c 	str.w	fp, [sp, #12]
 800680a:	2312      	movs	r3, #18
 800680c:	920c      	str	r2, [sp, #48]	@ 0x30
 800680e:	e7db      	b.n	80067c8 <_dtoa_r+0x250>
 8006810:	2301      	movs	r3, #1
 8006812:	9309      	str	r3, [sp, #36]	@ 0x24
 8006814:	e7f4      	b.n	8006800 <_dtoa_r+0x288>
 8006816:	f04f 0b01 	mov.w	fp, #1
 800681a:	f8cd b00c 	str.w	fp, [sp, #12]
 800681e:	465b      	mov	r3, fp
 8006820:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006824:	e7d0      	b.n	80067c8 <_dtoa_r+0x250>
 8006826:	3101      	adds	r1, #1
 8006828:	0052      	lsls	r2, r2, #1
 800682a:	e7d1      	b.n	80067d0 <_dtoa_r+0x258>
 800682c:	f3af 8000 	nop.w
 8006830:	636f4361 	.word	0x636f4361
 8006834:	3fd287a7 	.word	0x3fd287a7
 8006838:	8b60c8b3 	.word	0x8b60c8b3
 800683c:	3fc68a28 	.word	0x3fc68a28
 8006840:	509f79fb 	.word	0x509f79fb
 8006844:	3fd34413 	.word	0x3fd34413
 8006848:	0800865d 	.word	0x0800865d
 800684c:	08008674 	.word	0x08008674
 8006850:	7ff00000 	.word	0x7ff00000
 8006854:	0800862d 	.word	0x0800862d
 8006858:	3ff80000 	.word	0x3ff80000
 800685c:	080087c8 	.word	0x080087c8
 8006860:	080086cc 	.word	0x080086cc
 8006864:	08008659 	.word	0x08008659
 8006868:	0800862c 	.word	0x0800862c
 800686c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006870:	6018      	str	r0, [r3, #0]
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	2b0e      	cmp	r3, #14
 8006876:	f200 80a1 	bhi.w	80069bc <_dtoa_r+0x444>
 800687a:	2c00      	cmp	r4, #0
 800687c:	f000 809e 	beq.w	80069bc <_dtoa_r+0x444>
 8006880:	2f00      	cmp	r7, #0
 8006882:	dd33      	ble.n	80068ec <_dtoa_r+0x374>
 8006884:	4b9c      	ldr	r3, [pc, #624]	@ (8006af8 <_dtoa_r+0x580>)
 8006886:	f007 020f 	and.w	r2, r7, #15
 800688a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800688e:	ed93 7b00 	vldr	d7, [r3]
 8006892:	05f8      	lsls	r0, r7, #23
 8006894:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800689c:	d516      	bpl.n	80068cc <_dtoa_r+0x354>
 800689e:	4b97      	ldr	r3, [pc, #604]	@ (8006afc <_dtoa_r+0x584>)
 80068a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a8:	f7f9 fff0 	bl	800088c <__aeabi_ddiv>
 80068ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b0:	f004 040f 	and.w	r4, r4, #15
 80068b4:	2603      	movs	r6, #3
 80068b6:	4d91      	ldr	r5, [pc, #580]	@ (8006afc <_dtoa_r+0x584>)
 80068b8:	b954      	cbnz	r4, 80068d0 <_dtoa_r+0x358>
 80068ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c2:	f7f9 ffe3 	bl	800088c <__aeabi_ddiv>
 80068c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ca:	e028      	b.n	800691e <_dtoa_r+0x3a6>
 80068cc:	2602      	movs	r6, #2
 80068ce:	e7f2      	b.n	80068b6 <_dtoa_r+0x33e>
 80068d0:	07e1      	lsls	r1, r4, #31
 80068d2:	d508      	bpl.n	80068e6 <_dtoa_r+0x36e>
 80068d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068dc:	f7f9 feac 	bl	8000638 <__aeabi_dmul>
 80068e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068e4:	3601      	adds	r6, #1
 80068e6:	1064      	asrs	r4, r4, #1
 80068e8:	3508      	adds	r5, #8
 80068ea:	e7e5      	b.n	80068b8 <_dtoa_r+0x340>
 80068ec:	f000 80af 	beq.w	8006a4e <_dtoa_r+0x4d6>
 80068f0:	427c      	negs	r4, r7
 80068f2:	4b81      	ldr	r3, [pc, #516]	@ (8006af8 <_dtoa_r+0x580>)
 80068f4:	4d81      	ldr	r5, [pc, #516]	@ (8006afc <_dtoa_r+0x584>)
 80068f6:	f004 020f 	and.w	r2, r4, #15
 80068fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006906:	f7f9 fe97 	bl	8000638 <__aeabi_dmul>
 800690a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690e:	1124      	asrs	r4, r4, #4
 8006910:	2300      	movs	r3, #0
 8006912:	2602      	movs	r6, #2
 8006914:	2c00      	cmp	r4, #0
 8006916:	f040 808f 	bne.w	8006a38 <_dtoa_r+0x4c0>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1d3      	bne.n	80068c6 <_dtoa_r+0x34e>
 800691e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006920:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8094 	beq.w	8006a52 <_dtoa_r+0x4da>
 800692a:	4b75      	ldr	r3, [pc, #468]	@ (8006b00 <_dtoa_r+0x588>)
 800692c:	2200      	movs	r2, #0
 800692e:	4620      	mov	r0, r4
 8006930:	4629      	mov	r1, r5
 8006932:	f7fa f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8006936:	2800      	cmp	r0, #0
 8006938:	f000 808b 	beq.w	8006a52 <_dtoa_r+0x4da>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8087 	beq.w	8006a52 <_dtoa_r+0x4da>
 8006944:	f1bb 0f00 	cmp.w	fp, #0
 8006948:	dd34      	ble.n	80069b4 <_dtoa_r+0x43c>
 800694a:	4620      	mov	r0, r4
 800694c:	4b6d      	ldr	r3, [pc, #436]	@ (8006b04 <_dtoa_r+0x58c>)
 800694e:	2200      	movs	r2, #0
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fe71 	bl	8000638 <__aeabi_dmul>
 8006956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800695a:	f107 38ff 	add.w	r8, r7, #4294967295
 800695e:	3601      	adds	r6, #1
 8006960:	465c      	mov	r4, fp
 8006962:	4630      	mov	r0, r6
 8006964:	f7f9 fdfe 	bl	8000564 <__aeabi_i2d>
 8006968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696c:	f7f9 fe64 	bl	8000638 <__aeabi_dmul>
 8006970:	4b65      	ldr	r3, [pc, #404]	@ (8006b08 <_dtoa_r+0x590>)
 8006972:	2200      	movs	r2, #0
 8006974:	f7f9 fcaa 	bl	80002cc <__adddf3>
 8006978:	4605      	mov	r5, r0
 800697a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800697e:	2c00      	cmp	r4, #0
 8006980:	d16a      	bne.n	8006a58 <_dtoa_r+0x4e0>
 8006982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006986:	4b61      	ldr	r3, [pc, #388]	@ (8006b0c <_dtoa_r+0x594>)
 8006988:	2200      	movs	r2, #0
 800698a:	f7f9 fc9d 	bl	80002c8 <__aeabi_dsub>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006996:	462a      	mov	r2, r5
 8006998:	4633      	mov	r3, r6
 800699a:	f7fa f8dd 	bl	8000b58 <__aeabi_dcmpgt>
 800699e:	2800      	cmp	r0, #0
 80069a0:	f040 8298 	bne.w	8006ed4 <_dtoa_r+0x95c>
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	462a      	mov	r2, r5
 80069aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069ae:	f7fa f8b5 	bl	8000b1c <__aeabi_dcmplt>
 80069b2:	bb38      	cbnz	r0, 8006a04 <_dtoa_r+0x48c>
 80069b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80069b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f2c0 8157 	blt.w	8006c72 <_dtoa_r+0x6fa>
 80069c4:	2f0e      	cmp	r7, #14
 80069c6:	f300 8154 	bgt.w	8006c72 <_dtoa_r+0x6fa>
 80069ca:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <_dtoa_r+0x580>)
 80069cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069d0:	ed93 7b00 	vldr	d7, [r3]
 80069d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	ed8d 7b00 	vstr	d7, [sp]
 80069dc:	f280 80e5 	bge.w	8006baa <_dtoa_r+0x632>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f300 80e1 	bgt.w	8006baa <_dtoa_r+0x632>
 80069e8:	d10c      	bne.n	8006a04 <_dtoa_r+0x48c>
 80069ea:	4b48      	ldr	r3, [pc, #288]	@ (8006b0c <_dtoa_r+0x594>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	ec51 0b17 	vmov	r0, r1, d7
 80069f2:	f7f9 fe21 	bl	8000638 <__aeabi_dmul>
 80069f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fa:	f7fa f8a3 	bl	8000b44 <__aeabi_dcmpge>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f000 8266 	beq.w	8006ed0 <_dtoa_r+0x958>
 8006a04:	2400      	movs	r4, #0
 8006a06:	4625      	mov	r5, r4
 8006a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a0a:	4656      	mov	r6, sl
 8006a0c:	ea6f 0803 	mvn.w	r8, r3
 8006a10:	2700      	movs	r7, #0
 8006a12:	4621      	mov	r1, r4
 8006a14:	4648      	mov	r0, r9
 8006a16:	f000 fcbf 	bl	8007398 <_Bfree>
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	f000 80bd 	beq.w	8006b9a <_dtoa_r+0x622>
 8006a20:	b12f      	cbz	r7, 8006a2e <_dtoa_r+0x4b6>
 8006a22:	42af      	cmp	r7, r5
 8006a24:	d003      	beq.n	8006a2e <_dtoa_r+0x4b6>
 8006a26:	4639      	mov	r1, r7
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 fcb5 	bl	8007398 <_Bfree>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4648      	mov	r0, r9
 8006a32:	f000 fcb1 	bl	8007398 <_Bfree>
 8006a36:	e0b0      	b.n	8006b9a <_dtoa_r+0x622>
 8006a38:	07e2      	lsls	r2, r4, #31
 8006a3a:	d505      	bpl.n	8006a48 <_dtoa_r+0x4d0>
 8006a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a40:	f7f9 fdfa 	bl	8000638 <__aeabi_dmul>
 8006a44:	3601      	adds	r6, #1
 8006a46:	2301      	movs	r3, #1
 8006a48:	1064      	asrs	r4, r4, #1
 8006a4a:	3508      	adds	r5, #8
 8006a4c:	e762      	b.n	8006914 <_dtoa_r+0x39c>
 8006a4e:	2602      	movs	r6, #2
 8006a50:	e765      	b.n	800691e <_dtoa_r+0x3a6>
 8006a52:	9c03      	ldr	r4, [sp, #12]
 8006a54:	46b8      	mov	r8, r7
 8006a56:	e784      	b.n	8006962 <_dtoa_r+0x3ea>
 8006a58:	4b27      	ldr	r3, [pc, #156]	@ (8006af8 <_dtoa_r+0x580>)
 8006a5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a64:	4454      	add	r4, sl
 8006a66:	2900      	cmp	r1, #0
 8006a68:	d054      	beq.n	8006b14 <_dtoa_r+0x59c>
 8006a6a:	4929      	ldr	r1, [pc, #164]	@ (8006b10 <_dtoa_r+0x598>)
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7f9 ff0d 	bl	800088c <__aeabi_ddiv>
 8006a72:	4633      	mov	r3, r6
 8006a74:	462a      	mov	r2, r5
 8006a76:	f7f9 fc27 	bl	80002c8 <__aeabi_dsub>
 8006a7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a7e:	4656      	mov	r6, sl
 8006a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a84:	f7fa f888 	bl	8000b98 <__aeabi_d2iz>
 8006a88:	4605      	mov	r5, r0
 8006a8a:	f7f9 fd6b 	bl	8000564 <__aeabi_i2d>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a96:	f7f9 fc17 	bl	80002c8 <__aeabi_dsub>
 8006a9a:	3530      	adds	r5, #48	@ 0x30
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aa4:	f806 5b01 	strb.w	r5, [r6], #1
 8006aa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006aac:	f7fa f836 	bl	8000b1c <__aeabi_dcmplt>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d172      	bne.n	8006b9a <_dtoa_r+0x622>
 8006ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab8:	4911      	ldr	r1, [pc, #68]	@ (8006b00 <_dtoa_r+0x588>)
 8006aba:	2000      	movs	r0, #0
 8006abc:	f7f9 fc04 	bl	80002c8 <__aeabi_dsub>
 8006ac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ac4:	f7fa f82a 	bl	8000b1c <__aeabi_dcmplt>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f040 80b4 	bne.w	8006c36 <_dtoa_r+0x6be>
 8006ace:	42a6      	cmp	r6, r4
 8006ad0:	f43f af70 	beq.w	80069b4 <_dtoa_r+0x43c>
 8006ad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <_dtoa_r+0x58c>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	f7f9 fdac 	bl	8000638 <__aeabi_dmul>
 8006ae0:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <_dtoa_r+0x58c>)
 8006ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aec:	f7f9 fda4 	bl	8000638 <__aeabi_dmul>
 8006af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af4:	e7c4      	b.n	8006a80 <_dtoa_r+0x508>
 8006af6:	bf00      	nop
 8006af8:	080087c8 	.word	0x080087c8
 8006afc:	080087a0 	.word	0x080087a0
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	40240000 	.word	0x40240000
 8006b08:	401c0000 	.word	0x401c0000
 8006b0c:	40140000 	.word	0x40140000
 8006b10:	3fe00000 	.word	0x3fe00000
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	f7f9 fd8e 	bl	8000638 <__aeabi_dmul>
 8006b1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b20:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b22:	4656      	mov	r6, sl
 8006b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b28:	f7fa f836 	bl	8000b98 <__aeabi_d2iz>
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	f7f9 fd19 	bl	8000564 <__aeabi_i2d>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b3a:	f7f9 fbc5 	bl	80002c8 <__aeabi_dsub>
 8006b3e:	3530      	adds	r5, #48	@ 0x30
 8006b40:	f806 5b01 	strb.w	r5, [r6], #1
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	d124      	bne.n	8006b9e <_dtoa_r+0x626>
 8006b54:	4baf      	ldr	r3, [pc, #700]	@ (8006e14 <_dtoa_r+0x89c>)
 8006b56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b5a:	f7f9 fbb7 	bl	80002cc <__adddf3>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	f7f9 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d163      	bne.n	8006c36 <_dtoa_r+0x6be>
 8006b6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b72:	49a8      	ldr	r1, [pc, #672]	@ (8006e14 <_dtoa_r+0x89c>)
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7f9 fba7 	bl	80002c8 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b82:	f7f9 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f af14 	beq.w	80069b4 <_dtoa_r+0x43c>
 8006b8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b8e:	1e73      	subs	r3, r6, #1
 8006b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b96:	2b30      	cmp	r3, #48	@ 0x30
 8006b98:	d0f8      	beq.n	8006b8c <_dtoa_r+0x614>
 8006b9a:	4647      	mov	r7, r8
 8006b9c:	e03b      	b.n	8006c16 <_dtoa_r+0x69e>
 8006b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8006e18 <_dtoa_r+0x8a0>)
 8006ba0:	f7f9 fd4a 	bl	8000638 <__aeabi_dmul>
 8006ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba8:	e7bc      	b.n	8006b24 <_dtoa_r+0x5ac>
 8006baa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006bae:	4656      	mov	r6, sl
 8006bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 fe68 	bl	800088c <__aeabi_ddiv>
 8006bbc:	f7f9 ffec 	bl	8000b98 <__aeabi_d2iz>
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	f7f9 fccf 	bl	8000564 <__aeabi_i2d>
 8006bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bca:	f7f9 fd35 	bl	8000638 <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bda:	f7f9 fb75 	bl	80002c8 <__aeabi_dsub>
 8006bde:	f806 4b01 	strb.w	r4, [r6], #1
 8006be2:	9d03      	ldr	r5, [sp, #12]
 8006be4:	eba6 040a 	sub.w	r4, r6, sl
 8006be8:	42a5      	cmp	r5, r4
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	d133      	bne.n	8006c58 <_dtoa_r+0x6e0>
 8006bf0:	f7f9 fb6c 	bl	80002cc <__adddf3>
 8006bf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	f7f9 ffac 	bl	8000b58 <__aeabi_dcmpgt>
 8006c00:	b9c0      	cbnz	r0, 8006c34 <_dtoa_r+0x6bc>
 8006c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006c0e:	b110      	cbz	r0, 8006c16 <_dtoa_r+0x69e>
 8006c10:	f018 0f01 	tst.w	r8, #1
 8006c14:	d10e      	bne.n	8006c34 <_dtoa_r+0x6bc>
 8006c16:	9902      	ldr	r1, [sp, #8]
 8006c18:	4648      	mov	r0, r9
 8006c1a:	f000 fbbd 	bl	8007398 <_Bfree>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	7033      	strb	r3, [r6, #0]
 8006c22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c24:	3701      	adds	r7, #1
 8006c26:	601f      	str	r7, [r3, #0]
 8006c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 824b 	beq.w	80070c6 <_dtoa_r+0xb4e>
 8006c30:	601e      	str	r6, [r3, #0]
 8006c32:	e248      	b.n	80070c6 <_dtoa_r+0xb4e>
 8006c34:	46b8      	mov	r8, r7
 8006c36:	4633      	mov	r3, r6
 8006c38:	461e      	mov	r6, r3
 8006c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c3e:	2a39      	cmp	r2, #57	@ 0x39
 8006c40:	d106      	bne.n	8006c50 <_dtoa_r+0x6d8>
 8006c42:	459a      	cmp	sl, r3
 8006c44:	d1f8      	bne.n	8006c38 <_dtoa_r+0x6c0>
 8006c46:	2230      	movs	r2, #48	@ 0x30
 8006c48:	f108 0801 	add.w	r8, r8, #1
 8006c4c:	f88a 2000 	strb.w	r2, [sl]
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	3201      	adds	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e7a0      	b.n	8006b9a <_dtoa_r+0x622>
 8006c58:	4b6f      	ldr	r3, [pc, #444]	@ (8006e18 <_dtoa_r+0x8a0>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	4604      	mov	r4, r0
 8006c66:	460d      	mov	r5, r1
 8006c68:	f7f9 ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d09f      	beq.n	8006bb0 <_dtoa_r+0x638>
 8006c70:	e7d1      	b.n	8006c16 <_dtoa_r+0x69e>
 8006c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	f000 80ea 	beq.w	8006e4e <_dtoa_r+0x8d6>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	2a01      	cmp	r2, #1
 8006c7e:	f300 80cd 	bgt.w	8006e1c <_dtoa_r+0x8a4>
 8006c82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	f000 80c1 	beq.w	8006e0c <_dtoa_r+0x894>
 8006c8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c8e:	9c08      	ldr	r4, [sp, #32]
 8006c90:	9e00      	ldr	r6, [sp, #0]
 8006c92:	9a00      	ldr	r2, [sp, #0]
 8006c94:	441a      	add	r2, r3
 8006c96:	9200      	str	r2, [sp, #0]
 8006c98:	9a06      	ldr	r2, [sp, #24]
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	441a      	add	r2, r3
 8006c9e:	4648      	mov	r0, r9
 8006ca0:	9206      	str	r2, [sp, #24]
 8006ca2:	f000 fc2d 	bl	8007500 <__i2b>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b166      	cbz	r6, 8006cc4 <_dtoa_r+0x74c>
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd09      	ble.n	8006cc4 <_dtoa_r+0x74c>
 8006cb0:	42b3      	cmp	r3, r6
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	bfa8      	it	ge
 8006cb6:	4633      	movge	r3, r6
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	9200      	str	r2, [sp, #0]
 8006cbc:	9a06      	ldr	r2, [sp, #24]
 8006cbe:	1af6      	subs	r6, r6, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	9306      	str	r3, [sp, #24]
 8006cc4:	9b08      	ldr	r3, [sp, #32]
 8006cc6:	b30b      	cbz	r3, 8006d0c <_dtoa_r+0x794>
 8006cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80c6 	beq.w	8006e5c <_dtoa_r+0x8e4>
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	f000 80c0 	beq.w	8006e56 <_dtoa_r+0x8de>
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4648      	mov	r0, r9
 8006cdc:	f000 fcc8 	bl	8007670 <__pow5mult>
 8006ce0:	9a02      	ldr	r2, [sp, #8]
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	f000 fc20 	bl	800752c <__multiply>
 8006cec:	9902      	ldr	r1, [sp, #8]
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4648      	mov	r0, r9
 8006cf2:	f000 fb51 	bl	8007398 <_Bfree>
 8006cf6:	9b08      	ldr	r3, [sp, #32]
 8006cf8:	1b1b      	subs	r3, r3, r4
 8006cfa:	9308      	str	r3, [sp, #32]
 8006cfc:	f000 80b1 	beq.w	8006e62 <_dtoa_r+0x8ea>
 8006d00:	9a08      	ldr	r2, [sp, #32]
 8006d02:	4641      	mov	r1, r8
 8006d04:	4648      	mov	r0, r9
 8006d06:	f000 fcb3 	bl	8007670 <__pow5mult>
 8006d0a:	9002      	str	r0, [sp, #8]
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f000 fbf6 	bl	8007500 <__i2b>
 8006d14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d16:	4604      	mov	r4, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 81d8 	beq.w	80070ce <_dtoa_r+0xb56>
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4601      	mov	r1, r0
 8006d22:	4648      	mov	r0, r9
 8006d24:	f000 fca4 	bl	8007670 <__pow5mult>
 8006d28:	9b07      	ldr	r3, [sp, #28]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	f300 809f 	bgt.w	8006e70 <_dtoa_r+0x8f8>
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 8097 	bne.w	8006e68 <_dtoa_r+0x8f0>
 8006d3a:	9b05      	ldr	r3, [sp, #20]
 8006d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8093 	bne.w	8006e6c <_dtoa_r+0x8f4>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d4c:	0d1b      	lsrs	r3, r3, #20
 8006d4e:	051b      	lsls	r3, r3, #20
 8006d50:	b133      	cbz	r3, 8006d60 <_dtoa_r+0x7e8>
 8006d52:	9b00      	ldr	r3, [sp, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	9306      	str	r3, [sp, #24]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	9308      	str	r3, [sp, #32]
 8006d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 81b8 	beq.w	80070da <_dtoa_r+0xb62>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d70:	6918      	ldr	r0, [r3, #16]
 8006d72:	f000 fb79 	bl	8007468 <__hi0bits>
 8006d76:	f1c0 0020 	rsb	r0, r0, #32
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	4418      	add	r0, r3
 8006d7e:	f010 001f 	ands.w	r0, r0, #31
 8006d82:	f000 8082 	beq.w	8006e8a <_dtoa_r+0x912>
 8006d86:	f1c0 0320 	rsb	r3, r0, #32
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	dd73      	ble.n	8006e76 <_dtoa_r+0x8fe>
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	f1c0 001c 	rsb	r0, r0, #28
 8006d94:	4403      	add	r3, r0
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	9b06      	ldr	r3, [sp, #24]
 8006d9a:	4403      	add	r3, r0
 8006d9c:	4406      	add	r6, r0
 8006d9e:	9306      	str	r3, [sp, #24]
 8006da0:	9b00      	ldr	r3, [sp, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	dd05      	ble.n	8006db2 <_dtoa_r+0x83a>
 8006da6:	9902      	ldr	r1, [sp, #8]
 8006da8:	461a      	mov	r2, r3
 8006daa:	4648      	mov	r0, r9
 8006dac:	f000 fcba 	bl	8007724 <__lshift>
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd05      	ble.n	8006dc4 <_dtoa_r+0x84c>
 8006db8:	4621      	mov	r1, r4
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4648      	mov	r0, r9
 8006dbe:	f000 fcb1 	bl	8007724 <__lshift>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d061      	beq.n	8006e8e <_dtoa_r+0x916>
 8006dca:	9802      	ldr	r0, [sp, #8]
 8006dcc:	4621      	mov	r1, r4
 8006dce:	f000 fd15 	bl	80077fc <__mcmp>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	da5b      	bge.n	8006e8e <_dtoa_r+0x916>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9902      	ldr	r1, [sp, #8]
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4648      	mov	r0, r9
 8006dde:	f000 fafd 	bl	80073dc <__multadd>
 8006de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de4:	9002      	str	r0, [sp, #8]
 8006de6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8177 	beq.w	80070de <_dtoa_r+0xb66>
 8006df0:	4629      	mov	r1, r5
 8006df2:	2300      	movs	r3, #0
 8006df4:	220a      	movs	r2, #10
 8006df6:	4648      	mov	r0, r9
 8006df8:	f000 faf0 	bl	80073dc <__multadd>
 8006dfc:	f1bb 0f00 	cmp.w	fp, #0
 8006e00:	4605      	mov	r5, r0
 8006e02:	dc6f      	bgt.n	8006ee4 <_dtoa_r+0x96c>
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	dc49      	bgt.n	8006e9e <_dtoa_r+0x926>
 8006e0a:	e06b      	b.n	8006ee4 <_dtoa_r+0x96c>
 8006e0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e12:	e73c      	b.n	8006c8e <_dtoa_r+0x716>
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	40240000 	.word	0x40240000
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	1e5c      	subs	r4, r3, #1
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	db09      	blt.n	8006e3a <_dtoa_r+0x8c2>
 8006e26:	1b1c      	subs	r4, r3, r4
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f6bf af30 	bge.w	8006c90 <_dtoa_r+0x718>
 8006e30:	9b00      	ldr	r3, [sp, #0]
 8006e32:	9a03      	ldr	r2, [sp, #12]
 8006e34:	1a9e      	subs	r6, r3, r2
 8006e36:	2300      	movs	r3, #0
 8006e38:	e72b      	b.n	8006c92 <_dtoa_r+0x71a>
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e3e:	9408      	str	r4, [sp, #32]
 8006e40:	1ae3      	subs	r3, r4, r3
 8006e42:	441a      	add	r2, r3
 8006e44:	9e00      	ldr	r6, [sp, #0]
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e4a:	2400      	movs	r4, #0
 8006e4c:	e721      	b.n	8006c92 <_dtoa_r+0x71a>
 8006e4e:	9c08      	ldr	r4, [sp, #32]
 8006e50:	9e00      	ldr	r6, [sp, #0]
 8006e52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e54:	e728      	b.n	8006ca8 <_dtoa_r+0x730>
 8006e56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006e5a:	e751      	b.n	8006d00 <_dtoa_r+0x788>
 8006e5c:	9a08      	ldr	r2, [sp, #32]
 8006e5e:	9902      	ldr	r1, [sp, #8]
 8006e60:	e750      	b.n	8006d04 <_dtoa_r+0x78c>
 8006e62:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e66:	e751      	b.n	8006d0c <_dtoa_r+0x794>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e779      	b.n	8006d60 <_dtoa_r+0x7e8>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	e777      	b.n	8006d60 <_dtoa_r+0x7e8>
 8006e70:	2300      	movs	r3, #0
 8006e72:	9308      	str	r3, [sp, #32]
 8006e74:	e779      	b.n	8006d6a <_dtoa_r+0x7f2>
 8006e76:	d093      	beq.n	8006da0 <_dtoa_r+0x828>
 8006e78:	9a00      	ldr	r2, [sp, #0]
 8006e7a:	331c      	adds	r3, #28
 8006e7c:	441a      	add	r2, r3
 8006e7e:	9200      	str	r2, [sp, #0]
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	441a      	add	r2, r3
 8006e84:	441e      	add	r6, r3
 8006e86:	9206      	str	r2, [sp, #24]
 8006e88:	e78a      	b.n	8006da0 <_dtoa_r+0x828>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e7f4      	b.n	8006e78 <_dtoa_r+0x900>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	46b8      	mov	r8, r7
 8006e94:	dc20      	bgt.n	8006ed8 <_dtoa_r+0x960>
 8006e96:	469b      	mov	fp, r3
 8006e98:	9b07      	ldr	r3, [sp, #28]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	dd1e      	ble.n	8006edc <_dtoa_r+0x964>
 8006e9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ea2:	f47f adb1 	bne.w	8006a08 <_dtoa_r+0x490>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	465b      	mov	r3, fp
 8006eaa:	2205      	movs	r2, #5
 8006eac:	4648      	mov	r0, r9
 8006eae:	f000 fa95 	bl	80073dc <__multadd>
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	9802      	ldr	r0, [sp, #8]
 8006eb8:	f000 fca0 	bl	80077fc <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f77f ada3 	ble.w	8006a08 <_dtoa_r+0x490>
 8006ec2:	4656      	mov	r6, sl
 8006ec4:	2331      	movs	r3, #49	@ 0x31
 8006ec6:	f806 3b01 	strb.w	r3, [r6], #1
 8006eca:	f108 0801 	add.w	r8, r8, #1
 8006ece:	e59f      	b.n	8006a10 <_dtoa_r+0x498>
 8006ed0:	9c03      	ldr	r4, [sp, #12]
 8006ed2:	46b8      	mov	r8, r7
 8006ed4:	4625      	mov	r5, r4
 8006ed6:	e7f4      	b.n	8006ec2 <_dtoa_r+0x94a>
 8006ed8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8101 	beq.w	80070e6 <_dtoa_r+0xb6e>
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	dd05      	ble.n	8006ef4 <_dtoa_r+0x97c>
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4632      	mov	r2, r6
 8006eec:	4648      	mov	r0, r9
 8006eee:	f000 fc19 	bl	8007724 <__lshift>
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d05c      	beq.n	8006fb4 <_dtoa_r+0xa3c>
 8006efa:	6869      	ldr	r1, [r5, #4]
 8006efc:	4648      	mov	r0, r9
 8006efe:	f000 fa0b 	bl	8007318 <_Balloc>
 8006f02:	4606      	mov	r6, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <_dtoa_r+0x99a>
 8006f06:	4b82      	ldr	r3, [pc, #520]	@ (8007110 <_dtoa_r+0xb98>)
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f0e:	f7ff bb4a 	b.w	80065a6 <_dtoa_r+0x2e>
 8006f12:	692a      	ldr	r2, [r5, #16]
 8006f14:	3202      	adds	r2, #2
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	f105 010c 	add.w	r1, r5, #12
 8006f1c:	300c      	adds	r0, #12
 8006f1e:	f000 ffa3 	bl	8007e68 <memcpy>
 8006f22:	2201      	movs	r2, #1
 8006f24:	4631      	mov	r1, r6
 8006f26:	4648      	mov	r0, r9
 8006f28:	f000 fbfc 	bl	8007724 <__lshift>
 8006f2c:	f10a 0301 	add.w	r3, sl, #1
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	eb0a 030b 	add.w	r3, sl, fp
 8006f36:	9308      	str	r3, [sp, #32]
 8006f38:	9b04      	ldr	r3, [sp, #16]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	462f      	mov	r7, r5
 8006f40:	9306      	str	r3, [sp, #24]
 8006f42:	4605      	mov	r5, r0
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	9802      	ldr	r0, [sp, #8]
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f4e:	f7ff fa8a 	bl	8006466 <quorem>
 8006f52:	4603      	mov	r3, r0
 8006f54:	3330      	adds	r3, #48	@ 0x30
 8006f56:	9003      	str	r0, [sp, #12]
 8006f58:	4639      	mov	r1, r7
 8006f5a:	9802      	ldr	r0, [sp, #8]
 8006f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5e:	f000 fc4d 	bl	80077fc <__mcmp>
 8006f62:	462a      	mov	r2, r5
 8006f64:	9004      	str	r0, [sp, #16]
 8006f66:	4621      	mov	r1, r4
 8006f68:	4648      	mov	r0, r9
 8006f6a:	f000 fc63 	bl	8007834 <__mdiff>
 8006f6e:	68c2      	ldr	r2, [r0, #12]
 8006f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f72:	4606      	mov	r6, r0
 8006f74:	bb02      	cbnz	r2, 8006fb8 <_dtoa_r+0xa40>
 8006f76:	4601      	mov	r1, r0
 8006f78:	9802      	ldr	r0, [sp, #8]
 8006f7a:	f000 fc3f 	bl	80077fc <__mcmp>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	4602      	mov	r2, r0
 8006f82:	4631      	mov	r1, r6
 8006f84:	4648      	mov	r0, r9
 8006f86:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8a:	f000 fa05 	bl	8007398 <_Bfree>
 8006f8e:	9b07      	ldr	r3, [sp, #28]
 8006f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f92:	9e00      	ldr	r6, [sp, #0]
 8006f94:	ea42 0103 	orr.w	r1, r2, r3
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	4319      	orrs	r1, r3
 8006f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9e:	d10d      	bne.n	8006fbc <_dtoa_r+0xa44>
 8006fa0:	2b39      	cmp	r3, #57	@ 0x39
 8006fa2:	d027      	beq.n	8006ff4 <_dtoa_r+0xa7c>
 8006fa4:	9a04      	ldr	r2, [sp, #16]
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	dd01      	ble.n	8006fae <_dtoa_r+0xa36>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	3331      	adds	r3, #49	@ 0x31
 8006fae:	f88b 3000 	strb.w	r3, [fp]
 8006fb2:	e52e      	b.n	8006a12 <_dtoa_r+0x49a>
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	e7b9      	b.n	8006f2c <_dtoa_r+0x9b4>
 8006fb8:	2201      	movs	r2, #1
 8006fba:	e7e2      	b.n	8006f82 <_dtoa_r+0xa0a>
 8006fbc:	9904      	ldr	r1, [sp, #16]
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	db04      	blt.n	8006fcc <_dtoa_r+0xa54>
 8006fc2:	9807      	ldr	r0, [sp, #28]
 8006fc4:	4301      	orrs	r1, r0
 8006fc6:	9806      	ldr	r0, [sp, #24]
 8006fc8:	4301      	orrs	r1, r0
 8006fca:	d120      	bne.n	800700e <_dtoa_r+0xa96>
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	ddee      	ble.n	8006fae <_dtoa_r+0xa36>
 8006fd0:	9902      	ldr	r1, [sp, #8]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4648      	mov	r0, r9
 8006fd8:	f000 fba4 	bl	8007724 <__lshift>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	9002      	str	r0, [sp, #8]
 8006fe0:	f000 fc0c 	bl	80077fc <__mcmp>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	dc02      	bgt.n	8006ff0 <_dtoa_r+0xa78>
 8006fea:	d1e0      	bne.n	8006fae <_dtoa_r+0xa36>
 8006fec:	07da      	lsls	r2, r3, #31
 8006fee:	d5de      	bpl.n	8006fae <_dtoa_r+0xa36>
 8006ff0:	2b39      	cmp	r3, #57	@ 0x39
 8006ff2:	d1da      	bne.n	8006faa <_dtoa_r+0xa32>
 8006ff4:	2339      	movs	r3, #57	@ 0x39
 8006ff6:	f88b 3000 	strb.w	r3, [fp]
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	461e      	mov	r6, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007004:	2a39      	cmp	r2, #57	@ 0x39
 8007006:	d04e      	beq.n	80070a6 <_dtoa_r+0xb2e>
 8007008:	3201      	adds	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e501      	b.n	8006a12 <_dtoa_r+0x49a>
 800700e:	2a00      	cmp	r2, #0
 8007010:	dd03      	ble.n	800701a <_dtoa_r+0xaa2>
 8007012:	2b39      	cmp	r3, #57	@ 0x39
 8007014:	d0ee      	beq.n	8006ff4 <_dtoa_r+0xa7c>
 8007016:	3301      	adds	r3, #1
 8007018:	e7c9      	b.n	8006fae <_dtoa_r+0xa36>
 800701a:	9a00      	ldr	r2, [sp, #0]
 800701c:	9908      	ldr	r1, [sp, #32]
 800701e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007022:	428a      	cmp	r2, r1
 8007024:	d028      	beq.n	8007078 <_dtoa_r+0xb00>
 8007026:	9902      	ldr	r1, [sp, #8]
 8007028:	2300      	movs	r3, #0
 800702a:	220a      	movs	r2, #10
 800702c:	4648      	mov	r0, r9
 800702e:	f000 f9d5 	bl	80073dc <__multadd>
 8007032:	42af      	cmp	r7, r5
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	f04f 020a 	mov.w	r2, #10
 800703e:	4639      	mov	r1, r7
 8007040:	4648      	mov	r0, r9
 8007042:	d107      	bne.n	8007054 <_dtoa_r+0xadc>
 8007044:	f000 f9ca 	bl	80073dc <__multadd>
 8007048:	4607      	mov	r7, r0
 800704a:	4605      	mov	r5, r0
 800704c:	9b00      	ldr	r3, [sp, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	e777      	b.n	8006f44 <_dtoa_r+0x9cc>
 8007054:	f000 f9c2 	bl	80073dc <__multadd>
 8007058:	4629      	mov	r1, r5
 800705a:	4607      	mov	r7, r0
 800705c:	2300      	movs	r3, #0
 800705e:	220a      	movs	r2, #10
 8007060:	4648      	mov	r0, r9
 8007062:	f000 f9bb 	bl	80073dc <__multadd>
 8007066:	4605      	mov	r5, r0
 8007068:	e7f0      	b.n	800704c <_dtoa_r+0xad4>
 800706a:	f1bb 0f00 	cmp.w	fp, #0
 800706e:	bfcc      	ite	gt
 8007070:	465e      	movgt	r6, fp
 8007072:	2601      	movle	r6, #1
 8007074:	4456      	add	r6, sl
 8007076:	2700      	movs	r7, #0
 8007078:	9902      	ldr	r1, [sp, #8]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2201      	movs	r2, #1
 800707e:	4648      	mov	r0, r9
 8007080:	f000 fb50 	bl	8007724 <__lshift>
 8007084:	4621      	mov	r1, r4
 8007086:	9002      	str	r0, [sp, #8]
 8007088:	f000 fbb8 	bl	80077fc <__mcmp>
 800708c:	2800      	cmp	r0, #0
 800708e:	dcb4      	bgt.n	8006ffa <_dtoa_r+0xa82>
 8007090:	d102      	bne.n	8007098 <_dtoa_r+0xb20>
 8007092:	9b00      	ldr	r3, [sp, #0]
 8007094:	07db      	lsls	r3, r3, #31
 8007096:	d4b0      	bmi.n	8006ffa <_dtoa_r+0xa82>
 8007098:	4633      	mov	r3, r6
 800709a:	461e      	mov	r6, r3
 800709c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070a0:	2a30      	cmp	r2, #48	@ 0x30
 80070a2:	d0fa      	beq.n	800709a <_dtoa_r+0xb22>
 80070a4:	e4b5      	b.n	8006a12 <_dtoa_r+0x49a>
 80070a6:	459a      	cmp	sl, r3
 80070a8:	d1a8      	bne.n	8006ffc <_dtoa_r+0xa84>
 80070aa:	2331      	movs	r3, #49	@ 0x31
 80070ac:	f108 0801 	add.w	r8, r8, #1
 80070b0:	f88a 3000 	strb.w	r3, [sl]
 80070b4:	e4ad      	b.n	8006a12 <_dtoa_r+0x49a>
 80070b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007114 <_dtoa_r+0xb9c>
 80070bc:	b11b      	cbz	r3, 80070c6 <_dtoa_r+0xb4e>
 80070be:	f10a 0308 	add.w	r3, sl, #8
 80070c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4650      	mov	r0, sl
 80070c8:	b017      	add	sp, #92	@ 0x5c
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	9b07      	ldr	r3, [sp, #28]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	f77f ae2e 	ble.w	8006d32 <_dtoa_r+0x7ba>
 80070d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	2001      	movs	r0, #1
 80070dc:	e64d      	b.n	8006d7a <_dtoa_r+0x802>
 80070de:	f1bb 0f00 	cmp.w	fp, #0
 80070e2:	f77f aed9 	ble.w	8006e98 <_dtoa_r+0x920>
 80070e6:	4656      	mov	r6, sl
 80070e8:	9802      	ldr	r0, [sp, #8]
 80070ea:	4621      	mov	r1, r4
 80070ec:	f7ff f9bb 	bl	8006466 <quorem>
 80070f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070f4:	f806 3b01 	strb.w	r3, [r6], #1
 80070f8:	eba6 020a 	sub.w	r2, r6, sl
 80070fc:	4593      	cmp	fp, r2
 80070fe:	ddb4      	ble.n	800706a <_dtoa_r+0xaf2>
 8007100:	9902      	ldr	r1, [sp, #8]
 8007102:	2300      	movs	r3, #0
 8007104:	220a      	movs	r2, #10
 8007106:	4648      	mov	r0, r9
 8007108:	f000 f968 	bl	80073dc <__multadd>
 800710c:	9002      	str	r0, [sp, #8]
 800710e:	e7eb      	b.n	80070e8 <_dtoa_r+0xb70>
 8007110:	080086cc 	.word	0x080086cc
 8007114:	08008650 	.word	0x08008650

08007118 <_free_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4605      	mov	r5, r0
 800711c:	2900      	cmp	r1, #0
 800711e:	d041      	beq.n	80071a4 <_free_r+0x8c>
 8007120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007124:	1f0c      	subs	r4, r1, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfb8      	it	lt
 800712a:	18e4      	addlt	r4, r4, r3
 800712c:	f000 f8e8 	bl	8007300 <__malloc_lock>
 8007130:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <_free_r+0x90>)
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	b933      	cbnz	r3, 8007144 <_free_r+0x2c>
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	6014      	str	r4, [r2, #0]
 800713a:	4628      	mov	r0, r5
 800713c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007140:	f000 b8e4 	b.w	800730c <__malloc_unlock>
 8007144:	42a3      	cmp	r3, r4
 8007146:	d908      	bls.n	800715a <_free_r+0x42>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	1821      	adds	r1, r4, r0
 800714c:	428b      	cmp	r3, r1
 800714e:	bf01      	itttt	eq
 8007150:	6819      	ldreq	r1, [r3, #0]
 8007152:	685b      	ldreq	r3, [r3, #4]
 8007154:	1809      	addeq	r1, r1, r0
 8007156:	6021      	streq	r1, [r4, #0]
 8007158:	e7ed      	b.n	8007136 <_free_r+0x1e>
 800715a:	461a      	mov	r2, r3
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	b10b      	cbz	r3, 8007164 <_free_r+0x4c>
 8007160:	42a3      	cmp	r3, r4
 8007162:	d9fa      	bls.n	800715a <_free_r+0x42>
 8007164:	6811      	ldr	r1, [r2, #0]
 8007166:	1850      	adds	r0, r2, r1
 8007168:	42a0      	cmp	r0, r4
 800716a:	d10b      	bne.n	8007184 <_free_r+0x6c>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	4401      	add	r1, r0
 8007170:	1850      	adds	r0, r2, r1
 8007172:	4283      	cmp	r3, r0
 8007174:	6011      	str	r1, [r2, #0]
 8007176:	d1e0      	bne.n	800713a <_free_r+0x22>
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	6053      	str	r3, [r2, #4]
 800717e:	4408      	add	r0, r1
 8007180:	6010      	str	r0, [r2, #0]
 8007182:	e7da      	b.n	800713a <_free_r+0x22>
 8007184:	d902      	bls.n	800718c <_free_r+0x74>
 8007186:	230c      	movs	r3, #12
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	e7d6      	b.n	800713a <_free_r+0x22>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	1821      	adds	r1, r4, r0
 8007190:	428b      	cmp	r3, r1
 8007192:	bf04      	itt	eq
 8007194:	6819      	ldreq	r1, [r3, #0]
 8007196:	685b      	ldreq	r3, [r3, #4]
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	bf04      	itt	eq
 800719c:	1809      	addeq	r1, r1, r0
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	6054      	str	r4, [r2, #4]
 80071a2:	e7ca      	b.n	800713a <_free_r+0x22>
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	20000558 	.word	0x20000558

080071ac <malloc>:
 80071ac:	4b02      	ldr	r3, [pc, #8]	@ (80071b8 <malloc+0xc>)
 80071ae:	4601      	mov	r1, r0
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f000 b825 	b.w	8007200 <_malloc_r>
 80071b6:	bf00      	nop
 80071b8:	20000048 	.word	0x20000048

080071bc <sbrk_aligned>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4e0f      	ldr	r6, [pc, #60]	@ (80071fc <sbrk_aligned+0x40>)
 80071c0:	460c      	mov	r4, r1
 80071c2:	6831      	ldr	r1, [r6, #0]
 80071c4:	4605      	mov	r5, r0
 80071c6:	b911      	cbnz	r1, 80071ce <sbrk_aligned+0x12>
 80071c8:	f000 fe3e 	bl	8007e48 <_sbrk_r>
 80071cc:	6030      	str	r0, [r6, #0]
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 fe39 	bl	8007e48 <_sbrk_r>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d103      	bne.n	80071e2 <sbrk_aligned+0x26>
 80071da:	f04f 34ff 	mov.w	r4, #4294967295
 80071de:	4620      	mov	r0, r4
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	1cc4      	adds	r4, r0, #3
 80071e4:	f024 0403 	bic.w	r4, r4, #3
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d0f8      	beq.n	80071de <sbrk_aligned+0x22>
 80071ec:	1a21      	subs	r1, r4, r0
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fe2a 	bl	8007e48 <_sbrk_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d1f2      	bne.n	80071de <sbrk_aligned+0x22>
 80071f8:	e7ef      	b.n	80071da <sbrk_aligned+0x1e>
 80071fa:	bf00      	nop
 80071fc:	20000554 	.word	0x20000554

08007200 <_malloc_r>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	1ccd      	adds	r5, r1, #3
 8007206:	f025 0503 	bic.w	r5, r5, #3
 800720a:	3508      	adds	r5, #8
 800720c:	2d0c      	cmp	r5, #12
 800720e:	bf38      	it	cc
 8007210:	250c      	movcc	r5, #12
 8007212:	2d00      	cmp	r5, #0
 8007214:	4606      	mov	r6, r0
 8007216:	db01      	blt.n	800721c <_malloc_r+0x1c>
 8007218:	42a9      	cmp	r1, r5
 800721a:	d904      	bls.n	8007226 <_malloc_r+0x26>
 800721c:	230c      	movs	r3, #12
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	2000      	movs	r0, #0
 8007222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072fc <_malloc_r+0xfc>
 800722a:	f000 f869 	bl	8007300 <__malloc_lock>
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	461c      	mov	r4, r3
 8007234:	bb44      	cbnz	r4, 8007288 <_malloc_r+0x88>
 8007236:	4629      	mov	r1, r5
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff ffbf 	bl	80071bc <sbrk_aligned>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	4604      	mov	r4, r0
 8007242:	d158      	bne.n	80072f6 <_malloc_r+0xf6>
 8007244:	f8d8 4000 	ldr.w	r4, [r8]
 8007248:	4627      	mov	r7, r4
 800724a:	2f00      	cmp	r7, #0
 800724c:	d143      	bne.n	80072d6 <_malloc_r+0xd6>
 800724e:	2c00      	cmp	r4, #0
 8007250:	d04b      	beq.n	80072ea <_malloc_r+0xea>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	4639      	mov	r1, r7
 8007256:	4630      	mov	r0, r6
 8007258:	eb04 0903 	add.w	r9, r4, r3
 800725c:	f000 fdf4 	bl	8007e48 <_sbrk_r>
 8007260:	4581      	cmp	r9, r0
 8007262:	d142      	bne.n	80072ea <_malloc_r+0xea>
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	1a6d      	subs	r5, r5, r1
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f7ff ffa6 	bl	80071bc <sbrk_aligned>
 8007270:	3001      	adds	r0, #1
 8007272:	d03a      	beq.n	80072ea <_malloc_r+0xea>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	442b      	add	r3, r5
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	f8d8 3000 	ldr.w	r3, [r8]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	bb62      	cbnz	r2, 80072dc <_malloc_r+0xdc>
 8007282:	f8c8 7000 	str.w	r7, [r8]
 8007286:	e00f      	b.n	80072a8 <_malloc_r+0xa8>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	1b52      	subs	r2, r2, r5
 800728c:	d420      	bmi.n	80072d0 <_malloc_r+0xd0>
 800728e:	2a0b      	cmp	r2, #11
 8007290:	d917      	bls.n	80072c2 <_malloc_r+0xc2>
 8007292:	1961      	adds	r1, r4, r5
 8007294:	42a3      	cmp	r3, r4
 8007296:	6025      	str	r5, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	6059      	strne	r1, [r3, #4]
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	bf08      	it	eq
 80072a0:	f8c8 1000 	streq.w	r1, [r8]
 80072a4:	5162      	str	r2, [r4, r5]
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f82f 	bl	800730c <__malloc_unlock>
 80072ae:	f104 000b 	add.w	r0, r4, #11
 80072b2:	1d23      	adds	r3, r4, #4
 80072b4:	f020 0007 	bic.w	r0, r0, #7
 80072b8:	1ac2      	subs	r2, r0, r3
 80072ba:	bf1c      	itt	ne
 80072bc:	1a1b      	subne	r3, r3, r0
 80072be:	50a3      	strne	r3, [r4, r2]
 80072c0:	e7af      	b.n	8007222 <_malloc_r+0x22>
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	bf0c      	ite	eq
 80072c8:	f8c8 2000 	streq.w	r2, [r8]
 80072cc:	605a      	strne	r2, [r3, #4]
 80072ce:	e7eb      	b.n	80072a8 <_malloc_r+0xa8>
 80072d0:	4623      	mov	r3, r4
 80072d2:	6864      	ldr	r4, [r4, #4]
 80072d4:	e7ae      	b.n	8007234 <_malloc_r+0x34>
 80072d6:	463c      	mov	r4, r7
 80072d8:	687f      	ldr	r7, [r7, #4]
 80072da:	e7b6      	b.n	800724a <_malloc_r+0x4a>
 80072dc:	461a      	mov	r2, r3
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d1fb      	bne.n	80072dc <_malloc_r+0xdc>
 80072e4:	2300      	movs	r3, #0
 80072e6:	6053      	str	r3, [r2, #4]
 80072e8:	e7de      	b.n	80072a8 <_malloc_r+0xa8>
 80072ea:	230c      	movs	r3, #12
 80072ec:	6033      	str	r3, [r6, #0]
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f80c 	bl	800730c <__malloc_unlock>
 80072f4:	e794      	b.n	8007220 <_malloc_r+0x20>
 80072f6:	6005      	str	r5, [r0, #0]
 80072f8:	e7d6      	b.n	80072a8 <_malloc_r+0xa8>
 80072fa:	bf00      	nop
 80072fc:	20000558 	.word	0x20000558

08007300 <__malloc_lock>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__malloc_lock+0x8>)
 8007302:	f7ff b8ae 	b.w	8006462 <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20000550 	.word	0x20000550

0800730c <__malloc_unlock>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__malloc_unlock+0x8>)
 800730e:	f7ff b8a9 	b.w	8006464 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20000550 	.word	0x20000550

08007318 <_Balloc>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	69c6      	ldr	r6, [r0, #28]
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	b976      	cbnz	r6, 8007340 <_Balloc+0x28>
 8007322:	2010      	movs	r0, #16
 8007324:	f7ff ff42 	bl	80071ac <malloc>
 8007328:	4602      	mov	r2, r0
 800732a:	61e0      	str	r0, [r4, #28]
 800732c:	b920      	cbnz	r0, 8007338 <_Balloc+0x20>
 800732e:	4b18      	ldr	r3, [pc, #96]	@ (8007390 <_Balloc+0x78>)
 8007330:	4818      	ldr	r0, [pc, #96]	@ (8007394 <_Balloc+0x7c>)
 8007332:	216b      	movs	r1, #107	@ 0x6b
 8007334:	f000 fda6 	bl	8007e84 <__assert_func>
 8007338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800733c:	6006      	str	r6, [r0, #0]
 800733e:	60c6      	str	r6, [r0, #12]
 8007340:	69e6      	ldr	r6, [r4, #28]
 8007342:	68f3      	ldr	r3, [r6, #12]
 8007344:	b183      	cbz	r3, 8007368 <_Balloc+0x50>
 8007346:	69e3      	ldr	r3, [r4, #28]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800734e:	b9b8      	cbnz	r0, 8007380 <_Balloc+0x68>
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f605 	lsl.w	r6, r1, r5
 8007356:	1d72      	adds	r2, r6, #5
 8007358:	0092      	lsls	r2, r2, #2
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fdb0 	bl	8007ec0 <_calloc_r>
 8007360:	b160      	cbz	r0, 800737c <_Balloc+0x64>
 8007362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007366:	e00e      	b.n	8007386 <_Balloc+0x6e>
 8007368:	2221      	movs	r2, #33	@ 0x21
 800736a:	2104      	movs	r1, #4
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fda7 	bl	8007ec0 <_calloc_r>
 8007372:	69e3      	ldr	r3, [r4, #28]
 8007374:	60f0      	str	r0, [r6, #12]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e4      	bne.n	8007346 <_Balloc+0x2e>
 800737c:	2000      	movs	r0, #0
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	6802      	ldr	r2, [r0, #0]
 8007382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007386:	2300      	movs	r3, #0
 8007388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800738c:	e7f7      	b.n	800737e <_Balloc+0x66>
 800738e:	bf00      	nop
 8007390:	0800865d 	.word	0x0800865d
 8007394:	080086dd 	.word	0x080086dd

08007398 <_Bfree>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	69c6      	ldr	r6, [r0, #28]
 800739c:	4605      	mov	r5, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	b976      	cbnz	r6, 80073c0 <_Bfree+0x28>
 80073a2:	2010      	movs	r0, #16
 80073a4:	f7ff ff02 	bl	80071ac <malloc>
 80073a8:	4602      	mov	r2, r0
 80073aa:	61e8      	str	r0, [r5, #28]
 80073ac:	b920      	cbnz	r0, 80073b8 <_Bfree+0x20>
 80073ae:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <_Bfree+0x3c>)
 80073b0:	4809      	ldr	r0, [pc, #36]	@ (80073d8 <_Bfree+0x40>)
 80073b2:	218f      	movs	r1, #143	@ 0x8f
 80073b4:	f000 fd66 	bl	8007e84 <__assert_func>
 80073b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073bc:	6006      	str	r6, [r0, #0]
 80073be:	60c6      	str	r6, [r0, #12]
 80073c0:	b13c      	cbz	r4, 80073d2 <_Bfree+0x3a>
 80073c2:	69eb      	ldr	r3, [r5, #28]
 80073c4:	6862      	ldr	r2, [r4, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073cc:	6021      	str	r1, [r4, #0]
 80073ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	0800865d 	.word	0x0800865d
 80073d8:	080086dd 	.word	0x080086dd

080073dc <__multadd>:
 80073dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e0:	690d      	ldr	r5, [r1, #16]
 80073e2:	4607      	mov	r7, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	461e      	mov	r6, r3
 80073e8:	f101 0c14 	add.w	ip, r1, #20
 80073ec:	2000      	movs	r0, #0
 80073ee:	f8dc 3000 	ldr.w	r3, [ip]
 80073f2:	b299      	uxth	r1, r3
 80073f4:	fb02 6101 	mla	r1, r2, r1, r6
 80073f8:	0c1e      	lsrs	r6, r3, #16
 80073fa:	0c0b      	lsrs	r3, r1, #16
 80073fc:	fb02 3306 	mla	r3, r2, r6, r3
 8007400:	b289      	uxth	r1, r1
 8007402:	3001      	adds	r0, #1
 8007404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007408:	4285      	cmp	r5, r0
 800740a:	f84c 1b04 	str.w	r1, [ip], #4
 800740e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007412:	dcec      	bgt.n	80073ee <__multadd+0x12>
 8007414:	b30e      	cbz	r6, 800745a <__multadd+0x7e>
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	42ab      	cmp	r3, r5
 800741a:	dc19      	bgt.n	8007450 <__multadd+0x74>
 800741c:	6861      	ldr	r1, [r4, #4]
 800741e:	4638      	mov	r0, r7
 8007420:	3101      	adds	r1, #1
 8007422:	f7ff ff79 	bl	8007318 <_Balloc>
 8007426:	4680      	mov	r8, r0
 8007428:	b928      	cbnz	r0, 8007436 <__multadd+0x5a>
 800742a:	4602      	mov	r2, r0
 800742c:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <__multadd+0x84>)
 800742e:	480d      	ldr	r0, [pc, #52]	@ (8007464 <__multadd+0x88>)
 8007430:	21ba      	movs	r1, #186	@ 0xba
 8007432:	f000 fd27 	bl	8007e84 <__assert_func>
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	3202      	adds	r2, #2
 800743a:	f104 010c 	add.w	r1, r4, #12
 800743e:	0092      	lsls	r2, r2, #2
 8007440:	300c      	adds	r0, #12
 8007442:	f000 fd11 	bl	8007e68 <memcpy>
 8007446:	4621      	mov	r1, r4
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff ffa5 	bl	8007398 <_Bfree>
 800744e:	4644      	mov	r4, r8
 8007450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007454:	3501      	adds	r5, #1
 8007456:	615e      	str	r6, [r3, #20]
 8007458:	6125      	str	r5, [r4, #16]
 800745a:	4620      	mov	r0, r4
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	080086cc 	.word	0x080086cc
 8007464:	080086dd 	.word	0x080086dd

08007468 <__hi0bits>:
 8007468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800746c:	4603      	mov	r3, r0
 800746e:	bf36      	itet	cc
 8007470:	0403      	lslcc	r3, r0, #16
 8007472:	2000      	movcs	r0, #0
 8007474:	2010      	movcc	r0, #16
 8007476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800747a:	bf3c      	itt	cc
 800747c:	021b      	lslcc	r3, r3, #8
 800747e:	3008      	addcc	r0, #8
 8007480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007484:	bf3c      	itt	cc
 8007486:	011b      	lslcc	r3, r3, #4
 8007488:	3004      	addcc	r0, #4
 800748a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748e:	bf3c      	itt	cc
 8007490:	009b      	lslcc	r3, r3, #2
 8007492:	3002      	addcc	r0, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	db05      	blt.n	80074a4 <__hi0bits+0x3c>
 8007498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800749c:	f100 0001 	add.w	r0, r0, #1
 80074a0:	bf08      	it	eq
 80074a2:	2020      	moveq	r0, #32
 80074a4:	4770      	bx	lr

080074a6 <__lo0bits>:
 80074a6:	6803      	ldr	r3, [r0, #0]
 80074a8:	4602      	mov	r2, r0
 80074aa:	f013 0007 	ands.w	r0, r3, #7
 80074ae:	d00b      	beq.n	80074c8 <__lo0bits+0x22>
 80074b0:	07d9      	lsls	r1, r3, #31
 80074b2:	d421      	bmi.n	80074f8 <__lo0bits+0x52>
 80074b4:	0798      	lsls	r0, r3, #30
 80074b6:	bf49      	itett	mi
 80074b8:	085b      	lsrmi	r3, r3, #1
 80074ba:	089b      	lsrpl	r3, r3, #2
 80074bc:	2001      	movmi	r0, #1
 80074be:	6013      	strmi	r3, [r2, #0]
 80074c0:	bf5c      	itt	pl
 80074c2:	6013      	strpl	r3, [r2, #0]
 80074c4:	2002      	movpl	r0, #2
 80074c6:	4770      	bx	lr
 80074c8:	b299      	uxth	r1, r3
 80074ca:	b909      	cbnz	r1, 80074d0 <__lo0bits+0x2a>
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	2010      	movs	r0, #16
 80074d0:	b2d9      	uxtb	r1, r3
 80074d2:	b909      	cbnz	r1, 80074d8 <__lo0bits+0x32>
 80074d4:	3008      	adds	r0, #8
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	0719      	lsls	r1, r3, #28
 80074da:	bf04      	itt	eq
 80074dc:	091b      	lsreq	r3, r3, #4
 80074de:	3004      	addeq	r0, #4
 80074e0:	0799      	lsls	r1, r3, #30
 80074e2:	bf04      	itt	eq
 80074e4:	089b      	lsreq	r3, r3, #2
 80074e6:	3002      	addeq	r0, #2
 80074e8:	07d9      	lsls	r1, r3, #31
 80074ea:	d403      	bmi.n	80074f4 <__lo0bits+0x4e>
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	f100 0001 	add.w	r0, r0, #1
 80074f2:	d003      	beq.n	80074fc <__lo0bits+0x56>
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4770      	bx	lr
 80074f8:	2000      	movs	r0, #0
 80074fa:	4770      	bx	lr
 80074fc:	2020      	movs	r0, #32
 80074fe:	4770      	bx	lr

08007500 <__i2b>:
 8007500:	b510      	push	{r4, lr}
 8007502:	460c      	mov	r4, r1
 8007504:	2101      	movs	r1, #1
 8007506:	f7ff ff07 	bl	8007318 <_Balloc>
 800750a:	4602      	mov	r2, r0
 800750c:	b928      	cbnz	r0, 800751a <__i2b+0x1a>
 800750e:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <__i2b+0x24>)
 8007510:	4805      	ldr	r0, [pc, #20]	@ (8007528 <__i2b+0x28>)
 8007512:	f240 1145 	movw	r1, #325	@ 0x145
 8007516:	f000 fcb5 	bl	8007e84 <__assert_func>
 800751a:	2301      	movs	r3, #1
 800751c:	6144      	str	r4, [r0, #20]
 800751e:	6103      	str	r3, [r0, #16]
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	080086cc 	.word	0x080086cc
 8007528:	080086dd 	.word	0x080086dd

0800752c <__multiply>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4617      	mov	r7, r2
 8007532:	690a      	ldr	r2, [r1, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	bfa8      	it	ge
 800753a:	463b      	movge	r3, r7
 800753c:	4689      	mov	r9, r1
 800753e:	bfa4      	itt	ge
 8007540:	460f      	movge	r7, r1
 8007542:	4699      	movge	r9, r3
 8007544:	693d      	ldr	r5, [r7, #16]
 8007546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	eb05 060a 	add.w	r6, r5, sl
 8007552:	42b3      	cmp	r3, r6
 8007554:	b085      	sub	sp, #20
 8007556:	bfb8      	it	lt
 8007558:	3101      	addlt	r1, #1
 800755a:	f7ff fedd 	bl	8007318 <_Balloc>
 800755e:	b930      	cbnz	r0, 800756e <__multiply+0x42>
 8007560:	4602      	mov	r2, r0
 8007562:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <__multiply+0x13c>)
 8007564:	4841      	ldr	r0, [pc, #260]	@ (800766c <__multiply+0x140>)
 8007566:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800756a:	f000 fc8b 	bl	8007e84 <__assert_func>
 800756e:	f100 0414 	add.w	r4, r0, #20
 8007572:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007576:	4623      	mov	r3, r4
 8007578:	2200      	movs	r2, #0
 800757a:	4573      	cmp	r3, lr
 800757c:	d320      	bcc.n	80075c0 <__multiply+0x94>
 800757e:	f107 0814 	add.w	r8, r7, #20
 8007582:	f109 0114 	add.w	r1, r9, #20
 8007586:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800758a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800758e:	9302      	str	r3, [sp, #8]
 8007590:	1beb      	subs	r3, r5, r7
 8007592:	3b15      	subs	r3, #21
 8007594:	f023 0303 	bic.w	r3, r3, #3
 8007598:	3304      	adds	r3, #4
 800759a:	3715      	adds	r7, #21
 800759c:	42bd      	cmp	r5, r7
 800759e:	bf38      	it	cc
 80075a0:	2304      	movcc	r3, #4
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	428b      	cmp	r3, r1
 80075aa:	d80c      	bhi.n	80075c6 <__multiply+0x9a>
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	dd03      	ble.n	80075b8 <__multiply+0x8c>
 80075b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d055      	beq.n	8007664 <__multiply+0x138>
 80075b8:	6106      	str	r6, [r0, #16]
 80075ba:	b005      	add	sp, #20
 80075bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	f843 2b04 	str.w	r2, [r3], #4
 80075c4:	e7d9      	b.n	800757a <__multiply+0x4e>
 80075c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80075ca:	f1ba 0f00 	cmp.w	sl, #0
 80075ce:	d01f      	beq.n	8007610 <__multiply+0xe4>
 80075d0:	46c4      	mov	ip, r8
 80075d2:	46a1      	mov	r9, r4
 80075d4:	2700      	movs	r7, #0
 80075d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075da:	f8d9 3000 	ldr.w	r3, [r9]
 80075de:	fa1f fb82 	uxth.w	fp, r2
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80075e8:	443b      	add	r3, r7
 80075ea:	f8d9 7000 	ldr.w	r7, [r9]
 80075ee:	0c12      	lsrs	r2, r2, #16
 80075f0:	0c3f      	lsrs	r7, r7, #16
 80075f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80075f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007600:	4565      	cmp	r5, ip
 8007602:	f849 3b04 	str.w	r3, [r9], #4
 8007606:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800760a:	d8e4      	bhi.n	80075d6 <__multiply+0xaa>
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	50e7      	str	r7, [r4, r3]
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007616:	3104      	adds	r1, #4
 8007618:	f1b9 0f00 	cmp.w	r9, #0
 800761c:	d020      	beq.n	8007660 <__multiply+0x134>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	4647      	mov	r7, r8
 8007622:	46a4      	mov	ip, r4
 8007624:	f04f 0a00 	mov.w	sl, #0
 8007628:	f8b7 b000 	ldrh.w	fp, [r7]
 800762c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007630:	fb09 220b 	mla	r2, r9, fp, r2
 8007634:	4452      	add	r2, sl
 8007636:	b29b      	uxth	r3, r3
 8007638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800763c:	f84c 3b04 	str.w	r3, [ip], #4
 8007640:	f857 3b04 	ldr.w	r3, [r7], #4
 8007644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007648:	f8bc 3000 	ldrh.w	r3, [ip]
 800764c:	fb09 330a 	mla	r3, r9, sl, r3
 8007650:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007654:	42bd      	cmp	r5, r7
 8007656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800765a:	d8e5      	bhi.n	8007628 <__multiply+0xfc>
 800765c:	9a01      	ldr	r2, [sp, #4]
 800765e:	50a3      	str	r3, [r4, r2]
 8007660:	3404      	adds	r4, #4
 8007662:	e79f      	b.n	80075a4 <__multiply+0x78>
 8007664:	3e01      	subs	r6, #1
 8007666:	e7a1      	b.n	80075ac <__multiply+0x80>
 8007668:	080086cc 	.word	0x080086cc
 800766c:	080086dd 	.word	0x080086dd

08007670 <__pow5mult>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	4615      	mov	r5, r2
 8007676:	f012 0203 	ands.w	r2, r2, #3
 800767a:	4607      	mov	r7, r0
 800767c:	460e      	mov	r6, r1
 800767e:	d007      	beq.n	8007690 <__pow5mult+0x20>
 8007680:	4c25      	ldr	r4, [pc, #148]	@ (8007718 <__pow5mult+0xa8>)
 8007682:	3a01      	subs	r2, #1
 8007684:	2300      	movs	r3, #0
 8007686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800768a:	f7ff fea7 	bl	80073dc <__multadd>
 800768e:	4606      	mov	r6, r0
 8007690:	10ad      	asrs	r5, r5, #2
 8007692:	d03d      	beq.n	8007710 <__pow5mult+0xa0>
 8007694:	69fc      	ldr	r4, [r7, #28]
 8007696:	b97c      	cbnz	r4, 80076b8 <__pow5mult+0x48>
 8007698:	2010      	movs	r0, #16
 800769a:	f7ff fd87 	bl	80071ac <malloc>
 800769e:	4602      	mov	r2, r0
 80076a0:	61f8      	str	r0, [r7, #28]
 80076a2:	b928      	cbnz	r0, 80076b0 <__pow5mult+0x40>
 80076a4:	4b1d      	ldr	r3, [pc, #116]	@ (800771c <__pow5mult+0xac>)
 80076a6:	481e      	ldr	r0, [pc, #120]	@ (8007720 <__pow5mult+0xb0>)
 80076a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076ac:	f000 fbea 	bl	8007e84 <__assert_func>
 80076b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076b4:	6004      	str	r4, [r0, #0]
 80076b6:	60c4      	str	r4, [r0, #12]
 80076b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076c0:	b94c      	cbnz	r4, 80076d6 <__pow5mult+0x66>
 80076c2:	f240 2171 	movw	r1, #625	@ 0x271
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ff1a 	bl	8007500 <__i2b>
 80076cc:	2300      	movs	r3, #0
 80076ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80076d2:	4604      	mov	r4, r0
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	07eb      	lsls	r3, r5, #31
 80076dc:	d50a      	bpl.n	80076f4 <__pow5mult+0x84>
 80076de:	4631      	mov	r1, r6
 80076e0:	4622      	mov	r2, r4
 80076e2:	4638      	mov	r0, r7
 80076e4:	f7ff ff22 	bl	800752c <__multiply>
 80076e8:	4631      	mov	r1, r6
 80076ea:	4680      	mov	r8, r0
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff fe53 	bl	8007398 <_Bfree>
 80076f2:	4646      	mov	r6, r8
 80076f4:	106d      	asrs	r5, r5, #1
 80076f6:	d00b      	beq.n	8007710 <__pow5mult+0xa0>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	b938      	cbnz	r0, 800770c <__pow5mult+0x9c>
 80076fc:	4622      	mov	r2, r4
 80076fe:	4621      	mov	r1, r4
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ff13 	bl	800752c <__multiply>
 8007706:	6020      	str	r0, [r4, #0]
 8007708:	f8c0 9000 	str.w	r9, [r0]
 800770c:	4604      	mov	r4, r0
 800770e:	e7e4      	b.n	80076da <__pow5mult+0x6a>
 8007710:	4630      	mov	r0, r6
 8007712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007716:	bf00      	nop
 8007718:	08008790 	.word	0x08008790
 800771c:	0800865d 	.word	0x0800865d
 8007720:	080086dd 	.word	0x080086dd

08007724 <__lshift>:
 8007724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	460c      	mov	r4, r1
 800772a:	6849      	ldr	r1, [r1, #4]
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007732:	68a3      	ldr	r3, [r4, #8]
 8007734:	4607      	mov	r7, r0
 8007736:	4691      	mov	r9, r2
 8007738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800773c:	f108 0601 	add.w	r6, r8, #1
 8007740:	42b3      	cmp	r3, r6
 8007742:	db0b      	blt.n	800775c <__lshift+0x38>
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff fde7 	bl	8007318 <_Balloc>
 800774a:	4605      	mov	r5, r0
 800774c:	b948      	cbnz	r0, 8007762 <__lshift+0x3e>
 800774e:	4602      	mov	r2, r0
 8007750:	4b28      	ldr	r3, [pc, #160]	@ (80077f4 <__lshift+0xd0>)
 8007752:	4829      	ldr	r0, [pc, #164]	@ (80077f8 <__lshift+0xd4>)
 8007754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007758:	f000 fb94 	bl	8007e84 <__assert_func>
 800775c:	3101      	adds	r1, #1
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	e7ee      	b.n	8007740 <__lshift+0x1c>
 8007762:	2300      	movs	r3, #0
 8007764:	f100 0114 	add.w	r1, r0, #20
 8007768:	f100 0210 	add.w	r2, r0, #16
 800776c:	4618      	mov	r0, r3
 800776e:	4553      	cmp	r3, sl
 8007770:	db33      	blt.n	80077da <__lshift+0xb6>
 8007772:	6920      	ldr	r0, [r4, #16]
 8007774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007778:	f104 0314 	add.w	r3, r4, #20
 800777c:	f019 091f 	ands.w	r9, r9, #31
 8007780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007788:	d02b      	beq.n	80077e2 <__lshift+0xbe>
 800778a:	f1c9 0e20 	rsb	lr, r9, #32
 800778e:	468a      	mov	sl, r1
 8007790:	2200      	movs	r2, #0
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	fa00 f009 	lsl.w	r0, r0, r9
 8007798:	4310      	orrs	r0, r2
 800779a:	f84a 0b04 	str.w	r0, [sl], #4
 800779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a2:	459c      	cmp	ip, r3
 80077a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077a8:	d8f3      	bhi.n	8007792 <__lshift+0x6e>
 80077aa:	ebac 0304 	sub.w	r3, ip, r4
 80077ae:	3b15      	subs	r3, #21
 80077b0:	f023 0303 	bic.w	r3, r3, #3
 80077b4:	3304      	adds	r3, #4
 80077b6:	f104 0015 	add.w	r0, r4, #21
 80077ba:	4560      	cmp	r0, ip
 80077bc:	bf88      	it	hi
 80077be:	2304      	movhi	r3, #4
 80077c0:	50ca      	str	r2, [r1, r3]
 80077c2:	b10a      	cbz	r2, 80077c8 <__lshift+0xa4>
 80077c4:	f108 0602 	add.w	r6, r8, #2
 80077c8:	3e01      	subs	r6, #1
 80077ca:	4638      	mov	r0, r7
 80077cc:	612e      	str	r6, [r5, #16]
 80077ce:	4621      	mov	r1, r4
 80077d0:	f7ff fde2 	bl	8007398 <_Bfree>
 80077d4:	4628      	mov	r0, r5
 80077d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077da:	f842 0f04 	str.w	r0, [r2, #4]!
 80077de:	3301      	adds	r3, #1
 80077e0:	e7c5      	b.n	800776e <__lshift+0x4a>
 80077e2:	3904      	subs	r1, #4
 80077e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ec:	459c      	cmp	ip, r3
 80077ee:	d8f9      	bhi.n	80077e4 <__lshift+0xc0>
 80077f0:	e7ea      	b.n	80077c8 <__lshift+0xa4>
 80077f2:	bf00      	nop
 80077f4:	080086cc 	.word	0x080086cc
 80077f8:	080086dd 	.word	0x080086dd

080077fc <__mcmp>:
 80077fc:	690a      	ldr	r2, [r1, #16]
 80077fe:	4603      	mov	r3, r0
 8007800:	6900      	ldr	r0, [r0, #16]
 8007802:	1a80      	subs	r0, r0, r2
 8007804:	b530      	push	{r4, r5, lr}
 8007806:	d10e      	bne.n	8007826 <__mcmp+0x2a>
 8007808:	3314      	adds	r3, #20
 800780a:	3114      	adds	r1, #20
 800780c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800781c:	4295      	cmp	r5, r2
 800781e:	d003      	beq.n	8007828 <__mcmp+0x2c>
 8007820:	d205      	bcs.n	800782e <__mcmp+0x32>
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	42a3      	cmp	r3, r4
 800782a:	d3f3      	bcc.n	8007814 <__mcmp+0x18>
 800782c:	e7fb      	b.n	8007826 <__mcmp+0x2a>
 800782e:	2001      	movs	r0, #1
 8007830:	e7f9      	b.n	8007826 <__mcmp+0x2a>
	...

08007834 <__mdiff>:
 8007834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	4689      	mov	r9, r1
 800783a:	4606      	mov	r6, r0
 800783c:	4611      	mov	r1, r2
 800783e:	4648      	mov	r0, r9
 8007840:	4614      	mov	r4, r2
 8007842:	f7ff ffdb 	bl	80077fc <__mcmp>
 8007846:	1e05      	subs	r5, r0, #0
 8007848:	d112      	bne.n	8007870 <__mdiff+0x3c>
 800784a:	4629      	mov	r1, r5
 800784c:	4630      	mov	r0, r6
 800784e:	f7ff fd63 	bl	8007318 <_Balloc>
 8007852:	4602      	mov	r2, r0
 8007854:	b928      	cbnz	r0, 8007862 <__mdiff+0x2e>
 8007856:	4b3f      	ldr	r3, [pc, #252]	@ (8007954 <__mdiff+0x120>)
 8007858:	f240 2137 	movw	r1, #567	@ 0x237
 800785c:	483e      	ldr	r0, [pc, #248]	@ (8007958 <__mdiff+0x124>)
 800785e:	f000 fb11 	bl	8007e84 <__assert_func>
 8007862:	2301      	movs	r3, #1
 8007864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007868:	4610      	mov	r0, r2
 800786a:	b003      	add	sp, #12
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007870:	bfbc      	itt	lt
 8007872:	464b      	movlt	r3, r9
 8007874:	46a1      	movlt	r9, r4
 8007876:	4630      	mov	r0, r6
 8007878:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800787c:	bfba      	itte	lt
 800787e:	461c      	movlt	r4, r3
 8007880:	2501      	movlt	r5, #1
 8007882:	2500      	movge	r5, #0
 8007884:	f7ff fd48 	bl	8007318 <_Balloc>
 8007888:	4602      	mov	r2, r0
 800788a:	b918      	cbnz	r0, 8007894 <__mdiff+0x60>
 800788c:	4b31      	ldr	r3, [pc, #196]	@ (8007954 <__mdiff+0x120>)
 800788e:	f240 2145 	movw	r1, #581	@ 0x245
 8007892:	e7e3      	b.n	800785c <__mdiff+0x28>
 8007894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007898:	6926      	ldr	r6, [r4, #16]
 800789a:	60c5      	str	r5, [r0, #12]
 800789c:	f109 0310 	add.w	r3, r9, #16
 80078a0:	f109 0514 	add.w	r5, r9, #20
 80078a4:	f104 0e14 	add.w	lr, r4, #20
 80078a8:	f100 0b14 	add.w	fp, r0, #20
 80078ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	46d9      	mov	r9, fp
 80078b8:	f04f 0c00 	mov.w	ip, #0
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	fa1f f38a 	uxth.w	r3, sl
 80078cc:	4619      	mov	r1, r3
 80078ce:	b283      	uxth	r3, r0
 80078d0:	1acb      	subs	r3, r1, r3
 80078d2:	0c00      	lsrs	r0, r0, #16
 80078d4:	4463      	add	r3, ip
 80078d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078e4:	4576      	cmp	r6, lr
 80078e6:	f849 3b04 	str.w	r3, [r9], #4
 80078ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078ee:	d8e5      	bhi.n	80078bc <__mdiff+0x88>
 80078f0:	1b33      	subs	r3, r6, r4
 80078f2:	3b15      	subs	r3, #21
 80078f4:	f023 0303 	bic.w	r3, r3, #3
 80078f8:	3415      	adds	r4, #21
 80078fa:	3304      	adds	r3, #4
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	bf38      	it	cc
 8007900:	2304      	movcc	r3, #4
 8007902:	441d      	add	r5, r3
 8007904:	445b      	add	r3, fp
 8007906:	461e      	mov	r6, r3
 8007908:	462c      	mov	r4, r5
 800790a:	4544      	cmp	r4, r8
 800790c:	d30e      	bcc.n	800792c <__mdiff+0xf8>
 800790e:	f108 0103 	add.w	r1, r8, #3
 8007912:	1b49      	subs	r1, r1, r5
 8007914:	f021 0103 	bic.w	r1, r1, #3
 8007918:	3d03      	subs	r5, #3
 800791a:	45a8      	cmp	r8, r5
 800791c:	bf38      	it	cc
 800791e:	2100      	movcc	r1, #0
 8007920:	440b      	add	r3, r1
 8007922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007926:	b191      	cbz	r1, 800794e <__mdiff+0x11a>
 8007928:	6117      	str	r7, [r2, #16]
 800792a:	e79d      	b.n	8007868 <__mdiff+0x34>
 800792c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007930:	46e6      	mov	lr, ip
 8007932:	0c08      	lsrs	r0, r1, #16
 8007934:	fa1c fc81 	uxtah	ip, ip, r1
 8007938:	4471      	add	r1, lr
 800793a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800793e:	b289      	uxth	r1, r1
 8007940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007944:	f846 1b04 	str.w	r1, [r6], #4
 8007948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800794c:	e7dd      	b.n	800790a <__mdiff+0xd6>
 800794e:	3f01      	subs	r7, #1
 8007950:	e7e7      	b.n	8007922 <__mdiff+0xee>
 8007952:	bf00      	nop
 8007954:	080086cc 	.word	0x080086cc
 8007958:	080086dd 	.word	0x080086dd

0800795c <__d2b>:
 800795c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007960:	460f      	mov	r7, r1
 8007962:	2101      	movs	r1, #1
 8007964:	ec59 8b10 	vmov	r8, r9, d0
 8007968:	4616      	mov	r6, r2
 800796a:	f7ff fcd5 	bl	8007318 <_Balloc>
 800796e:	4604      	mov	r4, r0
 8007970:	b930      	cbnz	r0, 8007980 <__d2b+0x24>
 8007972:	4602      	mov	r2, r0
 8007974:	4b23      	ldr	r3, [pc, #140]	@ (8007a04 <__d2b+0xa8>)
 8007976:	4824      	ldr	r0, [pc, #144]	@ (8007a08 <__d2b+0xac>)
 8007978:	f240 310f 	movw	r1, #783	@ 0x30f
 800797c:	f000 fa82 	bl	8007e84 <__assert_func>
 8007980:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007988:	b10d      	cbz	r5, 800798e <__d2b+0x32>
 800798a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	f1b8 0300 	subs.w	r3, r8, #0
 8007994:	d023      	beq.n	80079de <__d2b+0x82>
 8007996:	4668      	mov	r0, sp
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	f7ff fd84 	bl	80074a6 <__lo0bits>
 800799e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079a2:	b1d0      	cbz	r0, 80079da <__d2b+0x7e>
 80079a4:	f1c0 0320 	rsb	r3, r0, #32
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	430b      	orrs	r3, r1
 80079ae:	40c2      	lsrs	r2, r0
 80079b0:	6163      	str	r3, [r4, #20]
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	61a3      	str	r3, [r4, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf0c      	ite	eq
 80079bc:	2201      	moveq	r2, #1
 80079be:	2202      	movne	r2, #2
 80079c0:	6122      	str	r2, [r4, #16]
 80079c2:	b1a5      	cbz	r5, 80079ee <__d2b+0x92>
 80079c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80079c8:	4405      	add	r5, r0
 80079ca:	603d      	str	r5, [r7, #0]
 80079cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80079d0:	6030      	str	r0, [r6, #0]
 80079d2:	4620      	mov	r0, r4
 80079d4:	b003      	add	sp, #12
 80079d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079da:	6161      	str	r1, [r4, #20]
 80079dc:	e7ea      	b.n	80079b4 <__d2b+0x58>
 80079de:	a801      	add	r0, sp, #4
 80079e0:	f7ff fd61 	bl	80074a6 <__lo0bits>
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	6163      	str	r3, [r4, #20]
 80079e8:	3020      	adds	r0, #32
 80079ea:	2201      	movs	r2, #1
 80079ec:	e7e8      	b.n	80079c0 <__d2b+0x64>
 80079ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079f6:	6038      	str	r0, [r7, #0]
 80079f8:	6918      	ldr	r0, [r3, #16]
 80079fa:	f7ff fd35 	bl	8007468 <__hi0bits>
 80079fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a02:	e7e5      	b.n	80079d0 <__d2b+0x74>
 8007a04:	080086cc 	.word	0x080086cc
 8007a08:	080086dd 	.word	0x080086dd

08007a0c <__ssputs_r>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	688e      	ldr	r6, [r1, #8]
 8007a12:	461f      	mov	r7, r3
 8007a14:	42be      	cmp	r6, r7
 8007a16:	680b      	ldr	r3, [r1, #0]
 8007a18:	4682      	mov	sl, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	4690      	mov	r8, r2
 8007a1e:	d82d      	bhi.n	8007a7c <__ssputs_r+0x70>
 8007a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a28:	d026      	beq.n	8007a78 <__ssputs_r+0x6c>
 8007a2a:	6965      	ldr	r5, [r4, #20]
 8007a2c:	6909      	ldr	r1, [r1, #16]
 8007a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a32:	eba3 0901 	sub.w	r9, r3, r1
 8007a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a3a:	1c7b      	adds	r3, r7, #1
 8007a3c:	444b      	add	r3, r9
 8007a3e:	106d      	asrs	r5, r5, #1
 8007a40:	429d      	cmp	r5, r3
 8007a42:	bf38      	it	cc
 8007a44:	461d      	movcc	r5, r3
 8007a46:	0553      	lsls	r3, r2, #21
 8007a48:	d527      	bpl.n	8007a9a <__ssputs_r+0x8e>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7ff fbd8 	bl	8007200 <_malloc_r>
 8007a50:	4606      	mov	r6, r0
 8007a52:	b360      	cbz	r0, 8007aae <__ssputs_r+0xa2>
 8007a54:	6921      	ldr	r1, [r4, #16]
 8007a56:	464a      	mov	r2, r9
 8007a58:	f000 fa06 	bl	8007e68 <memcpy>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	6165      	str	r5, [r4, #20]
 8007a6c:	444e      	add	r6, r9
 8007a6e:	eba5 0509 	sub.w	r5, r5, r9
 8007a72:	6026      	str	r6, [r4, #0]
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	463e      	mov	r6, r7
 8007a78:	42be      	cmp	r6, r7
 8007a7a:	d900      	bls.n	8007a7e <__ssputs_r+0x72>
 8007a7c:	463e      	mov	r6, r7
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	4632      	mov	r2, r6
 8007a82:	4641      	mov	r1, r8
 8007a84:	f000 f9c6 	bl	8007e14 <memmove>
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	1b9b      	subs	r3, r3, r6
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	4433      	add	r3, r6
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	f000 fa36 	bl	8007f0c <_realloc_r>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1e0      	bne.n	8007a68 <__ssputs_r+0x5c>
 8007aa6:	6921      	ldr	r1, [r4, #16]
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f7ff fb35 	bl	8007118 <_free_r>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	f8ca 3000 	str.w	r3, [sl]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e7e9      	b.n	8007a96 <__ssputs_r+0x8a>
	...

08007ac4 <_svfiprintf_r>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4698      	mov	r8, r3
 8007aca:	898b      	ldrh	r3, [r1, #12]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	b09d      	sub	sp, #116	@ 0x74
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	d510      	bpl.n	8007afa <_svfiprintf_r+0x36>
 8007ad8:	690b      	ldr	r3, [r1, #16]
 8007ada:	b973      	cbnz	r3, 8007afa <_svfiprintf_r+0x36>
 8007adc:	2140      	movs	r1, #64	@ 0x40
 8007ade:	f7ff fb8f 	bl	8007200 <_malloc_r>
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	6128      	str	r0, [r5, #16]
 8007ae6:	b930      	cbnz	r0, 8007af6 <_svfiprintf_r+0x32>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	@ 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	2340      	movs	r3, #64	@ 0x40
 8007af8:	616b      	str	r3, [r5, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	2320      	movs	r3, #32
 8007b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b08:	2330      	movs	r3, #48	@ 0x30
 8007b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ca8 <_svfiprintf_r+0x1e4>
 8007b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	4623      	mov	r3, r4
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b1e:	b10a      	cbz	r2, 8007b24 <_svfiprintf_r+0x60>
 8007b20:	2a25      	cmp	r2, #37	@ 0x25
 8007b22:	d1f9      	bne.n	8007b18 <_svfiprintf_r+0x54>
 8007b24:	ebba 0b04 	subs.w	fp, sl, r4
 8007b28:	d00b      	beq.n	8007b42 <_svfiprintf_r+0x7e>
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ff6b 	bl	8007a0c <__ssputs_r>
 8007b36:	3001      	adds	r0, #1
 8007b38:	f000 80a7 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b3e:	445a      	add	r2, fp
 8007b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 809f 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b56:	f10a 0a01 	add.w	sl, sl, #1
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b64:	4654      	mov	r4, sl
 8007b66:	2205      	movs	r2, #5
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	484e      	ldr	r0, [pc, #312]	@ (8007ca8 <_svfiprintf_r+0x1e4>)
 8007b6e:	f7f8 fb4f 	bl	8000210 <memchr>
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	b9d8      	cbnz	r0, 8007bae <_svfiprintf_r+0xea>
 8007b76:	06d0      	lsls	r0, r2, #27
 8007b78:	bf44      	itt	mi
 8007b7a:	2320      	movmi	r3, #32
 8007b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b80:	0711      	lsls	r1, r2, #28
 8007b82:	bf44      	itt	mi
 8007b84:	232b      	movmi	r3, #43	@ 0x2b
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b90:	d015      	beq.n	8007bbe <_svfiprintf_r+0xfa>
 8007b92:	9a07      	ldr	r2, [sp, #28]
 8007b94:	4654      	mov	r4, sl
 8007b96:	2000      	movs	r0, #0
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba2:	3b30      	subs	r3, #48	@ 0x30
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d94b      	bls.n	8007c40 <_svfiprintf_r+0x17c>
 8007ba8:	b1b0      	cbz	r0, 8007bd8 <_svfiprintf_r+0x114>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e014      	b.n	8007bd8 <_svfiprintf_r+0x114>
 8007bae:	eba0 0308 	sub.w	r3, r0, r8
 8007bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	46a2      	mov	sl, r4
 8007bbc:	e7d2      	b.n	8007b64 <_svfiprintf_r+0xa0>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	9103      	str	r1, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbb      	ittet	lt
 8007bca:	425b      	neglt	r3, r3
 8007bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd0:	9307      	strge	r3, [sp, #28]
 8007bd2:	9307      	strlt	r3, [sp, #28]
 8007bd4:	bfb8      	it	lt
 8007bd6:	9204      	strlt	r2, [sp, #16]
 8007bd8:	7823      	ldrb	r3, [r4, #0]
 8007bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bdc:	d10a      	bne.n	8007bf4 <_svfiprintf_r+0x130>
 8007bde:	7863      	ldrb	r3, [r4, #1]
 8007be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007be2:	d132      	bne.n	8007c4a <_svfiprintf_r+0x186>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bf0:	3402      	adds	r4, #2
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007cb8 <_svfiprintf_r+0x1f4>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f7f8 fb07 	bl	8000210 <memchr>
 8007c02:	b138      	cbz	r0, 8007c14 <_svfiprintf_r+0x150>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	eba0 000a 	sub.w	r0, r0, sl
 8007c0a:	2240      	movs	r2, #64	@ 0x40
 8007c0c:	4082      	lsls	r2, r0
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	3401      	adds	r4, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	4824      	ldr	r0, [pc, #144]	@ (8007cac <_svfiprintf_r+0x1e8>)
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f7f8 faf6 	bl	8000210 <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d036      	beq.n	8007c96 <_svfiprintf_r+0x1d2>
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <_svfiprintf_r+0x1ec>)
 8007c2a:	bb1b      	cbnz	r3, 8007c74 <_svfiprintf_r+0x1b0>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3a:	4433      	add	r3, r6
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	e76a      	b.n	8007b16 <_svfiprintf_r+0x52>
 8007c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c44:	460c      	mov	r4, r1
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7a8      	b.n	8007b9c <_svfiprintf_r+0xd8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	4620      	mov	r0, r4
 8007c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5c:	3a30      	subs	r2, #48	@ 0x30
 8007c5e:	2a09      	cmp	r2, #9
 8007c60:	d903      	bls.n	8007c6a <_svfiprintf_r+0x1a6>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c6      	beq.n	8007bf4 <_svfiprintf_r+0x130>
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e7c4      	b.n	8007bf4 <_svfiprintf_r+0x130>
 8007c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6e:	4604      	mov	r4, r0
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7f0      	b.n	8007c56 <_svfiprintf_r+0x192>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f7fd fe5e 	bl	8005940 <_printf_float>
 8007c84:	1c42      	adds	r2, r0, #1
 8007c86:	4606      	mov	r6, r0
 8007c88:	d1d6      	bne.n	8007c38 <_svfiprintf_r+0x174>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	065b      	lsls	r3, r3, #25
 8007c8e:	f53f af2d 	bmi.w	8007aec <_svfiprintf_r+0x28>
 8007c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c94:	e72c      	b.n	8007af0 <_svfiprintf_r+0x2c>
 8007c96:	ab03      	add	r3, sp, #12
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c9e:	a904      	add	r1, sp, #16
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7fe f8e5 	bl	8005e70 <_printf_i>
 8007ca6:	e7ed      	b.n	8007c84 <_svfiprintf_r+0x1c0>
 8007ca8:	08008736 	.word	0x08008736
 8007cac:	08008740 	.word	0x08008740
 8007cb0:	08005941 	.word	0x08005941
 8007cb4:	08007a0d 	.word	0x08007a0d
 8007cb8:	0800873c 	.word	0x0800873c

08007cbc <__sflush_r>:
 8007cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	0716      	lsls	r6, r2, #28
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	d454      	bmi.n	8007d76 <__sflush_r+0xba>
 8007ccc:	684b      	ldr	r3, [r1, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dc02      	bgt.n	8007cd8 <__sflush_r+0x1c>
 8007cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd48      	ble.n	8007d6a <__sflush_r+0xae>
 8007cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d045      	beq.n	8007d6a <__sflush_r+0xae>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ce4:	682f      	ldr	r7, [r5, #0]
 8007ce6:	6a21      	ldr	r1, [r4, #32]
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	d030      	beq.n	8007d4e <__sflush_r+0x92>
 8007cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	0759      	lsls	r1, r3, #29
 8007cf2:	d505      	bpl.n	8007d00 <__sflush_r+0x44>
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cfa:	b10b      	cbz	r3, 8007d00 <__sflush_r+0x44>
 8007cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	2300      	movs	r3, #0
 8007d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d04:	6a21      	ldr	r1, [r4, #32]
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b0      	blx	r6
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	d106      	bne.n	8007d1e <__sflush_r+0x62>
 8007d10:	6829      	ldr	r1, [r5, #0]
 8007d12:	291d      	cmp	r1, #29
 8007d14:	d82b      	bhi.n	8007d6e <__sflush_r+0xb2>
 8007d16:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc0 <__sflush_r+0x104>)
 8007d18:	40ca      	lsrs	r2, r1
 8007d1a:	07d6      	lsls	r6, r2, #31
 8007d1c:	d527      	bpl.n	8007d6e <__sflush_r+0xb2>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	6062      	str	r2, [r4, #4]
 8007d22:	04d9      	lsls	r1, r3, #19
 8007d24:	6922      	ldr	r2, [r4, #16]
 8007d26:	6022      	str	r2, [r4, #0]
 8007d28:	d504      	bpl.n	8007d34 <__sflush_r+0x78>
 8007d2a:	1c42      	adds	r2, r0, #1
 8007d2c:	d101      	bne.n	8007d32 <__sflush_r+0x76>
 8007d2e:	682b      	ldr	r3, [r5, #0]
 8007d30:	b903      	cbnz	r3, 8007d34 <__sflush_r+0x78>
 8007d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d36:	602f      	str	r7, [r5, #0]
 8007d38:	b1b9      	cbz	r1, 8007d6a <__sflush_r+0xae>
 8007d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d002      	beq.n	8007d48 <__sflush_r+0x8c>
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff f9e8 	bl	8007118 <_free_r>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d4c:	e00d      	b.n	8007d6a <__sflush_r+0xae>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b0      	blx	r6
 8007d54:	4602      	mov	r2, r0
 8007d56:	1c50      	adds	r0, r2, #1
 8007d58:	d1c9      	bne.n	8007cee <__sflush_r+0x32>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0c6      	beq.n	8007cee <__sflush_r+0x32>
 8007d60:	2b1d      	cmp	r3, #29
 8007d62:	d001      	beq.n	8007d68 <__sflush_r+0xac>
 8007d64:	2b16      	cmp	r3, #22
 8007d66:	d11e      	bne.n	8007da6 <__sflush_r+0xea>
 8007d68:	602f      	str	r7, [r5, #0]
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e022      	b.n	8007db4 <__sflush_r+0xf8>
 8007d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	e01b      	b.n	8007dae <__sflush_r+0xf2>
 8007d76:	690f      	ldr	r7, [r1, #16]
 8007d78:	2f00      	cmp	r7, #0
 8007d7a:	d0f6      	beq.n	8007d6a <__sflush_r+0xae>
 8007d7c:	0793      	lsls	r3, r2, #30
 8007d7e:	680e      	ldr	r6, [r1, #0]
 8007d80:	bf08      	it	eq
 8007d82:	694b      	ldreq	r3, [r1, #20]
 8007d84:	600f      	str	r7, [r1, #0]
 8007d86:	bf18      	it	ne
 8007d88:	2300      	movne	r3, #0
 8007d8a:	eba6 0807 	sub.w	r8, r6, r7
 8007d8e:	608b      	str	r3, [r1, #8]
 8007d90:	f1b8 0f00 	cmp.w	r8, #0
 8007d94:	dde9      	ble.n	8007d6a <__sflush_r+0xae>
 8007d96:	6a21      	ldr	r1, [r4, #32]
 8007d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d9a:	4643      	mov	r3, r8
 8007d9c:	463a      	mov	r2, r7
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b0      	blx	r6
 8007da2:	2800      	cmp	r0, #0
 8007da4:	dc08      	bgt.n	8007db8 <__sflush_r+0xfc>
 8007da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	4407      	add	r7, r0
 8007dba:	eba8 0800 	sub.w	r8, r8, r0
 8007dbe:	e7e7      	b.n	8007d90 <__sflush_r+0xd4>
 8007dc0:	20400001 	.word	0x20400001

08007dc4 <_fflush_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	690b      	ldr	r3, [r1, #16]
 8007dc8:	4605      	mov	r5, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	b913      	cbnz	r3, 8007dd4 <_fflush_r+0x10>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	b118      	cbz	r0, 8007dde <_fflush_r+0x1a>
 8007dd6:	6a03      	ldr	r3, [r0, #32]
 8007dd8:	b90b      	cbnz	r3, 8007dde <_fflush_r+0x1a>
 8007dda:	f7fe f9f3 	bl	80061c4 <__sinit>
 8007dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f3      	beq.n	8007dce <_fflush_r+0xa>
 8007de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007de8:	07d0      	lsls	r0, r2, #31
 8007dea:	d404      	bmi.n	8007df6 <_fflush_r+0x32>
 8007dec:	0599      	lsls	r1, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_fflush_r+0x32>
 8007df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df2:	f7fe fb36 	bl	8006462 <__retarget_lock_acquire_recursive>
 8007df6:	4628      	mov	r0, r5
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f7ff ff5f 	bl	8007cbc <__sflush_r>
 8007dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e00:	07da      	lsls	r2, r3, #31
 8007e02:	4605      	mov	r5, r0
 8007e04:	d4e4      	bmi.n	8007dd0 <_fflush_r+0xc>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	059b      	lsls	r3, r3, #22
 8007e0a:	d4e1      	bmi.n	8007dd0 <_fflush_r+0xc>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e0e:	f7fe fb29 	bl	8006464 <__retarget_lock_release_recursive>
 8007e12:	e7dd      	b.n	8007dd0 <_fflush_r+0xc>

08007e14 <memmove>:
 8007e14:	4288      	cmp	r0, r1
 8007e16:	b510      	push	{r4, lr}
 8007e18:	eb01 0402 	add.w	r4, r1, r2
 8007e1c:	d902      	bls.n	8007e24 <memmove+0x10>
 8007e1e:	4284      	cmp	r4, r0
 8007e20:	4623      	mov	r3, r4
 8007e22:	d807      	bhi.n	8007e34 <memmove+0x20>
 8007e24:	1e43      	subs	r3, r0, #1
 8007e26:	42a1      	cmp	r1, r4
 8007e28:	d008      	beq.n	8007e3c <memmove+0x28>
 8007e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e32:	e7f8      	b.n	8007e26 <memmove+0x12>
 8007e34:	4402      	add	r2, r0
 8007e36:	4601      	mov	r1, r0
 8007e38:	428a      	cmp	r2, r1
 8007e3a:	d100      	bne.n	8007e3e <memmove+0x2a>
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e46:	e7f7      	b.n	8007e38 <memmove+0x24>

08007e48 <_sbrk_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d06      	ldr	r5, [pc, #24]	@ (8007e64 <_sbrk_r+0x1c>)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	f7fa f836 	bl	8001ec4 <_sbrk>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_sbrk_r+0x1a>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_sbrk_r+0x1a>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	2000054c 	.word	0x2000054c

08007e68 <memcpy>:
 8007e68:	440a      	add	r2, r1
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e70:	d100      	bne.n	8007e74 <memcpy+0xc>
 8007e72:	4770      	bx	lr
 8007e74:	b510      	push	{r4, lr}
 8007e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7e:	4291      	cmp	r1, r2
 8007e80:	d1f9      	bne.n	8007e76 <memcpy+0xe>
 8007e82:	bd10      	pop	{r4, pc}

08007e84 <__assert_func>:
 8007e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e86:	4614      	mov	r4, r2
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <__assert_func+0x2c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	68d8      	ldr	r0, [r3, #12]
 8007e92:	b14c      	cbz	r4, 8007ea8 <__assert_func+0x24>
 8007e94:	4b07      	ldr	r3, [pc, #28]	@ (8007eb4 <__assert_func+0x30>)
 8007e96:	9100      	str	r1, [sp, #0]
 8007e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e9c:	4906      	ldr	r1, [pc, #24]	@ (8007eb8 <__assert_func+0x34>)
 8007e9e:	462b      	mov	r3, r5
 8007ea0:	f000 f870 	bl	8007f84 <fiprintf>
 8007ea4:	f000 f880 	bl	8007fa8 <abort>
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <__assert_func+0x38>)
 8007eaa:	461c      	mov	r4, r3
 8007eac:	e7f3      	b.n	8007e96 <__assert_func+0x12>
 8007eae:	bf00      	nop
 8007eb0:	20000048 	.word	0x20000048
 8007eb4:	08008751 	.word	0x08008751
 8007eb8:	0800875e 	.word	0x0800875e
 8007ebc:	0800878c 	.word	0x0800878c

08007ec0 <_calloc_r>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	fba1 5402 	umull	r5, r4, r1, r2
 8007ec6:	b934      	cbnz	r4, 8007ed6 <_calloc_r+0x16>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7ff f999 	bl	8007200 <_malloc_r>
 8007ece:	4606      	mov	r6, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <_calloc_r+0x1e>
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	220c      	movs	r2, #12
 8007ed8:	6002      	str	r2, [r0, #0]
 8007eda:	2600      	movs	r6, #0
 8007edc:	e7f9      	b.n	8007ed2 <_calloc_r+0x12>
 8007ede:	462a      	mov	r2, r5
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7fe fa40 	bl	8006366 <memset>
 8007ee6:	e7f4      	b.n	8007ed2 <_calloc_r+0x12>

08007ee8 <__ascii_mbtowc>:
 8007ee8:	b082      	sub	sp, #8
 8007eea:	b901      	cbnz	r1, 8007eee <__ascii_mbtowc+0x6>
 8007eec:	a901      	add	r1, sp, #4
 8007eee:	b142      	cbz	r2, 8007f02 <__ascii_mbtowc+0x1a>
 8007ef0:	b14b      	cbz	r3, 8007f06 <__ascii_mbtowc+0x1e>
 8007ef2:	7813      	ldrb	r3, [r2, #0]
 8007ef4:	600b      	str	r3, [r1, #0]
 8007ef6:	7812      	ldrb	r2, [r2, #0]
 8007ef8:	1e10      	subs	r0, r2, #0
 8007efa:	bf18      	it	ne
 8007efc:	2001      	movne	r0, #1
 8007efe:	b002      	add	sp, #8
 8007f00:	4770      	bx	lr
 8007f02:	4610      	mov	r0, r2
 8007f04:	e7fb      	b.n	8007efe <__ascii_mbtowc+0x16>
 8007f06:	f06f 0001 	mvn.w	r0, #1
 8007f0a:	e7f8      	b.n	8007efe <__ascii_mbtowc+0x16>

08007f0c <_realloc_r>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	4607      	mov	r7, r0
 8007f12:	4614      	mov	r4, r2
 8007f14:	460d      	mov	r5, r1
 8007f16:	b921      	cbnz	r1, 8007f22 <_realloc_r+0x16>
 8007f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	f7ff b96f 	b.w	8007200 <_malloc_r>
 8007f22:	b92a      	cbnz	r2, 8007f30 <_realloc_r+0x24>
 8007f24:	f7ff f8f8 	bl	8007118 <_free_r>
 8007f28:	4625      	mov	r5, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	f000 f841 	bl	8007fb6 <_malloc_usable_size_r>
 8007f34:	4284      	cmp	r4, r0
 8007f36:	4606      	mov	r6, r0
 8007f38:	d802      	bhi.n	8007f40 <_realloc_r+0x34>
 8007f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f3e:	d8f4      	bhi.n	8007f2a <_realloc_r+0x1e>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff f95c 	bl	8007200 <_malloc_r>
 8007f48:	4680      	mov	r8, r0
 8007f4a:	b908      	cbnz	r0, 8007f50 <_realloc_r+0x44>
 8007f4c:	4645      	mov	r5, r8
 8007f4e:	e7ec      	b.n	8007f2a <_realloc_r+0x1e>
 8007f50:	42b4      	cmp	r4, r6
 8007f52:	4622      	mov	r2, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	bf28      	it	cs
 8007f58:	4632      	movcs	r2, r6
 8007f5a:	f7ff ff85 	bl	8007e68 <memcpy>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4638      	mov	r0, r7
 8007f62:	f7ff f8d9 	bl	8007118 <_free_r>
 8007f66:	e7f1      	b.n	8007f4c <_realloc_r+0x40>

08007f68 <__ascii_wctomb>:
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	b141      	cbz	r1, 8007f80 <__ascii_wctomb+0x18>
 8007f6e:	2aff      	cmp	r2, #255	@ 0xff
 8007f70:	d904      	bls.n	8007f7c <__ascii_wctomb+0x14>
 8007f72:	228a      	movs	r2, #138	@ 0x8a
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	4770      	bx	lr
 8007f7c:	700a      	strb	r2, [r1, #0]
 8007f7e:	2001      	movs	r0, #1
 8007f80:	4770      	bx	lr
	...

08007f84 <fiprintf>:
 8007f84:	b40e      	push	{r1, r2, r3}
 8007f86:	b503      	push	{r0, r1, lr}
 8007f88:	4601      	mov	r1, r0
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	4805      	ldr	r0, [pc, #20]	@ (8007fa4 <fiprintf+0x20>)
 8007f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f92:	6800      	ldr	r0, [r0, #0]
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	f000 f83f 	bl	8008018 <_vfiprintf_r>
 8007f9a:	b002      	add	sp, #8
 8007f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa0:	b003      	add	sp, #12
 8007fa2:	4770      	bx	lr
 8007fa4:	20000048 	.word	0x20000048

08007fa8 <abort>:
 8007fa8:	b508      	push	{r3, lr}
 8007faa:	2006      	movs	r0, #6
 8007fac:	f000 fa08 	bl	80083c0 <raise>
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	f7f9 ff0e 	bl	8001dd2 <_exit>

08007fb6 <_malloc_usable_size_r>:
 8007fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fba:	1f18      	subs	r0, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfbc      	itt	lt
 8007fc0:	580b      	ldrlt	r3, [r1, r0]
 8007fc2:	18c0      	addlt	r0, r0, r3
 8007fc4:	4770      	bx	lr

08007fc6 <__sfputc_r>:
 8007fc6:	6893      	ldr	r3, [r2, #8]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	b410      	push	{r4}
 8007fce:	6093      	str	r3, [r2, #8]
 8007fd0:	da08      	bge.n	8007fe4 <__sfputc_r+0x1e>
 8007fd2:	6994      	ldr	r4, [r2, #24]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	db01      	blt.n	8007fdc <__sfputc_r+0x16>
 8007fd8:	290a      	cmp	r1, #10
 8007fda:	d103      	bne.n	8007fe4 <__sfputc_r+0x1e>
 8007fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe0:	f000 b932 	b.w	8008248 <__swbuf_r>
 8007fe4:	6813      	ldr	r3, [r2, #0]
 8007fe6:	1c58      	adds	r0, r3, #1
 8007fe8:	6010      	str	r0, [r2, #0]
 8007fea:	7019      	strb	r1, [r3, #0]
 8007fec:	4608      	mov	r0, r1
 8007fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <__sfputs_r>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	18d5      	adds	r5, r2, r3
 8007ffe:	42ac      	cmp	r4, r5
 8008000:	d101      	bne.n	8008006 <__sfputs_r+0x12>
 8008002:	2000      	movs	r0, #0
 8008004:	e007      	b.n	8008016 <__sfputs_r+0x22>
 8008006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800a:	463a      	mov	r2, r7
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff ffda 	bl	8007fc6 <__sfputc_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d1f3      	bne.n	8007ffe <__sfputs_r+0xa>
 8008016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008018 <_vfiprintf_r>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460d      	mov	r5, r1
 800801e:	b09d      	sub	sp, #116	@ 0x74
 8008020:	4614      	mov	r4, r2
 8008022:	4698      	mov	r8, r3
 8008024:	4606      	mov	r6, r0
 8008026:	b118      	cbz	r0, 8008030 <_vfiprintf_r+0x18>
 8008028:	6a03      	ldr	r3, [r0, #32]
 800802a:	b90b      	cbnz	r3, 8008030 <_vfiprintf_r+0x18>
 800802c:	f7fe f8ca 	bl	80061c4 <__sinit>
 8008030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d405      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d402      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 800803c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803e:	f7fe fa10 	bl	8006462 <__retarget_lock_acquire_recursive>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	071b      	lsls	r3, r3, #28
 8008046:	d501      	bpl.n	800804c <_vfiprintf_r+0x34>
 8008048:	692b      	ldr	r3, [r5, #16]
 800804a:	b99b      	cbnz	r3, 8008074 <_vfiprintf_r+0x5c>
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f000 f938 	bl	80082c4 <__swsetup_r>
 8008054:	b170      	cbz	r0, 8008074 <_vfiprintf_r+0x5c>
 8008056:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008058:	07dc      	lsls	r4, r3, #31
 800805a:	d504      	bpl.n	8008066 <_vfiprintf_r+0x4e>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b01d      	add	sp, #116	@ 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d4f7      	bmi.n	800805c <_vfiprintf_r+0x44>
 800806c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800806e:	f7fe f9f9 	bl	8006464 <__retarget_lock_release_recursive>
 8008072:	e7f3      	b.n	800805c <_vfiprintf_r+0x44>
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	@ 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800807e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008082:	2330      	movs	r3, #48	@ 0x30
 8008084:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008234 <_vfiprintf_r+0x21c>
 8008088:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800808c:	f04f 0901 	mov.w	r9, #1
 8008090:	4623      	mov	r3, r4
 8008092:	469a      	mov	sl, r3
 8008094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008098:	b10a      	cbz	r2, 800809e <_vfiprintf_r+0x86>
 800809a:	2a25      	cmp	r2, #37	@ 0x25
 800809c:	d1f9      	bne.n	8008092 <_vfiprintf_r+0x7a>
 800809e:	ebba 0b04 	subs.w	fp, sl, r4
 80080a2:	d00b      	beq.n	80080bc <_vfiprintf_r+0xa4>
 80080a4:	465b      	mov	r3, fp
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ffa2 	bl	8007ff4 <__sfputs_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	f000 80a7 	beq.w	8008204 <_vfiprintf_r+0x1ec>
 80080b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b8:	445a      	add	r2, fp
 80080ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 809f 	beq.w	8008204 <_vfiprintf_r+0x1ec>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d0:	f10a 0a01 	add.w	sl, sl, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80080de:	4654      	mov	r4, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4853      	ldr	r0, [pc, #332]	@ (8008234 <_vfiprintf_r+0x21c>)
 80080e8:	f7f8 f892 	bl	8000210 <memchr>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	b9d8      	cbnz	r0, 8008128 <_vfiprintf_r+0x110>
 80080f0:	06d1      	lsls	r1, r2, #27
 80080f2:	bf44      	itt	mi
 80080f4:	2320      	movmi	r3, #32
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fa:	0713      	lsls	r3, r2, #28
 80080fc:	bf44      	itt	mi
 80080fe:	232b      	movmi	r3, #43	@ 0x2b
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b2a      	cmp	r3, #42	@ 0x2a
 800810a:	d015      	beq.n	8008138 <_vfiprintf_r+0x120>
 800810c:	9a07      	ldr	r2, [sp, #28]
 800810e:	4654      	mov	r4, sl
 8008110:	2000      	movs	r0, #0
 8008112:	f04f 0c0a 	mov.w	ip, #10
 8008116:	4621      	mov	r1, r4
 8008118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811c:	3b30      	subs	r3, #48	@ 0x30
 800811e:	2b09      	cmp	r3, #9
 8008120:	d94b      	bls.n	80081ba <_vfiprintf_r+0x1a2>
 8008122:	b1b0      	cbz	r0, 8008152 <_vfiprintf_r+0x13a>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	e014      	b.n	8008152 <_vfiprintf_r+0x13a>
 8008128:	eba0 0308 	sub.w	r3, r0, r8
 800812c:	fa09 f303 	lsl.w	r3, r9, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	46a2      	mov	sl, r4
 8008136:	e7d2      	b.n	80080de <_vfiprintf_r+0xc6>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfbb      	ittet	lt
 8008144:	425b      	neglt	r3, r3
 8008146:	f042 0202 	orrlt.w	r2, r2, #2
 800814a:	9307      	strge	r3, [sp, #28]
 800814c:	9307      	strlt	r3, [sp, #28]
 800814e:	bfb8      	it	lt
 8008150:	9204      	strlt	r2, [sp, #16]
 8008152:	7823      	ldrb	r3, [r4, #0]
 8008154:	2b2e      	cmp	r3, #46	@ 0x2e
 8008156:	d10a      	bne.n	800816e <_vfiprintf_r+0x156>
 8008158:	7863      	ldrb	r3, [r4, #1]
 800815a:	2b2a      	cmp	r3, #42	@ 0x2a
 800815c:	d132      	bne.n	80081c4 <_vfiprintf_r+0x1ac>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	1d1a      	adds	r2, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800816a:	3402      	adds	r4, #2
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008244 <_vfiprintf_r+0x22c>
 8008172:	7821      	ldrb	r1, [r4, #0]
 8008174:	2203      	movs	r2, #3
 8008176:	4650      	mov	r0, sl
 8008178:	f7f8 f84a 	bl	8000210 <memchr>
 800817c:	b138      	cbz	r0, 800818e <_vfiprintf_r+0x176>
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	eba0 000a 	sub.w	r0, r0, sl
 8008184:	2240      	movs	r2, #64	@ 0x40
 8008186:	4082      	lsls	r2, r0
 8008188:	4313      	orrs	r3, r2
 800818a:	3401      	adds	r4, #1
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008192:	4829      	ldr	r0, [pc, #164]	@ (8008238 <_vfiprintf_r+0x220>)
 8008194:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008198:	2206      	movs	r2, #6
 800819a:	f7f8 f839 	bl	8000210 <memchr>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d03f      	beq.n	8008222 <_vfiprintf_r+0x20a>
 80081a2:	4b26      	ldr	r3, [pc, #152]	@ (800823c <_vfiprintf_r+0x224>)
 80081a4:	bb1b      	cbnz	r3, 80081ee <_vfiprintf_r+0x1d6>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	3307      	adds	r3, #7
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	3308      	adds	r3, #8
 80081b0:	9303      	str	r3, [sp, #12]
 80081b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b4:	443b      	add	r3, r7
 80081b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b8:	e76a      	b.n	8008090 <_vfiprintf_r+0x78>
 80081ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80081be:	460c      	mov	r4, r1
 80081c0:	2001      	movs	r0, #1
 80081c2:	e7a8      	b.n	8008116 <_vfiprintf_r+0xfe>
 80081c4:	2300      	movs	r3, #0
 80081c6:	3401      	adds	r4, #1
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	4619      	mov	r1, r3
 80081cc:	f04f 0c0a 	mov.w	ip, #10
 80081d0:	4620      	mov	r0, r4
 80081d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d6:	3a30      	subs	r2, #48	@ 0x30
 80081d8:	2a09      	cmp	r2, #9
 80081da:	d903      	bls.n	80081e4 <_vfiprintf_r+0x1cc>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0c6      	beq.n	800816e <_vfiprintf_r+0x156>
 80081e0:	9105      	str	r1, [sp, #20]
 80081e2:	e7c4      	b.n	800816e <_vfiprintf_r+0x156>
 80081e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e8:	4604      	mov	r4, r0
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7f0      	b.n	80081d0 <_vfiprintf_r+0x1b8>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b12      	ldr	r3, [pc, #72]	@ (8008240 <_vfiprintf_r+0x228>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7fd fba1 	bl	8005940 <_printf_float>
 80081fe:	4607      	mov	r7, r0
 8008200:	1c78      	adds	r0, r7, #1
 8008202:	d1d6      	bne.n	80081b2 <_vfiprintf_r+0x19a>
 8008204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x1fe>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x1fe>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7fe f927 	bl	8006464 <__retarget_lock_release_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	065b      	lsls	r3, r3, #25
 800821a:	f53f af1f 	bmi.w	800805c <_vfiprintf_r+0x44>
 800821e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008220:	e71e      	b.n	8008060 <_vfiprintf_r+0x48>
 8008222:	ab03      	add	r3, sp, #12
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	462a      	mov	r2, r5
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <_vfiprintf_r+0x228>)
 800822a:	a904      	add	r1, sp, #16
 800822c:	4630      	mov	r0, r6
 800822e:	f7fd fe1f 	bl	8005e70 <_printf_i>
 8008232:	e7e4      	b.n	80081fe <_vfiprintf_r+0x1e6>
 8008234:	08008736 	.word	0x08008736
 8008238:	08008740 	.word	0x08008740
 800823c:	08005941 	.word	0x08005941
 8008240:	08007ff5 	.word	0x08007ff5
 8008244:	0800873c 	.word	0x0800873c

08008248 <__swbuf_r>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	460e      	mov	r6, r1
 800824c:	4614      	mov	r4, r2
 800824e:	4605      	mov	r5, r0
 8008250:	b118      	cbz	r0, 800825a <__swbuf_r+0x12>
 8008252:	6a03      	ldr	r3, [r0, #32]
 8008254:	b90b      	cbnz	r3, 800825a <__swbuf_r+0x12>
 8008256:	f7fd ffb5 	bl	80061c4 <__sinit>
 800825a:	69a3      	ldr	r3, [r4, #24]
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	071a      	lsls	r2, r3, #28
 8008262:	d501      	bpl.n	8008268 <__swbuf_r+0x20>
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	b943      	cbnz	r3, 800827a <__swbuf_r+0x32>
 8008268:	4621      	mov	r1, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f000 f82a 	bl	80082c4 <__swsetup_r>
 8008270:	b118      	cbz	r0, 800827a <__swbuf_r+0x32>
 8008272:	f04f 37ff 	mov.w	r7, #4294967295
 8008276:	4638      	mov	r0, r7
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	1a98      	subs	r0, r3, r2
 8008280:	6963      	ldr	r3, [r4, #20]
 8008282:	b2f6      	uxtb	r6, r6
 8008284:	4283      	cmp	r3, r0
 8008286:	4637      	mov	r7, r6
 8008288:	dc05      	bgt.n	8008296 <__swbuf_r+0x4e>
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f7ff fd99 	bl	8007dc4 <_fflush_r>
 8008292:	2800      	cmp	r0, #0
 8008294:	d1ed      	bne.n	8008272 <__swbuf_r+0x2a>
 8008296:	68a3      	ldr	r3, [r4, #8]
 8008298:	3b01      	subs	r3, #1
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	701e      	strb	r6, [r3, #0]
 80082a4:	6962      	ldr	r2, [r4, #20]
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d004      	beq.n	80082b6 <__swbuf_r+0x6e>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	07db      	lsls	r3, r3, #31
 80082b0:	d5e1      	bpl.n	8008276 <__swbuf_r+0x2e>
 80082b2:	2e0a      	cmp	r6, #10
 80082b4:	d1df      	bne.n	8008276 <__swbuf_r+0x2e>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff fd83 	bl	8007dc4 <_fflush_r>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0d9      	beq.n	8008276 <__swbuf_r+0x2e>
 80082c2:	e7d6      	b.n	8008272 <__swbuf_r+0x2a>

080082c4 <__swsetup_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4b29      	ldr	r3, [pc, #164]	@ (800836c <__swsetup_r+0xa8>)
 80082c8:	4605      	mov	r5, r0
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	460c      	mov	r4, r1
 80082ce:	b118      	cbz	r0, 80082d8 <__swsetup_r+0x14>
 80082d0:	6a03      	ldr	r3, [r0, #32]
 80082d2:	b90b      	cbnz	r3, 80082d8 <__swsetup_r+0x14>
 80082d4:	f7fd ff76 	bl	80061c4 <__sinit>
 80082d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082dc:	0719      	lsls	r1, r3, #28
 80082de:	d422      	bmi.n	8008326 <__swsetup_r+0x62>
 80082e0:	06da      	lsls	r2, r3, #27
 80082e2:	d407      	bmi.n	80082f4 <__swsetup_r+0x30>
 80082e4:	2209      	movs	r2, #9
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	e033      	b.n	800835c <__swsetup_r+0x98>
 80082f4:	0758      	lsls	r0, r3, #29
 80082f6:	d512      	bpl.n	800831e <__swsetup_r+0x5a>
 80082f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082fa:	b141      	cbz	r1, 800830e <__swsetup_r+0x4a>
 80082fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008300:	4299      	cmp	r1, r3
 8008302:	d002      	beq.n	800830a <__swsetup_r+0x46>
 8008304:	4628      	mov	r0, r5
 8008306:	f7fe ff07 	bl	8007118 <_free_r>
 800830a:	2300      	movs	r3, #0
 800830c:	6363      	str	r3, [r4, #52]	@ 0x34
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	2300      	movs	r3, #0
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f043 0308 	orr.w	r3, r3, #8
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	b94b      	cbnz	r3, 800833e <__swsetup_r+0x7a>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008334:	d003      	beq.n	800833e <__swsetup_r+0x7a>
 8008336:	4621      	mov	r1, r4
 8008338:	4628      	mov	r0, r5
 800833a:	f000 f883 	bl	8008444 <__smakebuf_r>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	f013 0201 	ands.w	r2, r3, #1
 8008346:	d00a      	beq.n	800835e <__swsetup_r+0x9a>
 8008348:	2200      	movs	r2, #0
 800834a:	60a2      	str	r2, [r4, #8]
 800834c:	6962      	ldr	r2, [r4, #20]
 800834e:	4252      	negs	r2, r2
 8008350:	61a2      	str	r2, [r4, #24]
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	b942      	cbnz	r2, 8008368 <__swsetup_r+0xa4>
 8008356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800835a:	d1c5      	bne.n	80082e8 <__swsetup_r+0x24>
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	0799      	lsls	r1, r3, #30
 8008360:	bf58      	it	pl
 8008362:	6962      	ldrpl	r2, [r4, #20]
 8008364:	60a2      	str	r2, [r4, #8]
 8008366:	e7f4      	b.n	8008352 <__swsetup_r+0x8e>
 8008368:	2000      	movs	r0, #0
 800836a:	e7f7      	b.n	800835c <__swsetup_r+0x98>
 800836c:	20000048 	.word	0x20000048

08008370 <_raise_r>:
 8008370:	291f      	cmp	r1, #31
 8008372:	b538      	push	{r3, r4, r5, lr}
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
 8008378:	d904      	bls.n	8008384 <_raise_r+0x14>
 800837a:	2316      	movs	r3, #22
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 30ff 	mov.w	r0, #4294967295
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008386:	b112      	cbz	r2, 800838e <_raise_r+0x1e>
 8008388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800838c:	b94b      	cbnz	r3, 80083a2 <_raise_r+0x32>
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f830 	bl	80083f4 <_getpid_r>
 8008394:	4622      	mov	r2, r4
 8008396:	4601      	mov	r1, r0
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839e:	f000 b817 	b.w	80083d0 <_kill_r>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00a      	beq.n	80083bc <_raise_r+0x4c>
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	d103      	bne.n	80083b2 <_raise_r+0x42>
 80083aa:	2316      	movs	r3, #22
 80083ac:	6003      	str	r3, [r0, #0]
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7e7      	b.n	8008382 <_raise_r+0x12>
 80083b2:	2100      	movs	r1, #0
 80083b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083b8:	4620      	mov	r0, r4
 80083ba:	4798      	blx	r3
 80083bc:	2000      	movs	r0, #0
 80083be:	e7e0      	b.n	8008382 <_raise_r+0x12>

080083c0 <raise>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <raise+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f7ff bfd3 	b.w	8008370 <_raise_r>
 80083ca:	bf00      	nop
 80083cc:	20000048 	.word	0x20000048

080083d0 <_kill_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	@ (80083f0 <_kill_r+0x20>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f7f9 fce8 	bl	8001db2 <_kill>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_kill_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_kill_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	2000054c 	.word	0x2000054c

080083f4 <_getpid_r>:
 80083f4:	f7f9 bcd5 	b.w	8001da2 <_getpid>

080083f8 <__swhatbuf_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	2900      	cmp	r1, #0
 8008402:	b096      	sub	sp, #88	@ 0x58
 8008404:	4615      	mov	r5, r2
 8008406:	461e      	mov	r6, r3
 8008408:	da0d      	bge.n	8008426 <__swhatbuf_r+0x2e>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	bf14      	ite	ne
 8008416:	2340      	movne	r3, #64	@ 0x40
 8008418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800841c:	2000      	movs	r0, #0
 800841e:	6031      	str	r1, [r6, #0]
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	b016      	add	sp, #88	@ 0x58
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	466a      	mov	r2, sp
 8008428:	f000 f848 	bl	80084bc <_fstat_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	dbec      	blt.n	800840a <__swhatbuf_r+0x12>
 8008430:	9901      	ldr	r1, [sp, #4]
 8008432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800843a:	4259      	negs	r1, r3
 800843c:	4159      	adcs	r1, r3
 800843e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008442:	e7eb      	b.n	800841c <__swhatbuf_r+0x24>

08008444 <__smakebuf_r>:
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008448:	079d      	lsls	r5, r3, #30
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
 800844e:	d507      	bpl.n	8008460 <__smakebuf_r+0x1c>
 8008450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	2301      	movs	r3, #1
 800845a:	6163      	str	r3, [r4, #20]
 800845c:	b003      	add	sp, #12
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008460:	ab01      	add	r3, sp, #4
 8008462:	466a      	mov	r2, sp
 8008464:	f7ff ffc8 	bl	80083f8 <__swhatbuf_r>
 8008468:	9f00      	ldr	r7, [sp, #0]
 800846a:	4605      	mov	r5, r0
 800846c:	4639      	mov	r1, r7
 800846e:	4630      	mov	r0, r6
 8008470:	f7fe fec6 	bl	8007200 <_malloc_r>
 8008474:	b948      	cbnz	r0, 800848a <__smakebuf_r+0x46>
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	059a      	lsls	r2, r3, #22
 800847c:	d4ee      	bmi.n	800845c <__smakebuf_r+0x18>
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	f043 0302 	orr.w	r3, r3, #2
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	e7e2      	b.n	8008450 <__smakebuf_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	6020      	str	r0, [r4, #0]
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800849a:	b15b      	cbz	r3, 80084b4 <__smakebuf_r+0x70>
 800849c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f81d 	bl	80084e0 <_isatty_r>
 80084a6:	b128      	cbz	r0, 80084b4 <__smakebuf_r+0x70>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	431d      	orrs	r5, r3
 80084b8:	81a5      	strh	r5, [r4, #12]
 80084ba:	e7cf      	b.n	800845c <__smakebuf_r+0x18>

080084bc <_fstat_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_fstat_r+0x20>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f7f9 fcd2 	bl	8001e72 <_fstat>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d102      	bne.n	80084d8 <_fstat_r+0x1c>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b103      	cbz	r3, 80084d8 <_fstat_r+0x1c>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	bf00      	nop
 80084dc:	2000054c 	.word	0x2000054c

080084e0 <_isatty_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d06      	ldr	r5, [pc, #24]	@ (80084fc <_isatty_r+0x1c>)
 80084e4:	2300      	movs	r3, #0
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	f7f9 fcd1 	bl	8001e92 <_isatty>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_isatty_r+0x1a>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_isatty_r+0x1a>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	2000054c 	.word	0x2000054c

08008500 <_init>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr

0800850c <_fini>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr
